
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import java.io.*;
import java.util.LinkedList;
import java.util.Collection;
import java.util.Iterator;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.*;
import rs.etf.pp1.symboltable.structure.HashTableDataStructure;
import rs.etf.pp1.symboltable.visitors.SymbolTableVisitor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MJParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\332\000\002\140\002\000\002\141\002\000\002\002" +
    "\012\000\002\002\004\000\002\003\003\000\002\003\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\142\002\000\002" +
    "\006\005\000\002\021\004\000\002\021\003\000\002\023" +
    "\004\000\002\023\004\000\002\022\004\000\002\022\003" +
    "\000\002\024\004\000\002\024\004\000\002\007\003\000" +
    "\002\007\002\000\002\010\004\000\002\010\003\000\002" +
    "\143\002\000\002\144\002\000\002\011\010\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\014\003\000" +
    "\002\016\003\000\002\015\003\000\002\020\004\000\002" +
    "\025\004\000\002\025\002\000\002\145\002\000\002\146" +
    "\002\000\002\147\002\000\002\150\002\000\002\027\015" +
    "\000\002\026\004\000\002\026\002\000\002\030\003\000" +
    "\002\030\002\000\002\031\004\000\002\031\003\000\002" +
    "\151\002\000\002\032\006\000\002\033\005\000\002\033" +
    "\003\000\002\034\005\000\002\034\002\000\002\152\002" +
    "\000\002\153\002\000\002\154\002\000\002\155\002\000" +
    "\002\156\002\000\002\035\017\000\002\036\003\000\002" +
    "\036\002\000\002\037\003\000\002\037\003\000\002\052" +
    "\003\000\002\052\003\000\002\040\003\000\002\040\003" +
    "\000\002\041\004\000\002\041\003\000\002\043\004\000" +
    "\002\043\003\000\002\157\002\000\002\042\006\000\002" +
    "\042\004\000\002\044\005\000\002\044\003\000\002\045" +
    "\004\000\002\045\004\000\002\046\003\000\002\046\002" +
    "\000\002\047\004\000\002\047\003\000\002\054\004\000" +
    "\002\054\003\000\002\050\004\000\002\050\003\000\002" +
    "\053\004\000\002\053\004\000\002\055\004\000\002\055" +
    "\004\000\002\160\002\000\002\051\005\000\002\056\003" +
    "\000\002\057\003\000\002\161\002\000\002\162\002\000" +
    "\002\057\011\000\002\163\002\000\002\164\002\000\002" +
    "\165\002\000\002\057\014\000\002\057\011\000\002\057" +
    "\011\000\002\057\011\000\002\057\011\000\002\057\011" +
    "\000\002\057\011\000\002\057\011\000\002\057\007\000" +
    "\002\057\005\000\002\057\004\000\002\057\004\000\002" +
    "\057\005\000\002\057\007\000\002\057\010\000\002\057" +
    "\005\000\002\060\004\000\002\060\002\000\002\061\003" +
    "\000\002\061\002\000\002\074\004\000\002\074\003\000" +
    "\002\074\004\000\002\063\004\000\002\063\002\000\002" +
    "\077\003\000\002\077\003\000\002\077\002\000\002\075" +
    "\004\000\002\075\004\000\002\075\003\000\002\075\004" +
    "\000\002\072\004\000\002\072\003\000\002\064\003\000" +
    "\002\064\003\000\002\101\004\000\002\103\003\000\002" +
    "\103\003\000\002\166\002\000\002\102\007\000\002\065" +
    "\003\000\002\065\002\000\002\167\002\000\002\076\006" +
    "\000\002\170\002\000\002\100\006\000\002\104\004\000" +
    "\002\104\004\000\002\171\002\000\002\066\005\000\002" +
    "\067\003\000\002\067\002\000\002\070\004\000\002\070" +
    "\003\000\002\071\004\000\002\106\003\000\002\062\004" +
    "\000\002\062\004\000\002\107\005\000\002\107\003\000" +
    "\002\110\003\000\002\111\005\000\002\111\003\000\002" +
    "\112\004\000\002\113\004\000\002\113\002\000\002\114" +
    "\004\000\002\114\003\000\002\116\005\000\002\116\003" +
    "\000\002\117\005\000\002\117\003\000\002\120\003\000" +
    "\002\121\005\000\002\121\003\000\002\122\005\000\002" +
    "\122\003\000\002\123\003\000\002\123\003\000\002\123" +
    "\003\000\002\123\005\000\002\123\005\000\002\125\005" +
    "\000\002\125\002\000\002\172\002\000\002\126\005\000" +
    "\002\127\003\000\002\127\002\000\002\130\004\000\002" +
    "\130\003\000\002\131\004\000\002\173\002\000\002\131" +
    "\006\000\002\131\005\000\002\132\003\000\002\132\003" +
    "\000\002\132\003\000\002\133\003\000\002\133\003\000" +
    "\002\133\003\000\002\133\003\000\002\133\003\000\002" +
    "\133\003\000\002\134\003\000\002\134\003\000\002\135" +
    "\003\000\002\135\003\000\002\136\003\000\002\136\003" +
    "\000\002\136\003\000\002\137\003\000\002\137\003\000" +
    "\002\137\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014c\000\004\004\001\001\002\000\004\002\u014e\001" +
    "\002\000\004\004\006\001\002\000\004\023\007\001\002" +
    "\000\012\007\000\011\000\023\000\063\000\001\002\000" +
    "\012\007\021\011\022\023\013\063\ufffc\001\002\000\006" +
    "\003\ufff6\023\ufff6\001\002\000\004\063\u013e\001\002\000" +
    "\066\003\uffa1\023\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\054\uffa1\055\uffa1\060\uffa1\061\uffa1\062\uffa1\063" +
    "\uffa1\001\002\000\012\007\ufff8\011\ufff8\023\ufff8\063\ufff8" +
    "\001\002\000\012\007\ufff7\011\ufff7\023\ufff7\063\ufff7\001" +
    "\002\000\012\007\ufffa\011\ufffa\023\ufffa\063\ufffa\001\002" +
    "\000\012\007\021\011\022\023\013\063\ufffd\001\002\000" +
    "\012\007\ufff9\011\ufff9\023\ufff9\063\ufff9\001\002\000\004" +
    "\023\044\001\002\000\004\023\013\001\002\000\004\023" +
    "\uffe8\001\002\000\004\023\026\001\002\000\006\054\uffe7" +
    "\055\040\001\002\000\004\044\030\001\002\000\006\054" +
    "\uffe4\055\uffe4\001\002\000\010\024\035\025\037\026\036" +
    "\001\002\000\056\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\054\uffe1\055\uffe1\060\uffe1\062\uffe1\001\002\000\056" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\054\uffe0\055" +
    "\uffe0\060\uffe0\062\uffe0\001\002\000\056\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\054\uffe2\055\uffe2\060\uffe2\062" +
    "\uffe2\001\002\000\006\054\uffe3\055\uffe3\001\002\000\056" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\054\uffdf\055" +
    "\uffdf\060\uffdf\062\uffdf\001\002\000\056\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\054\uffde\055\uffde\060\uffde\062" +
    "\uffde\001\002\000\056\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\054\uffdd\055\uffdd\060\uffdd\062\uffdd\001\002\000" +
    "\004\023\026\001\002\000\004\054\042\001\002\000\012" +
    "\007\uffe6\011\uffe6\023\uffe6\063\uffe6\001\002\000\006\054" +
    "\uffe5\055\uffe5\001\002\000\006\021\uffd9\063\uffd9\001\002" +
    "\000\006\021\046\063\uffd3\001\002\000\004\023\013\001" +
    "\002\000\004\063\uffd8\001\002\000\004\063\051\001\002" +
    "\000\010\023\013\063\uffd1\064\uffd1\001\002\000\006\063" +
    "\uffd7\064\uffd7\001\002\000\004\023\uffce\001\002\000\010" +
    "\023\013\063\uffd2\064\uffd2\001\002\000\010\023\uffcf\063" +
    "\uffcf\064\uffcf\001\002\000\010\023\uffd0\063\uffd0\064\uffd0" +
    "\001\002\000\004\023\062\001\002\000\006\054\uffcb\055" +
    "\uffcb\001\002\000\006\054\067\055\066\001\002\000\012" +
    "\054\uffda\055\uffda\060\uffda\061\064\001\002\000\010\054" +
    "\uffdc\055\uffdc\060\uffdc\001\002\000\004\062\065\001\002" +
    "\000\010\054\uffdb\055\uffdb\060\uffdb\001\002\000\004\023" +
    "\062\001\002\000\010\023\uffcd\063\uffcd\064\uffcd\001\002" +
    "\000\006\054\uffcc\055\uffcc\001\002\000\006\063\072\064" +
    "\uffc9\001\002\000\012\005\077\017\uffc1\023\uffc1\064\uffeb" +
    "\001\002\000\004\064\uffd6\001\002\000\004\064\075\001" +
    "\002\000\012\007\uffd5\011\uffd5\023\uffd5\063\uffd5\001\002" +
    "\000\004\064\u013b\001\002\000\006\017\uffc2\023\uffc2\001" +
    "\002\000\012\005\077\017\uffc1\023\uffc1\064\uffec\001\002" +
    "\000\012\005\uffe9\017\uffe9\023\uffe9\064\uffe9\001\002\000" +
    "\006\017\104\023\013\001\002\000\004\023\uffc0\001\002" +
    "\000\004\023\uffbf\001\002\000\004\023\uffc8\001\002\000" +
    "\004\023\107\001\002\000\004\057\uffc7\001\002\000\004" +
    "\057\111\001\002\000\010\003\uffc6\023\uffc6\060\uffc6\001" +
    "\002\000\010\003\121\023\013\060\114\001\002\000\004" +
    "\023\uffa3\001\002\000\010\003\uffbd\023\uffbd\063\uffbd\001" +
    "\002\000\010\003\uffaa\023\uffaa\063\uffaa\001\002\000\006" +
    "\055\u0136\060\u0137\001\002\000\010\003\uffc5\023\uffc5\063" +
    "\uffc5\001\002\000\006\003\uffa8\023\uffa8\001\002\000\006" +
    "\055\126\060\127\001\002\000\010\003\uffbe\023\uffbe\063" +
    "\uffbe\001\002\000\006\003\121\023\013\001\002\000\006" +
    "\003\uffa9\023\uffa9\001\002\000\010\003\uffab\023\uffab\063" +
    "\uffab\001\002\000\006\003\uffa6\023\uffa6\001\002\000\010" +
    "\003\uffa4\023\uffa4\063\uffa4\001\002\000\010\003\137\023" +
    "\013\063\133\001\002\000\004\023\uffb6\001\002\000\010" +
    "\003\uffb7\023\uffb7\063\u012f\001\002\000\026\006\uffbb\012" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\022\uffbb\023\uffbb" +
    "\063\uffbb\064\uffbb\001\002\000\026\006\uffbc\012\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\020\uffbc\022\uffbc\023\uffbc\063\uffbc" +
    "\064\uffbc\001\002\000\026\006\uffb9\012\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\020\uffb9\022\uffb9\023\uffb9\063\uffb9\064\uffb9" +
    "\001\002\000\006\003\137\023\013\001\002\000\006\054" +
    "\u012b\063\u012c\001\002\000\026\006\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\020\uffc4\022\uffc4\023\uffc4\063\uffc4\064" +
    "\uffc4\001\002\000\026\006\152\012\151\014\154\015\144" +
    "\016\150\020\160\022\145\023\146\063\163\064\uffae\001" +
    "\002\000\024\044\361\045\270\046\266\047\237\050\240" +
    "\051\233\052\364\053\365\057\311\001\002\000\004\064" +
    "\u0123\001\002\000\004\057\u011f\001\002\000\004\054\u011e" +
    "\001\002\000\072\027\uff44\030\uff44\031\uff44\032\uff44\033" +
    "\uff44\034\uff44\035\uff44\036\uff44\037\uff44\040\uff44\041\uff44" +
    "\042\uff44\043\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050" +
    "\uff44\051\uff44\052\uff44\053\uff44\054\uff44\055\uff44\056\uff44" +
    "\057\uff44\060\uff44\061\uff44\062\uff44\001\002\000\004\054" +
    "\u0110\001\002\000\022\013\222\023\146\024\035\025\037" +
    "\026\036\030\214\054\uff86\057\210\001\002\000\004\057" +
    "\u0101\001\002\000\004\054\u0100\001\002\000\030\006\uffa0" +
    "\010\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\020\uffa0\022" +
    "\uffa0\023\uffa0\063\uffa0\064\uffa0\001\002\000\004\057\371" +
    "\001\002\000\006\054\uff77\060\uff77\001\002\000\006\054" +
    "\uff76\060\uff76\001\002\000\026\006\uffac\012\uffac\014\uffac" +
    "\015\uffac\016\uffac\020\uffac\022\uffac\023\uffac\063\uffac\064" +
    "\uffac\001\002\000\012\003\172\023\146\054\uff7e\057\174" +
    "\001\002\000\030\006\uff78\010\uff78\012\uff78\014\uff78\015" +
    "\uff78\016\uff78\020\uff78\022\uff78\023\uff78\063\uff78\064\uff78" +
    "\001\002\000\026\006\152\012\151\014\154\015\144\016" +
    "\150\020\160\022\145\023\146\063\163\064\uffaf\001\002" +
    "\000\026\006\152\012\151\014\154\015\144\016\150\020" +
    "\160\022\145\023\146\063\163\064\uffae\001\002\000\004" +
    "\064\165\001\002\000\030\006\uff8a\010\uff8a\012\uff8a\014" +
    "\uff8a\015\uff8a\016\uff8a\020\uff8a\022\uff8a\023\uff8a\063\uff8a" +
    "\064\uff8a\001\002\000\026\006\uffad\012\uffad\014\uffad\015" +
    "\uffad\016\uffad\020\uffad\022\uffad\023\uffad\063\uffad\064\uffad" +
    "\001\002\000\006\054\uff7f\060\uff7f\001\002\000\024\044" +
    "\361\045\270\046\266\047\237\050\240\051\233\052\364" +
    "\053\365\057\311\001\002\000\006\054\uff80\060\uff80\001" +
    "\002\000\006\054\341\060\342\001\002\000\004\054\326" +
    "\001\002\000\006\023\146\054\uff7e\001\002\000\004\054" +
    "\176\001\002\000\024\003\uff9c\013\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\030\uff9c\054\uff9c\057\uff9c\001\002\000" +
    "\024\003\220\013\222\023\146\024\035\025\037\026\036" +
    "\030\214\054\212\057\210\001\002\000\060\027\uff4a\030" +
    "\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a\036\uff4a" +
    "\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\045\uff4a\046" +
    "\uff4a\047\uff4a\050\uff4a\051\uff4a\054\uff4a\055\uff4a\057\311" +
    "\060\uff4a\062\uff4a\001\002\000\056\027\uff4c\030\uff4c\031" +
    "\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c" +
    "\040\uff4c\041\uff4c\042\uff4c\043\uff4c\045\uff4c\046\uff4c\047" +
    "\uff4c\050\uff4c\051\uff4c\054\uff4c\055\uff4c\060\uff4c\062\uff4c" +
    "\001\002\000\032\034\uff55\035\uff55\036\uff55\037\uff55\040" +
    "\uff55\041\uff55\042\uff55\043\uff55\054\uff55\055\uff55\060\uff55" +
    "\062\uff55\001\002\000\010\003\uff9b\023\uff9b\060\uff9b\001" +
    "\002\000\042\027\267\030\272\034\uff53\035\uff53\036\uff53" +
    "\037\uff53\040\uff53\041\uff53\042\uff53\043\uff53\045\270\046" +
    "\266\054\uff53\055\uff53\060\uff53\062\uff53\001\002\000\006" +
    "\043\264\054\uff61\001\002\000\012\042\uff5a\043\uff5a\054" +
    "\uff5a\060\uff5a\001\002\000\026\034\260\035\255\036\257" +
    "\037\256\040\262\041\253\042\uff57\043\uff57\054\uff57\060" +
    "\uff57\001\002\000\020\013\222\023\146\024\035\025\037" +
    "\026\036\030\214\057\210\001\002\000\042\027\uff50\030" +
    "\uff50\034\uff50\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50" +
    "\042\uff50\043\uff50\045\uff50\046\uff50\054\uff50\055\uff50\060" +
    "\uff50\062\uff50\001\002\000\010\003\uff84\023\uff84\060\uff84" +
    "\001\002\000\004\054\250\001\002\000\016\013\222\023" +
    "\146\024\035\025\037\026\036\057\210\001\002\000\056" +
    "\027\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035" +
    "\uff49\036\uff49\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49" +
    "\045\uff49\046\uff49\047\uff49\050\uff49\051\uff49\054\uff49\055" +
    "\uff49\060\uff49\062\uff49\001\002\000\012\042\245\043\uff5c" +
    "\054\uff5c\060\uff5c\001\002\000\056\027\uff4e\030\uff4e\031" +
    "\234\032\236\033\242\034\uff4e\035\uff4e\036\uff4e\037\uff4e" +
    "\040\uff4e\041\uff4e\042\uff4e\043\uff4e\045\uff4e\046\uff4e\047" +
    "\237\050\240\051\233\054\uff4e\055\uff4e\060\uff4e\062\uff4e" +
    "\001\002\000\004\054\232\001\002\000\056\027\uff4b\030" +
    "\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b" +
    "\037\uff4b\040\uff4b\041\uff4b\042\uff4b\043\uff4b\045\uff4b\046" +
    "\uff4b\047\uff4b\050\uff4b\051\uff4b\054\uff4b\055\uff4b\060\uff4b" +
    "\062\uff4b\001\002\000\004\023\013\001\002\000\010\043" +
    "\uff5d\054\uff5d\060\uff5d\001\002\000\042\027\uff51\030\uff51" +
    "\034\uff51\035\uff51\036\uff51\037\uff51\040\uff51\041\uff51\042" +
    "\uff51\043\uff51\045\uff51\046\uff51\054\uff51\055\uff51\060\uff51" +
    "\062\uff51\001\002\000\060\027\uff45\030\uff45\031\uff45\032" +
    "\uff45\033\uff45\034\uff45\035\uff45\036\uff45\037\uff45\040\uff45" +
    "\041\uff45\042\uff45\043\uff45\045\uff45\046\uff45\047\uff45\050" +
    "\uff45\051\uff45\054\uff45\055\uff45\060\uff45\061\227\062\uff45" +
    "\001\002\000\056\027\uff48\030\uff48\031\uff48\032\uff48\033" +
    "\uff48\034\uff48\035\uff48\036\uff48\037\uff48\040\uff48\041\uff48" +
    "\042\uff48\043\uff48\045\uff48\046\uff48\047\uff48\050\uff48\051" +
    "\uff48\054\uff48\055\uff48\060\uff48\062\uff48\001\002\000\020" +
    "\013\222\023\146\024\035\025\037\026\036\030\214\057" +
    "\210\001\002\000\004\062\231\001\002\000\056\027\uff46" +
    "\030\uff46\031\uff46\032\uff46\033\uff46\034\uff46\035\uff46\036" +
    "\uff46\037\uff46\040\uff46\041\uff46\042\uff46\043\uff46\045\uff46" +
    "\046\uff46\047\uff46\050\uff46\051\uff46\054\uff46\055\uff46\060" +
    "\uff46\062\uff46\001\002\000\010\003\uff83\023\uff83\060\uff83" +
    "\001\002\000\022\003\uff28\013\uff28\023\uff28\024\uff28\025" +
    "\uff28\026\uff28\030\uff28\057\uff28\001\002\000\016\013\uff2d" +
    "\023\uff2d\024\uff2d\025\uff2d\026\uff2d\057\uff2d\001\002\000" +
    "\016\013\222\023\146\024\035\025\037\026\036\057\210" +
    "\001\002\000\016\013\uff2c\023\uff2c\024\uff2c\025\uff2c\026" +
    "\uff2c\057\uff2c\001\002\000\022\003\uff2a\013\uff2a\023\uff2a" +
    "\024\uff2a\025\uff2a\026\uff2a\030\uff2a\057\uff2a\001\002\000" +
    "\022\003\uff29\013\uff29\023\uff29\024\uff29\025\uff29\026\uff29" +
    "\030\uff29\057\uff29\001\002\000\016\013\222\023\146\024" +
    "\035\025\037\026\036\057\210\001\002\000\016\013\uff2b" +
    "\023\uff2b\024\uff2b\025\uff2b\026\uff2b\057\uff2b\001\002\000" +
    "\056\027\uff4d\030\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d" +
    "\035\uff4d\036\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043" +
    "\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d\054\uff4d" +
    "\055\uff4d\060\uff4d\062\uff4d\001\002\000\042\027\uff4f\030" +
    "\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f" +
    "\042\uff4f\043\uff4f\045\uff4f\046\uff4f\054\uff4f\055\uff4f\060" +
    "\uff4f\062\uff4f\001\002\000\020\013\222\023\146\024\035" +
    "\025\037\026\036\030\214\057\210\001\002\000\012\042" +
    "\uff5b\043\uff5b\054\uff5b\060\uff5b\001\002\000\032\034\uff56" +
    "\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043" +
    "\uff56\054\uff56\055\uff56\060\uff56\062\uff56\001\002\000\010" +
    "\003\uff85\023\uff85\060\uff85\001\002\000\004\060\252\001" +
    "\002\000\056\027\uff47\030\uff47\031\uff47\032\uff47\033\uff47" +
    "\034\uff47\035\uff47\036\uff47\037\uff47\040\uff47\041\uff47\042" +
    "\uff47\043\uff47\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47" +
    "\054\uff47\055\uff47\060\uff47\062\uff47\001\002\000\020\013" +
    "\uff32\023\uff32\024\uff32\025\uff32\026\uff32\030\uff32\057\uff32" +
    "\001\002\000\012\042\uff59\043\uff59\054\uff59\060\uff59\001" +
    "\002\000\020\013\uff36\023\uff36\024\uff36\025\uff36\026\uff36" +
    "\030\uff36\057\uff36\001\002\000\020\013\uff33\023\uff33\024" +
    "\uff33\025\uff33\026\uff33\030\uff33\057\uff33\001\002\000\020" +
    "\013\uff34\023\uff34\024\uff34\025\uff34\026\uff34\030\uff34\057" +
    "\uff34\001\002\000\020\013\uff37\023\uff37\024\uff37\025\uff37" +
    "\026\uff37\030\uff37\057\uff37\001\002\000\020\013\222\023" +
    "\146\024\035\025\037\026\036\030\214\057\210\001\002" +
    "\000\020\013\uff35\023\uff35\024\uff35\025\uff35\026\uff35\030" +
    "\uff35\057\uff35\001\002\000\012\042\uff58\043\uff58\054\uff58" +
    "\060\uff58\001\002\000\020\013\222\023\146\024\035\025" +
    "\037\026\036\030\214\057\210\001\002\000\010\043\uff5e" +
    "\054\uff5e\060\uff5e\001\002\000\022\003\uff2e\013\uff2e\023" +
    "\uff2e\024\uff2e\025\uff2e\026\uff2e\030\uff2e\057\uff2e\001\002" +
    "\000\016\013\uff31\023\uff31\024\uff31\025\uff31\026\uff31\057" +
    "\uff31\001\002\000\022\003\uff2f\013\uff2f\023\uff2f\024\uff2f" +
    "\025\uff2f\026\uff2f\030\uff2f\057\uff2f\001\002\000\016\013" +
    "\222\023\146\024\035\025\037\026\036\057\210\001\002" +
    "\000\016\013\uff30\023\uff30\024\uff30\025\uff30\026\uff30\057" +
    "\uff30\001\002\000\016\013\222\023\146\024\035\025\037" +
    "\026\036\057\210\001\002\000\042\027\uff52\030\uff52\034" +
    "\uff52\035\uff52\036\uff52\037\uff52\040\uff52\041\uff52\042\uff52" +
    "\043\uff52\045\uff52\046\uff52\054\uff52\055\uff52\060\uff52\062" +
    "\uff52\001\002\000\032\034\uff54\035\uff54\036\uff54\037\uff54" +
    "\040\uff54\041\uff54\042\uff54\043\uff54\054\uff54\055\uff54\060" +
    "\uff54\062\uff54\001\002\000\010\003\302\023\146\060\277" +
    "\001\002\000\024\006\uff7b\012\uff7b\014\uff7b\015\uff7b\016" +
    "\uff7b\020\uff7b\022\uff7b\023\uff7b\063\uff7b\001\002\000\004" +
    "\060\310\001\002\000\004\060\307\001\002\000\004\060" +
    "\306\001\002\000\024\006\uff9a\012\uff9a\014\uff9a\015\uff9a" +
    "\016\uff9a\020\uff9a\022\uff9a\023\uff9a\063\uff9a\001\002\000" +
    "\024\006\152\012\151\014\154\015\144\016\150\020\160" +
    "\022\145\023\146\063\163\001\002\000\030\006\uff99\010" +
    "\uff99\012\uff99\014\uff99\015\uff99\016\uff99\020\uff99\022\uff99" +
    "\023\uff99\063\uff99\064\uff99\001\002\000\024\006\uff7a\012" +
    "\uff7a\014\uff7a\015\uff7a\016\uff7a\020\uff7a\022\uff7a\023\uff7a" +
    "\063\uff7a\001\002\000\024\006\uff7d\012\uff7d\014\uff7d\015" +
    "\uff7d\016\uff7d\020\uff7d\022\uff7d\023\uff7d\063\uff7d\001\002" +
    "\000\024\006\uff7c\012\uff7c\014\uff7c\015\uff7c\016\uff7c\020" +
    "\uff7c\022\uff7c\023\uff7c\063\uff7c\001\002\000\022\013\uff72" +
    "\023\uff72\024\uff72\025\uff72\026\uff72\030\uff72\057\uff72\060" +
    "\uff72\001\002\000\022\013\222\023\146\024\035\025\037" +
    "\026\036\030\214\057\210\060\uff6f\001\002\000\006\055" +
    "\uff68\060\uff68\001\002\000\004\060\316\001\002\000\004" +
    "\060\uff70\001\002\000\056\027\uff71\030\uff71\031\uff71\032" +
    "\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71" +
    "\041\uff71\042\uff71\043\uff71\045\uff71\046\uff71\047\uff71\050" +
    "\uff71\051\uff71\054\uff71\055\uff71\060\uff71\062\uff71\001\002" +
    "\000\006\055\320\060\uff65\001\002\000\020\013\222\023" +
    "\146\024\035\025\037\026\036\030\214\057\210\001\002" +
    "\000\006\055\320\060\uff66\001\002\000\004\060\uff67\001" +
    "\002\000\006\055\uff63\060\uff63\001\002\000\006\055\uff64" +
    "\060\uff64\001\002\000\006\055\uff62\060\uff62\001\002\000" +
    "\022\003\330\013\222\023\146\024\035\025\037\026\036" +
    "\030\214\057\210\001\002\000\004\054\336\001\002\000" +
    "\004\054\331\001\002\000\010\003\333\023\146\060\uff7e" +
    "\001\002\000\004\060\335\001\002\000\004\060\334\001" +
    "\002\000\030\006\uff93\010\uff93\012\uff93\014\uff93\015\uff93" +
    "\016\uff93\020\uff93\022\uff93\023\uff93\063\uff93\064\uff93\001" +
    "\002\000\030\006\uff97\010\uff97\012\uff97\014\uff97\015\uff97" +
    "\016\uff97\020\uff97\022\uff97\023\uff97\063\uff97\064\uff97\001" +
    "\002\000\004\003\337\001\002\000\004\060\340\001\002" +
    "\000\030\006\uff96\010\uff96\012\uff96\014\uff96\015\uff96\016" +
    "\uff96\020\uff96\022\uff96\023\uff96\063\uff96\064\uff96\001\002" +
    "\000\022\003\344\013\222\023\146\024\035\025\037\026" +
    "\036\030\214\057\210\001\002\000\030\006\uff90\010\uff90" +
    "\012\uff90\014\uff90\015\uff90\016\uff90\020\uff90\022\uff90\023" +
    "\uff90\063\uff90\064\uff90\001\002\000\004\054\353\001\002" +
    "\000\006\054\345\060\346\001\002\000\010\003\350\023" +
    "\146\060\uff7e\001\002\000\030\006\uff91\010\uff91\012\uff91" +
    "\014\uff91\015\uff91\016\uff91\020\uff91\022\uff91\023\uff91\063" +
    "\uff91\064\uff91\001\002\000\004\060\352\001\002\000\004" +
    "\060\351\001\002\000\030\006\uff92\010\uff92\012\uff92\014" +
    "\uff92\015\uff92\016\uff92\020\uff92\022\uff92\023\uff92\063\uff92" +
    "\064\uff92\001\002\000\030\006\uff95\010\uff95\012\uff95\014" +
    "\uff95\015\uff95\016\uff95\020\uff95\022\uff95\023\uff95\063\uff95" +
    "\064\uff95\001\002\000\010\003\355\023\146\060\uff7e\001" +
    "\002\000\004\060\357\001\002\000\004\060\356\001\002" +
    "\000\030\006\uff94\010\uff94\012\uff94\014\uff94\015\uff94\016" +
    "\uff94\020\uff94\022\uff94\023\uff94\063\uff94\064\uff94\001\002" +
    "\000\030\006\uff98\010\uff98\012\uff98\014\uff98\015\uff98\016" +
    "\uff98\020\uff98\022\uff98\023\uff98\063\uff98\064\uff98\001\002" +
    "\000\022\003\uff38\013\uff38\023\uff38\024\uff38\025\uff38\026" +
    "\uff38\030\uff38\057\uff38\001\002\000\022\003\uff3a\013\uff3a" +
    "\023\uff3a\024\uff3a\025\uff3a\026\uff3a\030\uff3a\057\uff3a\001" +
    "\002\000\022\003\uff39\013\uff39\023\uff39\024\uff39\025\uff39" +
    "\026\uff39\030\uff39\057\uff39\001\002\000\020\013\uff6e\023" +
    "\uff6e\024\uff6e\025\uff6e\026\uff6e\030\uff6e\057\uff6e\001\002" +
    "\000\006\054\uff74\060\uff74\001\002\000\006\054\uff73\060" +
    "\uff73\001\002\000\006\054\uff75\060\uff75\001\002\000\020" +
    "\013\222\023\146\024\035\025\037\026\036\030\214\057" +
    "\210\001\002\000\006\054\uff6d\060\uff6d\001\002\000\020" +
    "\013\222\023\146\024\035\025\037\026\036\030\214\057" +
    "\210\001\002\000\006\055\373\060\uff81\001\002\000\004" +
    "\024\377\001\002\000\004\060\375\001\002\000\004\054" +
    "\376\001\002\000\030\006\uff8b\010\uff8b\012\uff8b\014\uff8b" +
    "\015\uff8b\016\uff8b\020\uff8b\022\uff8b\023\uff8b\063\uff8b\064" +
    "\uff8b\001\002\000\004\060\uff82\001\002\000\030\006\uff8f" +
    "\010\uff8f\012\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f\022" +
    "\uff8f\023\uff8f\063\uff8f\064\uff8f\001\002\000\022\003\u0104" +
    "\013\222\023\146\024\035\025\037\026\036\030\214\057" +
    "\210\001\002\000\006\043\264\060\u010c\001\002\000\024" +
    "\006\uff9f\012\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\022" +
    "\uff9f\023\uff9f\063\uff9f\001\002\000\004\060\u0105\001\002" +
    "\000\024\006\uff5f\012\uff5f\014\uff5f\015\uff5f\016\uff5f\020" +
    "\uff5f\022\uff5f\023\uff5f\063\uff5f\001\002\000\024\006\152" +
    "\012\151\014\154\015\144\016\150\020\160\022\145\023" +
    "\146\063\163\001\002\000\030\006\uff9e\010\uff9e\012\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\020\uff9e\022\uff9e\023\uff9e\063" +
    "\uff9e\064\uff9e\001\002\000\030\006\uff88\010\u0109\012\uff88" +
    "\014\uff88\015\uff88\016\uff88\020\uff88\022\uff88\023\uff88\063" +
    "\uff88\064\uff88\001\002\000\024\006\152\012\151\014\154" +
    "\015\144\016\150\020\160\022\145\023\146\063\163\001" +
    "\002\000\030\006\uff9d\010\uff9d\012\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\020\uff9d\022\uff9d\023\uff9d\063\uff9d\064\uff9d\001" +
    "\002\000\030\006\uff89\010\uff89\012\uff89\014\uff89\015\uff89" +
    "\016\uff89\020\uff89\022\uff89\023\uff89\063\uff89\064\uff89\001" +
    "\002\000\024\006\uff60\012\uff60\014\uff60\015\uff60\016\uff60" +
    "\020\uff60\022\uff60\023\uff60\063\uff60\001\002\000\004\054" +
    "\u010f\001\002\000\004\054\uff87\001\002\000\030\006\uff8d" +
    "\010\uff8d\012\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\022" +
    "\uff8d\023\uff8d\063\uff8d\064\uff8d\001\002\000\030\006\uff79" +
    "\010\uff79\012\uff79\014\uff79\015\uff79\016\uff79\020\uff79\022" +
    "\uff79\023\uff79\063\uff79\064\uff79\001\002\000\072\027\uff41" +
    "\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035\uff41\036" +
    "\uff41\037\uff41\040\uff41\041\uff41\042\uff41\043\uff41\044\uff41" +
    "\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41\053" +
    "\uff41\054\uff41\055\uff41\056\u0116\057\uff41\060\uff41\061\u0115" +
    "\062\uff41\001\002\000\066\027\uff43\030\uff43\031\uff43\032" +
    "\uff43\033\uff43\034\uff43\035\uff43\036\uff43\037\uff43\040\uff43" +
    "\041\uff43\042\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047" +
    "\uff43\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43\055\uff43" +
    "\057\uff43\060\uff43\062\uff43\001\002\000\072\027\uff42\030" +
    "\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42" +
    "\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044\uff42\045" +
    "\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42" +
    "\054\uff42\055\uff42\056\u0116\057\uff42\060\uff42\061\u0115\062" +
    "\uff42\001\002\000\072\027\uff3f\030\uff3f\031\uff3f\032\uff3f" +
    "\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040\uff3f\041" +
    "\uff3f\042\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\047\uff3f" +
    "\050\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\055\uff3f\056" +
    "\uff3f\057\uff3f\060\uff3f\061\uff3f\062\uff3f\001\002\000\022" +
    "\003\u0118\013\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d\030" +
    "\uff3d\057\uff3d\001\002\000\004\023\u0117\001\002\000\072" +
    "\027\uff3e\030\uff3e\031\uff3e\032\uff3e\033\uff3e\034\uff3e\035" +
    "\uff3e\036\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e" +
    "\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050\uff3e\051\uff3e\052" +
    "\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e\057\uff3e\060\uff3e" +
    "\061\uff3e\062\uff3e\001\002\000\004\062\u011c\001\002\000" +
    "\020\013\222\023\146\024\035\025\037\026\036\030\214" +
    "\057\210\001\002\000\004\062\u011b\001\002\000\072\027" +
    "\uff3c\030\uff3c\031\uff3c\032\uff3c\033\uff3c\034\uff3c\035\uff3c" +
    "\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c\043\uff3c\044" +
    "\uff3c\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051\uff3c\052\uff3c" +
    "\053\uff3c\054\uff3c\055\uff3c\056\uff3c\057\uff3c\060\uff3c\061" +
    "\uff3c\062\uff3c\001\002\000\072\027\uff3b\030\uff3b\031\uff3b" +
    "\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b\040" +
    "\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b\045\uff3b\046\uff3b" +
    "\047\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\055" +
    "\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\062\uff3b\001\002" +
    "\000\072\027\uff40\030\uff40\031\uff40\032\uff40\033\uff40\034" +
    "\uff40\035\uff40\036\uff40\037\uff40\040\uff40\041\uff40\042\uff40" +
    "\043\uff40\044\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051" +
    "\uff40\052\uff40\053\uff40\054\uff40\055\uff40\056\uff40\057\uff40" +
    "\060\uff40\061\uff40\062\uff40\001\002\000\030\006\uff8e\010" +
    "\uff8e\012\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e\022\uff8e" +
    "\023\uff8e\063\uff8e\064\uff8e\001\002\000\004\023\146\001" +
    "\002\000\004\060\u0121\001\002\000\004\054\u0122\001\002" +
    "\000\030\006\uff8c\010\uff8c\012\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\020\uff8c\022\uff8c\023\uff8c\063\uff8c\064\uff8c\001\002" +
    "\000\012\005\uffc3\017\uffc3\023\uffc3\064\uffc3\001\002\000" +
    "\022\003\uff6c\013\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c" +
    "\030\uff6c\057\uff6c\001\002\000\022\003\u0128\013\222\023" +
    "\146\024\035\025\037\026\036\030\214\057\210\001\002" +
    "\000\030\006\uff6b\010\uff6b\012\uff6b\014\uff6b\015\uff6b\016" +
    "\uff6b\020\uff6b\022\uff6b\023\uff6b\063\uff6b\064\uff6b\001\002" +
    "\000\004\054\u012a\001\002\000\004\054\u0129\001\002\000" +
    "\030\006\uff69\010\uff69\012\uff69\014\uff69\015\uff69\016\uff69" +
    "\020\uff69\022\uff69\023\uff69\063\uff69\064\uff69\001\002\000" +
    "\030\006\uff6a\010\uff6a\012\uff6a\014\uff6a\015\uff6a\016\uff6a" +
    "\020\uff6a\022\uff6a\023\uff6a\063\uff6a\064\uff6a\001\002\000" +
    "\010\003\uffb4\023\uffb4\063\uffb4\001\002\000\026\006\uffb1" +
    "\012\uffb1\014\uffb1\015\uffb1\016\uffb1\020\uffb1\022\uffb1\023" +
    "\uffb1\063\uffb1\064\uffb1\001\002\000\026\006\uffba\012\uffba" +
    "\014\uffba\015\uffba\016\uffba\020\uffba\022\uffba\023\uffba\063" +
    "\uffba\064\uffba\001\002\000\010\003\uffb8\023\uffb8\063\u012f" +
    "\001\002\000\026\006\uffb0\012\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\020\uffb0\022\uffb0\023\uffb0\063\uffb0\064\uffb0\001\002" +
    "\000\004\023\062\001\002\000\006\054\uffb2\055\uffb2\001" +
    "\002\000\006\054\u0134\055\u0133\001\002\000\004\023\062" +
    "\001\002\000\010\003\uffb5\023\uffb5\063\uffb5\001\002\000" +
    "\006\054\uffb3\055\uffb3\001\002\000\006\003\uffa7\023\uffa7" +
    "\001\002\000\010\003\uffa5\023\uffa5\063\uffa5\001\002\000" +
    "\004\023\062\001\002\000\006\055\uffa2\060\uffa2\001\002" +
    "\000\012\005\uffea\017\uffea\023\uffea\064\uffea\001\002\000" +
    "\004\064\uffca\001\002\000\004\063\uffd4\001\002\000\012" +
    "\007\ufffb\011\ufffb\023\ufffb\063\ufffb\001\002\000\012\005" +
    "\077\017\uffc1\023\uffc1\064\uffeb\001\002\000\004\064\u0140" +
    "\001\002\000\004\002\uffff\001\002\000\006\003\u0143\023" +
    "\062\001\002\000\006\054\u014d\055\u014c\001\002\000\006" +
    "\054\u014b\055\u014a\001\002\000\006\003\uffef\023\uffef\001" +
    "\002\000\012\007\ufff5\011\ufff5\023\ufff5\063\ufff5\001\002" +
    "\000\006\003\u0143\023\062\001\002\000\012\007\ufff3\011" +
    "\ufff3\023\ufff3\063\ufff3\001\002\000\006\003\ufff0\023\ufff0" +
    "\001\002\000\012\007\ufff4\011\ufff4\023\ufff4\063\ufff4\001" +
    "\002\000\006\003\uffed\023\uffed\001\002\000\012\007\ufff1" +
    "\011\ufff1\023\ufff1\063\ufff1\001\002\000\006\003\uffee\023" +
    "\uffee\001\002\000\012\007\ufff2\011\ufff2\023\ufff2\063\ufff2" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014c\000\006\002\003\140\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\141\007" +
    "\001\001\000\020\003\011\004\016\005\015\006\013\011" +
    "\017\027\014\056\010\001\001\000\004\142\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\u013c\006\013" +
    "\011\017\027\014\056\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\022\001\001\000\004\143\023" +
    "\001\001\000\006\012\024\013\026\001\001\000\004\144" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\032\015\031\016\030\017\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\145\044\001\001\000\004\026" +
    "\046\001\001\000\004\056\u013b\001\001\000\004\146\047" +
    "\001\001\000\002\001\001\000\012\030\051\031\053\032" +
    "\054\056\052\001\001\000\004\147\070\001\001\000\004" +
    "\151\056\001\001\000\006\032\055\056\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\057\033\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\072\001\001\000\012\007\075" +
    "\010\077\035\100\036\101\001\001\000\004\150\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\u0139\036\101\001\001\000" +
    "\002\001\001\000\006\037\104\056\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\152\105\001\001\000" +
    "\002\001\001\000\004\153\107\001\001\000\002\001\001" +
    "\000\004\154\111\001\001\000\020\050\122\051\115\052" +
    "\116\053\117\054\121\055\114\056\112\001\001\000\004" +
    "\160\u0137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\155\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\051\115\053" +
    "\123\055\124\056\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\040" +
    "\137\041\133\042\131\043\135\045\134\056\130\001\001" +
    "\000\004\157\u012f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\u012d" +
    "\045\u012c\056\130\001\001\000\002\001\001\000\004\156" +
    "\140\001\001\000\024\046\142\047\161\057\156\064\146" +
    "\072\152\100\160\101\154\102\155\126\141\001\001\000" +
    "\012\103\365\132\u0123\135\361\137\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\172" +
    "\u0110\001\001\000\002\001\001\000\036\014\032\015\031" +
    "\016\030\017\214\061\u010c\102\220\114\u010d\116\201\117" +
    "\203\120\223\121\210\122\216\123\200\126\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\064\170\076\166\077\172\101\154\102" +
    "\155\126\167\001\001\000\002\001\001\000\020\057\165" +
    "\064\146\072\152\100\160\101\154\102\155\126\141\001" +
    "\001\000\024\046\163\047\161\057\156\064\146\072\152" +
    "\100\160\101\154\102\155\126\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\103\365\132\362\135\361\137\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\064\170\076\166\077\174\101\154\102\155\126\167\001" +
    "\001\000\002\001\001\000\004\163\176\001\001\000\050" +
    "\014\032\015\031\016\030\017\214\074\202\102\220\106" +
    "\212\107\204\110\222\111\215\112\205\114\206\116\201" +
    "\117\203\120\223\121\210\122\216\123\200\126\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\164\275\001\001\000\006\134\272\135\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\113\253" +
    "\133\260\001\001\000\034\014\032\015\031\016\030\017" +
    "\214\102\220\114\250\116\201\117\203\120\223\121\210" +
    "\122\216\123\200\126\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\014\032\015\031" +
    "\016\030\017\214\102\220\116\246\117\203\120\223\121" +
    "\210\122\216\123\200\126\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\136\240\137\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\125\225\001" +
    "\001\000\002\001\001\000\034\014\032\015\031\016\030" +
    "\017\214\102\220\114\227\116\201\117\203\120\223\121" +
    "\210\122\216\123\200\126\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\032\015\031\016\030\017\214" +
    "\102\220\121\243\122\216\123\200\126\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\032\015\031\016\030\017\214\102\220\123\242\126" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\014\032\015\031\016\030\017\214\102" +
    "\220\112\245\114\206\116\201\117\203\120\223\121\210" +
    "\122\216\123\200\126\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\014\032\015\031\016\030\017\214\102\220\114" +
    "\262\116\201\117\203\120\223\121\210\122\216\123\200" +
    "\126\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\014\032\015\031\016\030\017\214\102\220\110\264" +
    "\111\215\112\205\114\206\116\201\117\203\120\223\121" +
    "\210\122\216\123\200\126\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\014\032\015\031\016\030\017\214\102\220\116\274" +
    "\117\203\120\223\121\210\122\216\123\200\126\177\001" +
    "\001\000\002\001\001\000\026\014\032\015\031\016\030" +
    "\017\214\102\220\120\273\121\210\122\216\123\200\126" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\064\300\075\302\076\277\101\154\102\155\126\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\165\303\001\001\000\020\057" +
    "\304\064\146\072\152\100\160\101\154\102\155\126\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\166\311\001\001\000\040" +
    "\014\032\015\031\016\030\017\214\065\313\066\314\102" +
    "\220\114\312\116\201\117\203\120\223\121\210\122\216" +
    "\123\200\126\177\001\001\000\004\171\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\067\321\070\320\071\322\001\001\000\034\014\032\015" +
    "\031\016\030\017\214\102\220\114\324\116\201\117\203" +
    "\120\223\121\210\122\216\123\200\126\177\001\001\000" +
    "\004\071\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\014\032\015" +
    "\031\016\030\017\214\102\220\106\326\107\204\110\222" +
    "\111\215\112\205\114\206\116\201\117\203\120\223\121" +
    "\210\122\216\123\200\126\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\064\170\076\166\077\331\101" +
    "\154\102\155\126\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\014\032" +
    "\015\031\016\030\017\214\102\220\106\342\107\204\110" +
    "\222\111\215\112\205\114\206\116\201\117\203\120\223" +
    "\121\210\122\216\123\200\126\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\064\170" +
    "\076\166\077\346\101\154\102\155\126\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\064\170\076\166\077" +
    "\353\101\154\102\155\126\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\167\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\014\032\015\031\016\030\017\214" +
    "\102\220\114\367\116\201\117\203\120\223\121\210\122" +
    "\216\123\200\126\177\001\001\000\002\001\001\000\034" +
    "\014\032\015\031\016\030\017\214\102\220\114\371\116" +
    "\201\117\203\120\223\121\210\122\216\123\200\126\177" +
    "\001\001\000\004\063\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\014\032\015\031\016" +
    "\030\017\214\062\u0102\102\220\107\u0101\110\222\111\215" +
    "\112\205\114\206\116\201\117\203\120\223\121\210\122" +
    "\216\123\200\126\177\001\001\000\002\001\001\000\004" +
    "\161\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\057\u0106\064\146\072\152\100\160\101\154\102\155" +
    "\126\141\001\001\000\004\162\u0107\001\001\000\004\060" +
    "\u0109\001\001\000\020\057\u010a\064\146\072\152\100\160" +
    "\101\154\102\155\126\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\127" +
    "\u0111\130\u0112\131\u0113\001\001\000\002\001\001\000\004" +
    "\131\u011c\001\001\000\002\001\001\000\004\173\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\014\032\015\031\016\030\017\214\102\220\114" +
    "\u0119\116\201\117\203\120\223\121\210\122\216\123\200" +
    "\126\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\126\u011f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\170\u0124\001\001" +
    "\000\036\014\032\015\031\016\030\017\214\102\220\104" +
    "\u0125\114\u0126\116\201\117\203\120\223\121\210\122\216" +
    "\123\200\126\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\u0130\044\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\u013e\010\077\035" +
    "\100\036\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\u0141\021\u0144\022\u0145\023\u0146\024\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\u0141\023\u0148\024\u0147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    Tab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null)
        log.debug(s.toString() + " " + s.value.toString());
    return s;

    }



    public static class DumpUpgradeSymbolTableVisitor extends SymbolTableVisitor
    {
        protected StringBuilder output = new StringBuilder();
        protected final String indent = "   ";
        protected StringBuilder currentIndent = new StringBuilder();

        protected void nextIndentationLevel() {
            currentIndent.append(indent);
        }

        protected void previousIndentationLevel() {
            if (currentIndent.length() > 0)
                currentIndent.setLength(currentIndent.length()-indent.length());
        }


        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitObjNode(symboltable.Obj)
         */
        @Override
        public void visitObjNode(Obj objToVisit) {
            //output.append("[");
            switch (objToVisit.getKind()) {
            case Obj.Con:  output.append("Con "); break;
            case Obj.Var:  output.append("Var "); break;
            case Obj.Type: output.append("Type "); break;
            case Obj.Meth: output.append("Meth "); break;
            case Obj.Fld:  output.append("Fld "); break;
            case Obj.Prog: output.append("Prog "); break;
            }

            output.append(objToVisit.getName());
            output.append(": ");

            if ( (objToVisit.getKind() == Obj.Meth) && (objToVisit.getType().getKind() == Struct.Class))
            {
                output.append("Class ");
                output.append(objToVisit.getType());
            }
            else
            {
                objToVisit.getType().accept(this);
            }
            output.append(", ");
            output.append("Adr:" + objToVisit.getAdr());
            output.append(", ");
            output.append("Level:" + objToVisit.getLevel() + " ");

            if (objToVisit.getKind() == Obj.Meth)
            {
                if (isMethodStatic(objToVisit))
                {
                    output.append(", static method");
                }
                else
                {
                    output.append(", virtual method");
                }
            }

            if (objToVisit.getKind() == Obj.Prog || objToVisit.getKind() == Obj.Meth) {
                output.append("\n");
                nextIndentationLevel();
            }


            for (Obj o : objToVisit.getLocalSymbols()) {
                output.append(currentIndent.toString());
                if ((objToVisit.getKind() == Obj.Meth) &&(o.getType().getKind() == Struct.Class))
                {
                    output.append("Var ");
                    output.append(o.getName());
                    output.append(": ");
                    output.append("Class ");
                    output.append(o.getType());
                    output.append(", ");
                    output.append("Adr:" + o.getAdr());
                    output.append(", ");
                    output.append("Level:" + o.getLevel() + " ");
                }
                else
                {
                    o.accept(this);
                }
                output.append("\n");
            }

            if (objToVisit.getKind() == Obj.Prog || objToVisit.getKind() == Obj.Meth)
                previousIndentationLevel();

            //output.append("]");

        }

        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitScopeNode(symboltable.Scope)
         */
        @Override
        public void visitScopeNode(Scope scope) {
            for (Obj o : scope.values()) {
                o.accept(this);
                output.append("\n");
            }
        }

        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitStructNode(symboltable.Struct)
         */
        @Override
        public void visitStructNode(Struct structToVisit) {
            switch (structToVisit.getKind()) {
            case Struct.None:
                output.append("notype");
                break;
            case Struct.Int:
                output.append("int");
                break;
            case Struct.Char:
                output.append("char");
                break;
            case Struct.Bool:
                output.append("bool");
                break;
            case Struct.Array:
                output.append("Arr of ");

                switch (structToVisit.getElemType().getKind()) {
                case Struct.None:
                    output.append("notype");
                    break;
                case Struct.Int:
                    output.append("int");
                    break;
                case Struct.Char:
                    output.append("char");
                    break;
                case Struct.Class:
                    output.append("Class");
                    break;
                case Struct.Bool:
                  output.append("bool");
                    break;
                }
                break;
            case Struct.Class:
                output.append("Class [\n");
                nextIndentationLevel();
                for (Obj obj : structToVisit.getMembers()) {
                    output.append(currentIndent.toString());
                    obj.accept(this);
                    if (obj.getKind() == Obj.Fld)
                    {
                        output.append("\n");
                    }
                }
                previousIndentationLevel();
                output.append(currentIndent.toString());
                output.append("]");
                break;
            }

        }

        public String getOutput() {
            StringBuilder tmp = output;
            output = new StringBuilder("");
            return tmp.toString();
        }

    }

    static class TabExt
    {
        static Struct boolType = new Struct(Struct.Bool);
        static SymbolTableVisitor symbolTableVisitor = new DumpUpgradeSymbolTableVisitor();
        static Obj programObj = null;
        static Obj curMethod = null;
        static Obj curClass = null;
        static boolean doesMainExist = false;
        static int staticDataCnt = 0;
    }

    public static class ObjResultWrapper {
        Obj obj;
        boolean semanticError = false;
        boolean syntaxError = false;
        int relOp;
        boolean isVirtual = false;
        boolean doesOverride = false;

        public ObjResultWrapper() {}

        public ObjResultWrapper(Obj obj)
        {
            this.obj = obj;
        }

        public ObjResultWrapper clone()
        {
            ObjResultWrapper objWrapper = new ObjResultWrapper(obj);
            objWrapper.setSemanticError(semanticError);
            objWrapper.setSyntaxError(syntaxError);
            objWrapper.setRelOp(relOp);
            objWrapper.setVirtual(isVirtual);
            objWrapper.setDoesOverride(doesOverride);
            return objWrapper;
        }

        public void copyTo(ObjResultWrapper copyFrom)
        {
            setSemanticError(copyFrom.semanticError);
            setSyntaxError(copyFrom.syntaxError);
            setRelOp(copyFrom.relOp);
            setVirtual(copyFrom.isVirtual);
            setDoesOverride(copyFrom.doesOverride);
            obj = copyFrom.obj;
        }

        public Obj getObj() {
            return obj;
        }
        public void setObj(Obj obj) {
            this.obj = obj;
        }

        public boolean isSemanticError() {
            return semanticError;
        }

        public boolean isSyntaxError()
        {
            return syntaxError;
        }

        public ObjResultWrapper setSemanticError(boolean semanticError) {
            this.semanticError = semanticError;
            return this;
        }

        public ObjResultWrapper setSyntaxError(boolean syntaxError)
        {
            this.syntaxError = syntaxError;
            return this;
        }

        public void promoteToConst()
        {
            Struct objType = obj.getType();
            obj = new Obj(Obj.Con, "", objType);
        }

        public boolean isError()
        {
            return (syntaxError || semanticError);
        }

        public boolean isVar()
        {
            return (obj.getKind() == Obj.Var) || (obj.getKind() == Obj.Con)
                || (obj.getKind() == Obj.Fld) || (obj.getKind() == Obj.Elem);
        }

        public boolean isLeftValue()
        {
            return (isVar() && (obj.getKind() != obj.Con));
        }

        public boolean  isField()
        {
            return obj.getKind() == Obj.Fld;
        }

        public boolean isClassType()
        {
            return (obj.getKind() == Obj.Type) && (obj.getType().getKind() == Struct.Class);
        }

        public boolean isArrayElement()
        {
            return obj.getKind() == Obj.Elem;
        }

        public boolean isArray()
        {
            return (obj.getType().getKind() == Struct.Array)
                    && isLeftValue();
        }

        public boolean isClass()
        {
            return isLeftValue() && (obj.getType().getKind() == Struct.Class);
        }


        public boolean hasAdditionalParsOnStack()
        {
            return isArrayElement() || isField();
        }

        public boolean loadable()
        {
            int kind = obj.getKind();
            return isVar();
        }

        public void generateRightValue()
        {
            generateRightValue(true);
        }

        public void generateRightValue(boolean shouldPromote)
        {
            if (isArrayElement())
            {
                // a i a[i]
                Code.put(Code.dup_x2);
                // a[i] a i a[i]
                Code.put(Code.pop);
                // a[i] a i
                Code.put(Code.pop);
                // a[i] a
                Code.put(Code.pop);
                // a[i]

            }
            else if (isField())
            {
                // x x.i
                Code.put(Code.dup_x1);
                // x.i x x.i
                Code.put(Code.pop);
                // x.i x
                Code.put(Code.pop);
                // x.i
            }
            if (shouldPromote)
            {
                promoteToConst();
            }
        }

        public boolean isVirtual()
        {
            return isVirtual;
        }

        public void setVirtual(boolean isVirtual)
        {
            this.isVirtual = isVirtual;
        }

        public void setRelOp(int relOp)
        {
            this.relOp = relOp;
        }

        public int getRelOp()
        {
            return relOp;
        }

        public boolean doesOverride()
        {
            return doesOverride;
        }

        public void setDoesOverride(boolean doesOverride)
        {
            this.doesOverride = doesOverride;
        }

        ObjResultWrapper propagateError(ObjResultWrapper obj)
        {
            if (obj != null)
            {
                semanticError = semanticError || obj.isSemanticError();
                syntaxError = syntaxError || obj.isSyntaxError();
            }
            return this;
        }
    }


    // U slucaju greske.
    //
     @Override
    protected int error_sync_size() {
        // TODO Auto-generated method stubTab
        return 1;
    }

    static class ParserCnt {
        // NIVO A
        static int globalVarDefCnt = 0;
        static int localVarDefMainCnt = 0;
        static int globalConstDefCnt = 0;
        static int globalArrayDeclCnt = 0;

        // NIVO B
        static int globalAndStaticMethodCnt = 0;
        //static int l

        static boolean inVarDeclGlobalScope = false;
        static boolean inMethodDeclGlobalScope = false;
        static boolean inMethodEntryGlobalScope = false;
    }

    boolean errorDetected = false;
    boolean syntaxError = false;
    boolean semanticError = false;
    String fileName = "test/generator/program.obj";


    public void setFileName(String fileName){
        this.fileName = fileName;
    }

    Logger log = Logger.getLogger(getClass());

    // MJParser greska.
    //
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    // Overrideovana MJParser funkcija.
    //
    public void syntax_error(Symbol cur_token) {
        syntaxError = true;
        report_error("\nSintaksna greska", cur_token);
    }

    public void semantic_error(String msg, Symbol sym)
    {
        semanticError = true;
        report_error("\nSemnaticka greska : " + msg, sym);
    }

    public void semantic_error(String msg)
    {
        semantic_error(msg, null);
    }

    public void semantic_error(String msg, int line)
    {
        semantic_error(msg + "Linija:" + line + ".");
    }

    // Overrideovana MJParser funkcija.
    //
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    // Sa vezbi funkcija.
    //
    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
        {
            Symbol symbol = (Symbol)info;
            msg.append(symbol.toString()).append (" na liniji ").append(symbol.left);
        }
        log.info(msg.toString());
    }

    public boolean typesEqual(Struct type1, Struct type2)
    {
        // This is the same as check with name, because all types are on first level.
        //
        if (type1 == type2)
        {
            return true;
        }

        if ((type1.getKind() == Struct.Array)
            && (type2.getKind() == Struct.Array)
            && typesEqual(type1.getElemType(), type2.getElemType()))
            {
                return true;
            }
        return false;
    }

    public boolean typesCompatibile(Struct type1, Struct type2)
    {
        if (typesEqual(type1, type2)
        || (type1.isRefType() && (type2 == Tab.nullType) )
        || (type2.isRefType() && (type1 == Tab.nullType)) )
        {
            return true;
        }
        return false;
    }

    public Struct getParentClass(Struct childClass)
    {
        return childClass.getElemType();
    }

    boolean isDerivedClass(Struct childClass, Struct parentClass)
    {
        Struct curClass = null;
        while ( (curClass = getParentClass(childClass)) != null)
        {
            if (typesEqual(curClass, parentClass))
            {
                return true;
            }
            childClass = curClass;
        }
        return false;
    }

    public boolean typesAssignable(Struct dest, Struct expr)
    {
        if (typesEqual(dest, expr)
            || (dest.isRefType() && expr == Tab.nullType)
            || isDerivedClass(expr, dest))
            {
                return true;
            }
        return false;
    }

    boolean find_double_and_report_search(String name, int line, String additionalMessage)
    {
        Scope currentScope = Tab.currentScope;

        Obj objDoubleDef = currentScope.findSymbol(name);
        // Nadjen je duplikat u okruzujucem opsegu.
        //
        if (objDoubleDef != null)
        {
            additionalMessage += " simbol " + name +  " vec postoji.";
            semantic_error(additionalMessage, line);
            return true;
        }
        else
        {
            return false;
        }
    }

    ObjResultWrapper find_virtual_method(Struct childClass, String methodName,
    boolean isStatic)
    {
        Struct parentClass = getParentClass(childClass);
        Obj methodObj  = childClass.getMembersTable().searchKey(methodName);
        if (methodObj == null)
        {
            return null;
        }

        Obj parentMethodObj = parentClass.getMembersTable().searchKey(methodName);
        if (parentMethodObj == null)
        {
            // Double definition of method.
            //
            return (new ObjResultWrapper()).setSemanticError(true);
        }

        if (parentMethodObj.getKind() != Obj.Meth)
        {
            // Double
            return (new ObjResultWrapper()).setSemanticError(true);
        }

        return new ObjResultWrapper(methodObj);
    }



    boolean check_type_and_report(Obj obj, Struct type, int line, String additionalMessage)
    {
        if (additionalMessage == null)
        {
            additionalMessage = "";
        }
        if (!typesEqual(obj.getType(), type)) {
            semantic_error(additionalMessage + ". Tipovi nisu isti. ", line);
            return false;
        }
        return true;
    }

    boolean check_type_and_report(Obj obj, LinkedList<Struct> listType, int line, String additionalMessage)
    {
        if (additionalMessage == "")
        {
            additionalMessage = "";
        }

        boolean found = false;

        for (Struct type : listType)
        {
            if (typesEqual(obj.getType(), type))
            {
                found = true;
                break;
            }
        }

        if (!found)
        {
            semantic_error(additionalMessage + "." + obj.getName() + " ne slaze se ni sa jednim od tipova.", line);
            return false;
        }
        return true;
    }

    boolean check_obj_kind_and_report(Obj obj, int kind, int line, String additionalMessage)
    {
        if (additionalMessage == null)
        {
            additionalMessage = "";
        }

        if (obj.getKind() != kind){
            semantic_error(additionalMessage + ". Nije odgovarajuce vrste.", line);
            return false;
        }
        return true;
    }

    ObjResultWrapper find_for_use_and_report(String name, int line, String additionalMessage)
    {
        ObjResultWrapper result = null;
        Obj obj = Tab.find(name);
        result = new ObjResultWrapper(obj);
        if (obj == Tab.noObj)
        {
            semantic_error(additionalMessage + " Nije definisan u okruzujucem opsegu.", line);
            result.setSemanticError(true);
        }
        else
        {
            // TODO : info za koriscenje objekta
        }

        return result;
    }




    void pushOnCodeStack(LinkedList<LinkedList<Byte>> codeStack, int beginAddress)
    {
        // Oprezno, mozda je jos neophodno azurirati!!!
        //
        LinkedList<Byte> listOfCode = new LinkedList<Byte>();

        for (int idx = beginAddress; idx < Code.pc; idx ++)
        {
            listOfCode.addLast(Code.buf[idx]);
        }
        codeStack.addLast(listOfCode);
        Code.pc = beginAddress;
    }

    void popFromCodeStack(LinkedList<LinkedList<Byte>> codeStack)
    {
        LinkedList<Byte> listOfCode = codeStack.removeLast();
        for (int idx = 0; idx < listOfCode.size(); idx ++)
        {
            Code.put(listOfCode.get(idx));
        }
    }

    void updateAdresses(LinkedList<LinkedList<Integer>> list)
    {
        LinkedList<Integer> listOfJumpAdresses = list.removeLast();

        for (int idx = 0; idx < listOfJumpAdresses.size(); idx ++)
        {
            Code.fixup(listOfJumpAdresses.get(idx));
        }
    }

    void putIntInStaticData(int val)
    {
        Code.loadConst(val);
        Code.put(Code.putstatic);
        Code.put2(TabExt.staticDataCnt++);
    }

    static boolean isMethodStatic(Obj obj)
    {
        return obj.getFpPos() != 0;
    }

    static void setMethodStatic(Obj obj)
    {
        obj.setFpPos(1);
    }

    static void setParentClass(Obj child, Obj parent)
    {
        child.getType().setElementType(parent.getType());
    }

    void initVirtualFunctionTable(Obj objType, LinkedList<Integer> listVFTAdresses)
    {
        Struct type = objType.getType();
        Collection<Obj> symbols = type.getMembers();
        if (listVFTAdresses.size() > 0)
        {
            Code.fixup(listVFTAdresses.getLast());
        }

        objType.setAdr(TabExt.staticDataCnt);
        for (Obj obj : symbols)
        {
            if ( (obj.getKind() == Obj.Meth) && !isMethodStatic(obj))
            {
                String name = obj.getName();
                for (int idx = 0; idx < name.length(); idx ++)
                {
                    putIntInStaticData((int)name.charAt(idx));
                }
                putIntInStaticData(-1);
                putIntInStaticData(obj.getAdr());
            }
        }
        putIntInStaticData(-2);

        Code.putJump(0);
        listVFTAdresses.addLast(Code.pc - 2);
    }

    public void copyFieldsAndMethodsFromParent(Obj parentClass, Obj childClass)
    {
        Struct parentType = parentClass.getType();
        Struct childType = childClass.getType();
        Collection<Obj> parentMembers = parentType.getMembers();

        for (Obj it : parentMembers)
        {
            if (it.getKind() == Obj.Fld)
            {
                Tab.insert(it.getKind(), it.getName(), it.getType());
            }
            else if ( (it.getKind() == Obj.Meth) && !isMethodStatic(it))
            {
                Obj methObj = Tab.insert(it.getKind(), it.getName(), it.getType());
                methObj.setAdr(it.getAdr());

                Tab.openScope();
                for (Obj itPars : it.getLocalSymbols())
                {
                    if (itPars.getName()    .equals("this"))
                    {
                        Tab.insert(itPars.getKind(), itPars.getName(), childType);
                    }
                    else
                    {
                        Tab.insert(itPars.getKind(), itPars.getName(), itPars.getType());
                    }
                }
                Tab.chainLocalSymbols(methObj);
                Tab.closeScope();
            }
        }

    }

    public void extendFromParentClass(Obj childClass, Obj parentClass)
    {
        setParentClass(childClass, parentClass);
        copyFieldsAndMethodsFromParent(parentClass, childClass);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MJParser$actions {


    final String METHOD_ENTRY_NAME = "main";
    final String VFT_POINTER_NAME = "_vftPointer";
    final int OP_ASSIGN_CODE = 0;
    final int CHAR_SIZE = 1;
    final int INT_SIZE = 4;
    ObjResultWrapper curConstType = null;
    ObjResultWrapper curVarType = null ;
    ObjResultWrapper curLocalType = null;
    ObjResultWrapper curFormType = null;
    ObjResultWrapper curFieldType = null;
    ObjResultWrapper curObjWrappFieldOrElem = null;
    ObjResultWrapper curObjWrapperClass = null;
    ObjResultWrapper curObjWrapperMethod = null;
    LinkedList<ObjResultWrapper> listCurObjWrapperFieldOrElem = new LinkedList<ObjResultWrapper>();
    LinkedList<Integer> listAdrIfConditionTrue = new LinkedList<Integer>();
    LinkedList<Integer> listAdrIfConditionFalse = new LinkedList<Integer>();

    LinkedList<Integer> listAdrForConditionFalse  = new LinkedList<Integer>();
    LinkedList<Integer> listAdrForCondition = new LinkedList<Integer>();
    LinkedList<LinkedList<Byte>> listSavedCode = new LinkedList<LinkedList<Byte>>();
    LinkedList<LinkedList<Integer>> listOfListOfBreaksInFor = new LinkedList<LinkedList<Integer>>();
    LinkedList<LinkedList<Integer>> listOfListOfContinuesInFor = new LinkedList<LinkedList<Integer>>();
    LinkedList<Integer> listVFTAdresses = new LinkedList<Integer>();
    LinkedList<Boolean> listIsVirtualFunction = new LinkedList<Boolean>();
    Integer forLastDesigantorBeginAddress = null;

    boolean globalVar = false;
    boolean localVar = false;
    boolean formVar = false;
    boolean fieldVar = false;
    boolean isInClass = false;
    boolean addThis = false;
    int formParCnt = 0;


  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action_part00000000(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;

        parser.report_info("Krece da prepoznaje globalne deklaracije", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",94, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;


        Tab.insert(Obj.Type, "bool", TabExt.boolType);

        Obj eolObj = Tab.find("eol");
        eolObj.setAdr((int)'\n');

        Obj chrObj = Tab.find("chr");
        chrObj.setAdr(Code.pc);
        Code.put(Code.enter);
        Code.put(1);
        Code.put(1);
        // Read variable from procedure stack and leave it as return value.
        Code.put(Code.load_n);
        Code.put(Code.exit);
        Code.put(Code.return_);

        Obj ordObj = Tab.find("ord");
        ordObj.setAdr(Code.pc);
        Code.put(Code.enter);
        Code.put(1);
        Code.put(1);
        Code.put(Code.load_n);
        Code.put(Code.exit);
        Code.put(Code.return_);

        Obj lenObj = Tab.find("len");
        lenObj.setAdr(Code.pc);
        Code.put(Code.enter);
        Code.put(1);
        Code.put(1);
        Code.put(Code.load_n);
        Code.put(Code.arraylength);
        Code.put(Code.exit);
        Code.put(Code.return_);


        TabExt.programObj = Tab.insert(Obj.Prog, programName, Tab.noType);

        Tab.openScope();
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",95, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= NT$0 PROGRAM IDENT NT$1 GlobalDeclListEpsilon BRACE_LEFT MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		

        // TODO update with virtual table.
        //
        Code.dataSize = TabExt.staticDataCnt;
        Tab.chainLocalSymbols(TabExt.programObj);
        Tab.closeScope();

        if (!TabExt.doesMainExist)
        {
            semantic_error("Ne postoji globalna main funkcija");
        }

        parser.report_info("****************** NIVO A***********************", null);
        parser.report_info("Broj definicija globalnih promenljivih " + ParserCnt.globalVarDefCnt, null);
        parser.report_info("Broj definicija lokalnih promenljivih u main funkciji " + ParserCnt.localVarDefMainCnt, null);
        parser.report_info("Broj definicija globalnih konstanti " + ParserCnt.globalConstDefCnt, null);
        parser.report_info("Broj deklaracija globalnih nizova " + ParserCnt.globalArrayDeclCnt, null);
        parser.report_info("******************* NIVO B**********************", null);
        parser.report_info("Broj definicija globalnih i statickih funkcija unutrasnjih klasa " + ParserCnt.globalAndStaticMethodCnt, null);
        parser.report_info("USPESNO PREPOZNAVANJE", null);
        Tab.dump(TabExt.symbolTableVisitor);

        if (errorDetected)  {
            parser.report_error("Neuspesno parsiranje!!!", null);
        }
        else {
            parser.report_info("Uspesno parsiranje!!!", null);
            File f = new File(fileName);
            if (f.exists())
            {
                f.delete();
            }
            f = new File(fileName);
            Code.write(new FileOutputStream(f));

        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalDeclListEpsilon ::= GlobalDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclListEpsilon",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclListEpsilon",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDeclList ::= GlobalDeclList GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDeclList ::= GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= ClassDecl 
            {
              Object RESULT =null;
		
        parser.log.debug("Prepoznata klasa", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper varType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curVarType = varType;
        globalVar = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",96, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalVarDecl ::= Type NT$2 GlobalVarExprList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper varType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
        globalVar = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobalVarExprList ::= GlobalVarExprCommaList VarExprOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GlobalVarExprList ::= VarExprOrErrorSemi 
            {
              Object RESULT =null;
		int exprOrErrorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprOrErrorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprOrError = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = exprOrError;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarExprOrErrorSemi ::= VarExpr SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper t = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT = (new ObjResultWrapper());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorSemi",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarExprOrErrorSemi ::= error SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT = (new ObjResultWrapper()).setSyntaxError(true);

        parser.report_error("Uspesan oporavak od greske deklaracije globalne promenljive,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorSemi",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarExprCommaList ::= GlobalVarExprCommaList VarExprOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprCommaList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarExprCommaList ::= VarExprOrErrorComma 
            {
              Object RESULT =null;
		int exprOrErrorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprOrErrorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprOrError = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = exprOrError;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprCommaList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarExprOrErrorComma ::= VarExpr COMMA 
            {
              ObjResultWrapper RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper t = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT  = t;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorComma",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarExprOrErrorComma ::= error COMMA 
            {
              ObjResultWrapper RESULT =null;
		
        RESULT = (new ObjResultWrapper()).setSyntaxError(true);
        parser.report_error("Uspesan oporavak od greske prilikom deklaracije globalne promenljiva COMMA je resila stvar", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorComma",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MethodDeclListEpsilon ::= MethodDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListEpsilon",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListEpsilon",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDeclList ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curConstType = type;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",97, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;


    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",98, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ConstDecl ::= CONST Type NT$3 ConstExprList NT$4 SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ConstExprList ::= ConstExprList COMMA ConstExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExprList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ConstExprList ::= ConstExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExprList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ConstExpr ::= IDENT OP_ASSIGN ConstValue 
            {
              Object RESULT =null;
		int nameOfConstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfConstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfConst = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int numObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj numObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // Da li se konstanta slaze po tipu sa deklaracijom.
        //
        if (!curConstType.isSemanticError()
            &&(check_type_and_report(numObj, curConstType.getObj().getType(), numObj.getLevel(), " poredjenje tipova konstanti")))
        {
            // Da nema slucajno duplikata.
            //
            if (!find_double_and_report_search(nameOfConst, nameOfConstleft, "Konstanta"))
            {
                Obj constObj = Tab.insert(Obj.Con, nameOfConst, curConstType.getObj().getType());
                constObj.setAdr(numObj.getAdr());
            }

        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExpr",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConstValue ::= ConstNum 
            {
              Obj RESULT =null;
		int constNumleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constNumright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constNum = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constNum;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ConstValue ::= ConstBool 
            {
              Obj RESULT =null;
		int constBoolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constBoolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constBool = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constBool;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ConstValue ::= ConstChar 
            {
              Obj RESULT =null;
		int constCharleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constCharright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constChar = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constChar;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstNum ::= CONST_NUM 
            {
              Obj RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, number.toString(), Tab.intType, number.intValue(), numberleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstNum",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ConstBool ::= CONST_BOOL 
            {
              Obj RESULT =null;
		int boolStrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolStrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String boolStr = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, "", TabExt.boolType, Boolean.valueOf(boolStr) ? 1 : 0, boolStrleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstBool",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConstChar ::= CONST_CHAR 
            {
              Obj RESULT =null;
		int charStrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int charStrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String charStr = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            char c = charStr.charAt(1);
            RESULT = new Obj(Obj.Con, "", Tab.charType,
            c, charStrleft);

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstChar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarExpr ::= IDENT BracketEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int nameOfVarleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameOfVarright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String nameOfVar = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        {
            Struct typeVar = null;
            String message = "";
            Obj varObj = null;
            int objType = Obj.Var;


            if (globalVar)
            {
                message = "Definicija globalne varijable";
                if (!curVarType.isSemanticError())
                {
                    typeVar = curVarType.getObj().getType();
                }

            }
            else if (localVar)
            {
                message = "Definicija lokalne varijable";
                if (!curLocalType.isSemanticError())
                {
                    typeVar = curLocalType.getObj().getType();
                }
            }
            else if (formVar)
            {
                message = "Definicija formalnog parametra";
                if (!curFormType.isSemanticError())
                {
                    typeVar = curFormType.getObj().getType();
                }
            }
            else if (fieldVar)
            {
                message = "Definicija polja klase";
                if (!curFieldType.isSemanticError())
                {
                    typeVar = curFieldType.getObj().getType();
                    objType = Obj.Fld;
                }
            }

            if (isArray)
            {
                if (typeVar != null)
                {
                    typeVar = new Struct (Struct.Array, typeVar);
                }
            }
            if (!find_double_and_report_search(nameOfVar, nameOfVarleft, message)
                && (typeVar != null) )
            {

                varObj = Tab.insert(objType, nameOfVar, typeVar);
                if (formVar)
                {
                    varObj.setAdr(Tab.currentScope().getnVars() - 1);
                    // TODO : think about formPar
                    //
                }
                else if (globalVar)
                {
                    varObj.setAdr(TabExt.staticDataCnt++);
                }
            }
            else
            {
                RESULT = (new ObjResultWrapper()).setSemanticError(true);
            }
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExpr",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BracketEpsilon ::= BRACKET_LEFT BRACKET_RIGHT 
            {
              Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketEpsilon",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BracketEpsilon ::= 
            {
              Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketEpsilon",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              Object RESULT =null;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        isInClass = true;
        if (find_double_and_report_search(nameOfClass, nameOfClassleft, "Ime je vec deklarisano u okruzujucem opsegu"))
        {
            // TODO : test
            curObjWrapperClass = (new ObjResultWrapper()).setSemanticError(true);
            curObjWrapperClass.setSemanticError(true);
        }
        else
        {
            Obj obj = Tab.insert(Obj.Type, nameOfClass, new Struct(Struct.Class));
            curObjWrapperClass = new ObjResultWrapper(obj);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",99, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int extendsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int extendsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper extendsType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        if (!curObjWrapperClass.isSemanticError())
        {
            if (extendsType == null)
            {
                Tab.openScope();
                Tab.insert(Obj.Fld, VFT_POINTER_NAME, Tab.intType);
            }
            else if (!extendsType.isSemanticError())
            {
                Tab.openScope();
                extendFromParentClass( curObjWrapperClass.getObj(), extendsType.getObj());
            }
            else
            {
                curObjWrapperClass.setSemanticError(true);
            }
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",100, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int extendsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int extendsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper extendsType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

        Tab.chainLocalSymbols(curObjWrapperClass.getObj().getType());
        // TODO : add check of semantic error.
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",101, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int extendsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int extendsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ObjResultWrapper extendsType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

        // TODO : check of semantic error


    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",102, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ClassDecl ::= CLASS IDENT NT$5 ExtendsTypeEpsilon NT$6 BRACE_LEFT FieldDeclListEpsilon NT$7 BraceMethodDeclListEpsilonEpsilon NT$8 BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int extendsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int extendsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		ObjResultWrapper extendsType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		
        Tab.closeScope();
        Tab.insert(Obj.Type, curObjWrapperClass.getObj().getName(), curObjWrapperClass.getObj().getType());

        if (listVFTAdresses.size() == 0)
        {
            Code.mainPc = Code.pc;
        }
        initVirtualFunctionTable(curObjWrapperClass.getObj(), listVFTAdresses);

        isInClass = false;
        parser.log.debug("Prepoznata klasa", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExtendsTypeEpsilon ::= EXTENDS Type 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if ( (!type.isSemanticError())
            &&(type.getObj().getKind() != Obj.Type)
            && (type.getObj().getType().getKind() != Struct.Class) )
        {
            semantic_error("Tip " + type.getObj().getName() + " nije tipa klase.", typeleft);
            type.setSemanticError(true);
        }
        RESULT =  type;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsTypeEpsilon",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExtendsTypeEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
        RESULT = null;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsTypeEpsilon",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FieldDeclListEpsilon ::= FieldDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilon",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FieldDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilon",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FieldDeclList ::= FieldDeclList FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FieldDeclList ::= FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$9 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curFieldType = type;
        fieldVar = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",103, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FieldDecl ::= Type NT$9 FieldExprList SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
        fieldVar = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FieldExprList ::= FieldExprList COMMA VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldExprList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FieldExprList ::= VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldExprList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BraceMethodDeclListEpsilonEpsilon ::= BRACE_LEFT MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceMethodDeclListEpsilonEpsilon",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BraceMethodDeclListEpsilonEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceMethodDeclListEpsilonEpsilon",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$10 ::= 
            {
              Object RESULT =null;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            parser.log.debug("Prepoznat povratni tip", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",104, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            String message = "Metoda";
            if (isInClass)
            {
                ObjResultWrapper objWrapper = find_virtual_method(curObjWrapperClass.getObj().getType(), nameOfMethod, isStatic);
                if (objWrapper == null)
                {
                    Obj curMethod  = Tab.insert(Obj.Meth, nameOfMethod, retType.getObj().getType());
                    curObjWrapperMethod = new ObjResultWrapper(curMethod);
                }
                else if (!objWrapper.isSemanticError())
                {
                    curObjWrapperMethod = objWrapper;
                    curObjWrapperMethod.setDoesOverride(true);
                }
            }
            else if (!find_double_and_report_search(nameOfMethod, nameOfMethodleft, message))
            {
                Obj curMethod  = Tab.insert(Obj.Meth, nameOfMethod, retType.getObj().getType());
                curObjWrapperMethod = new ObjResultWrapper(curMethod);
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",105, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

            Tab.openScope();
            if (!isStatic && isInClass)
            {
                Obj varObj = Tab.insert(Obj.Var, "this", curObjWrapperClass.getObj().getType());
                varObj.setAdr(0);
                addThis = false;
            }
            else
            {
                setMethodStatic(curObjWrapperMethod.getObj());
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",106, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

            if (null != curObjWrapperMethod.getObj())
            {
                // Postavi broj formalnih parametara.
                //
                curObjWrapperMethod.getObj().setLevel(Tab.currentScope().getnVars());
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",107, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

            if (null != curObjWrapperMethod.getObj() && !curObjWrapperMethod.doesOverride())
            {
                Tab.chainLocalSymbols(curObjWrapperMethod.getObj());
            }
            curObjWrapperMethod.getObj().setAdr(Code.pc);
            if (nameOfMethod.equals(METHOD_ENTRY_NAME) && !isInClass)
            {
                TabExt.doesMainExist = true;
                if (listVFTAdresses.size() == 0)
                {
                    Code.mainPc = curObjWrapperMethod.getObj().getAdr();
                }
                else
                {
                    Code.fixup(listVFTAdresses.getLast());
                }

            }

            Code.put(Code.enter);
            Code.put(curObjWrapperMethod.getObj().getLevel());
            Code.put(Tab.currentScope().getnVars());

            parser.log.debug("Zavrseno prepoznavanje deklaracija lokalnih promen", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",108, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MethodDecl ::= StaticEpsilon ReturnType NT$10 IDENT NT$11 PAR_LEFT NT$12 FormParsEpsilonParRight NT$13 LocalVarDeclListBraceLeftEpsilon NT$14 StatementListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		
            // Dealocira se stek.
            //
            if (retType.getObj().getType() == Tab.noType)
            {
                Code.put(Code.exit);
                Code.put(Code.return_);
            }
            else
            {
                // Error in case of no return.
                //
                Code.put(Code.trap);
                Code.put(1);
            }

            Tab.closeScope();
            parser.log.debug("Prepoznat METHOD", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StaticEpsilon ::= STATIC 
            {
              Boolean RESULT =null;
		
                RESULT = new Boolean(true);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticEpsilon",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StaticEpsilon ::= 
            {
              Boolean RESULT =null;
		
                RESULT = new Boolean(false);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticEpsilon",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ReturnType ::= Type 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = type;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnType ::= VOID 
            {
              ObjResultWrapper RESULT =null;
		
                RESULT = new ObjResultWrapper(new Obj(Obj.Type, "", Tab.noType));
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FormParsEpsilonParRight ::= FormParsParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsEpsilonParRight",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FormParsEpsilonParRight ::= PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsEpsilonParRight",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LocalVarDeclListBraceLeftEpsilon ::= LocalVarDeclListBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeftEpsilon",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LocalVarDeclListBraceLeftEpsilon ::= BRACE_LEFT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeftEpsilon",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LocalVarDeclListBraceLeft ::= LocalVarDeclListOrErrorSemi LocalVarDeclOrErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeft",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LocalVarDeclListBraceLeft ::= LocalVarDeclOrErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeft",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LocalVarDeclListOrErrorSemi ::= LocalVarDeclListOrErrorSemi LocalVarDeclOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListOrErrorSemi",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LocalVarDeclListOrErrorSemi ::= LocalVarDeclOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListOrErrorSemi",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$15 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

                curLocalType =  type;
                localVar = true;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$15",109, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LocalVarDeclOrErrorSemi ::= Type NT$15 LocalVarExprList SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
                localVar = false;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorSemi",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LocalVarDeclOrErrorSemi ::= error SEMI_COLUMN 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
              parser.report_error("Uspesan oporavak od greske deklaracije lokalne promenljive,  SEMI_COLUMN je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorSemi",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LocalVarExprList ::= LocalVarExprList COMMA VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarExprList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LocalVarExprList ::= VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarExprList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LocalVarDeclOrErrorBraceLeft ::= error BRACE_LEFT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije lokalne promenljive,  BRACE_LEFT je resila stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorBraceLeft",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LocalVarDeclOrErrorBraceLeft ::= LocalVarDeclOrErrorSemi BRACE_LEFT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorBraceLeft",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // StatementListEpsilon ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListEpsilon",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StatementListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListEpsilon",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FormParsParRight ::= FormPars FormParOrErrorParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsParRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FormParsParRight ::= FormParOrErrorParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsParRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FormPars ::= FormPars FormParOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FormPars ::= FormParOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FormParOrErrorComma ::= FormPar COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorComma",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FormParOrErrorComma ::= error COMMA 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije formalnog parametra lokalne funkcije,  COMMA je resila stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorComma",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FormParOrErrorParRight ::= FormPar PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorParRight",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FormParOrErrorParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije formalnog parametra lokalne funkcije,  PAR_RIGHT je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorParRight",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$16 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

                curFormType = type;
                formVar = true;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$16",110, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FormPar ::= Type NT$16 VarExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
                formVar = false;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Type ::= IDENT 
            {
              ObjResultWrapper RESULT =null;
		int nameOfTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfType = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Obj obj = Tab.find(nameOfType);
            if (obj.getKind() != Obj.Type)
            {
                obj = new Obj(Obj.Type, "", Tab.noType);
                semantic_error("Nije definisan tip:" + nameOfType+" ", nameOfTypeleft);
                RESULT = (new ObjResultWrapper()).setSemanticError(true);
            }
            else
            {
                RESULT = new ObjResultWrapper(obj);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Statement ::= DesignatorStatementOrAssignErrorSemi 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        parser.log.debug("Prepoznata STATEMENT", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$17 ::= 
            {
              Object RESULT =null;

        // FALSE.
        //
        Code.put(Code.const_n);
        Code.putFalseJump(Code.ne, 0);
        int adrConditionFalse = Code.pc - 2;
        listAdrIfConditionFalse.addLast(adrConditionFalse);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$17",111, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;


        Code.putJump(0);
        Code.fixup(listAdrIfConditionFalse.removeLast());
        int adrConditionTrue = Code.pc - 2;
        listAdrIfConditionTrue.addLast(adrConditionTrue);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$18",112, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Statement ::= IF PAR_LEFT IfConditionParRight NT$17 Statement NT$18 ElseStatementEpsilon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		

        Code.fixup(listAdrIfConditionTrue.removeLast());
        parser.log.debug("Prepoznat IF", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$19 ::= 
            {
              Object RESULT =null;

        listAdrForCondition.addLast(Code.pc);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$19",113, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

        //
        Code.put(Code.const_n);
        Code.putFalseJump(Code.ne, 0);
        int adrConditionFalse = Code.pc - 2;
        listAdrForConditionFalse.addLast(adrConditionFalse);


        forLastDesigantorBeginAddress = Code.pc;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$20",114, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

        pushOnCodeStack(listSavedCode, forLastDesigantorBeginAddress);
        listOfListOfContinuesInFor.addLast(new LinkedList<Integer>());
        listOfListOfBreaksInFor.addLast(new LinkedList<Integer>());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$21",115, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Statement ::= FOR PAR_LEFT DesignatorStatementOrAssign SEMI_COLUMN NT$19 ForConditionSemi NT$20 DesignatorStatementOrAssignOrErrorParRight NT$21 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        updateAdresses(listOfListOfContinuesInFor);
        popFromCodeStack(listSavedCode);

        int adrCondition = listAdrForCondition.removeLast();
        Code.putJump(adrCondition);

        updateAdresses(listOfListOfBreaksInFor);
        Code.fixup(listAdrForConditionFalse.removeLast());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Statement ::= FOR error SEMI_COLUMN ForCondition SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN error SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN ForCondition SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Statement ::= FOR error SEMI_COLUMN error SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Statement ::= FOR error SEMI_COLUMN ForCondition SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT ili SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT ili SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Statement ::= FOR error SEMI_COLUMN error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT ili SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Statement ::= FOR error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT ili SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Statement ::= FOR error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Statement ::= BREAK SEMI_COLUMN 
            {
              Object RESULT =null;
		
        // Ne mora 0. Moze sta god.
        //
        Code.putJump(0);
        int adr = Code.pc - 2;
        listOfListOfBreaksInFor.getLast().addLast(adr);
        parser.log.debug("Prepoznat BREAK", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Statement ::= CONTINUE SEMI_COLUMN 
            {
              Object RESULT =null;
		
        Code.putJump(0);
        int adr = Code.pc - 2;
        listOfListOfContinuesInFor.getLast().addLast(adr);
        parser.log.debug("Prepoznat CONTINUE", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Statement ::= RETURN ExprEpsilon SEMI_COLUMN 
            {
              Object RESULT =null;
		
        // TODO : return check semantic.
        // Should exist, are types ok...
        //
        Code.put(Code.exit);
        Code.put(Code.return_);

        parser.log.debug("Prepoznat RETURN", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Statement ::= READ PAR_LEFT Designator PAR_RIGHT SEMI_COLUMN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper des = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
        LinkedList<Struct> listType = new LinkedList<Struct>();
        listType.addLast(Tab.intType);
        listType.addLast(Tab.charType);
        listType.addLast(TabExt.boolType);
        if (!des.isSemanticError()
             && check_type_and_report(des.getObj(), listType, desleft, " prvi argument READ-a mora biti char, bool ili int"))
        {
            if (des.isLeftValue())
            {
                Code.put(Code.pop);
                if (typesEqual(des.getObj().getType(), Tab.charType))
                {
                    Code.put(Code.bread);
                }
                else
                {
                    Code.put(Code.read);
                }
                Code.store(des.getObj());
            }
            else
            {
                semantic_error("Parametar kod read mora da bude lvalue. ", desleft);
            }
        }
        parser.log.debug("Prepoznat READ", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Statement ::= PRINT PAR_LEFT Expr CommaConstNumEpsilon PAR_RIGHT SEMI_COLUMN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int numObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj numObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
        LinkedList<Struct> listType = new LinkedList<Struct>();
        listType.addLast(Tab.intType);
        listType.addLast(Tab.charType);
        listType.addLast(TabExt.boolType);
        if (!expr.isSemanticError()
        && check_type_and_report(expr.getObj(), listType, exprleft, " prvi argument PRINT-a mora biti char, bool ili int"))
        {
            if (numObj != null)
            {
                Code.load(numObj);
            }
            else
            {
                Code.loadConst(0);
            }
            if (typesEqual(expr.getObj().getType(), Tab.charType))
            {
                Code.put(Code.bprint);
            }
            else
            {
                Code.put(Code.print);
            }
        }
        else
        {
            expr.setSemanticError(true);
        }
        RESULT = expr;
        parser.log.debug("Prepoznat PRINT");
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Statement ::= BRACE_LEFT StatementListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
		
        parser.log.debug("Prepoznat BLOK", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ElseStatementEpsilon ::= ELSE Statement 
            {
              Object RESULT =null;
		
            parser.log.debug("Prepoznat ELSE", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatementEpsilon",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ElseStatementEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatementEpsilon",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExprEpsilon ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEpsilon",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExprEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEpsilon",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ForConditionSemi ::= ForCondition SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ForConditionSemi ::= SEMI_COLUMN 
            {
              Object RESULT =null;
		
            Code.loadConst(1);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ForConditionSemi ::= error SEMI_COLUMN 
            {
              Object RESULT =null;
		
              parser.report_error("Uspesan oporavak od greske kod uslova u for-u,  SEMI_COLUMN je resio stvar" , null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CommaConstNumEpsilon ::= COMMA CONST_NUM 
            {
              Obj RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, number.toString(), Tab.intType, number.intValue(), numberleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaConstNumEpsilon",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CommaConstNumEpsilon ::= 
            {
              Obj RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaConstNumEpsilon",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DesignatorStatementOrAssign ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DesignatorStatementOrAssign ::= AssingmentStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DesignatorStatementOrAssign ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DesignatorStatementOrAssignOrErrorParRight ::= DesignatorStatement PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DesignatorStatementOrAssignOrErrorParRight ::= AssingmentStatement PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DesignatorStatementOrAssignOrErrorParRight ::= PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DesignatorStatementOrAssignOrErrorParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske kod inkrementatorra u for-u,  PAR_RIGHT je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DesignatorStatementOrAssignErrorSemi ::= DesignatorStatement SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignErrorSemi",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DesignatorStatementOrAssignErrorSemi ::= AssingmentStatementOrErrorSemi 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignErrorSemi",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DesignatorStatement ::= DesignatorIncOrDec 
            {
              Object RESULT =null;
		int incOrDecleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int incOrDecright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper incOrDec = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = incOrDec;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DesignatorStatement ::= DesignatorFuncCall 
            {
              Object RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper funcCall = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (funcCall.getObj().getType() != Tab.noType)
            {
                Code.put(Code.pop);
            }
            RESULT = funcCall;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DesignatorIncOrDec ::= Designator IncOrDec 
            {
              ObjResultWrapper RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper designator = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

        if (!designator.isSemanticError())
        {
            if (designator.isLeftValue())
            {
                if (check_type_and_report(designator.getObj(), Tab.intType, designatorleft, "Izraz koji se inkrementira/dekrementira mora da bude int"))
                {
                    // right value is not needed
                    // because a i a[i] is good because there is no inc
                    Code.loadConst(1);
                    Code.put(op);
                    Code.store(designator.getObj());
                    designator.promoteToConst();
                    RESULT = designator;
                }
                else
                {
                    RESULT = designator.setSemanticError(true);
                }
            }
            else
            {
                semantic_error("Izraz koji se inkrementira/dekrementira mora da bude lvalue.", designatorleft);
                RESULT = designator.setSemanticError(true);
            }
        }
        else
        {
            RESULT = designator.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorIncOrDec",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // IncOrDec ::= OP_INC 
            {
              Integer RESULT =null;
		
        RESULT = Code.add;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncOrDec",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IncOrDec ::= OP_DEC 
            {
              Integer RESULT =null;
		
        RESULT = Code.sub;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncOrDec",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$22 ::= 
            {
              ObjResultWrapper RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

            // TODO: add semantic errors.
            if (func.isVirtual())
            {
                // adr
                Code.put(Code.dup);

                // adr adr
            }
            listIsVirtualFunction.addLast(func.isVirtual());
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$22",116, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DesignatorFuncCall ::= Designator PAR_LEFT NT$22 ActParsEpsilon PAR_RIGHT 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
            if (func.isVirtual())
            {
                String funcName = func.getObj().getName();
                // VFT_POINTER
                Code.put(Code.getfield);
                Code.put2(0);
                Code.put(Code.invokevirtual);
                for (int idx = 0; idx < funcName.length(); idx ++)
                {
                    Code.put4((int)funcName.charAt(idx));
                }
                Code.put4(-1);

            }
            else
            {
                Code.put(Code.call);
                // Because Code.call is put then pc  = pc + 1.
                //
                int adr = func.getObj().getAdr() - Code.pc + 1;
                Code.put2(adr);
            }
            listIsVirtualFunction.removeLast();
            RESULT = func;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorFuncCall",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ActParsEpsilon ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsEpsilon",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ActParsEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsEpsilon",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$23 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (!dest.isError())
            {
                if (dest.isLeftValue())
                {
                    if ( dest.hasAdditionalParsOnStack() && op == OP_ASSIGN_CODE)
                    {
                        // a i a[i]
                        // c c.x
                        Code.put(Code.pop);
                        // a i
                        // c
                    }
                }
                else
                {
                    semantic_error("Levi izraz kod dodele mora da bude lvalue.", destleft);
                    RESULT = dest.setSemanticError(true);

                }
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$23",117, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // AssingmentStatement ::= Designator Assignop NT$23 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!dest.isError() && !expr.isError())
            {
                if (typesAssignable(dest.getObj().getType(), expr.getObj().getType()))
                {
                    if (op != OP_ASSIGN_CODE)
                    {
                        // Vrednost na steku nije duplirana jer
                        // treba samo da se koristi za izracunavanje
                        // Nista za dalje vrednosti.
                        Code.put(op);
                    }
                    Code.store(dest.getObj());
                    if ( (op == OP_ASSIGN_CODE)
                        && !dest.hasAdditionalParsOnStack())
                    {
                        Code.put(Code.pop);
                    }
                }
                else
                {
                    semantic_error("Vrednosti izraza pri dodeli nisu kompatibilne.", destleft);
                    RESULT = dest.setSemanticError(true);
                    }
            }
            else
            {
                RESULT = dest.propagateError(expr);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssingmentStatement",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$24 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        if (!dest.isError())
        {
            if (dest.isLeftValue())
            {
                if ( dest.hasAdditionalParsOnStack() && op == OP_ASSIGN_CODE)
                {
                    // a i a[i]
                    // c c.x
                    Code.put(Code.pop);
                    // a i
                    // c
                }
            }
            else
            {
                semantic_error("Levi izraz kod dodele mora da bude lvalue.", destleft);
                RESULT = dest.setSemanticError(true);

            }
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$24",118, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // AssingmentStatementOrErrorSemi ::= Designator Assignop NT$24 ExpOrErrorSemi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // Check error.
        //
        if (!dest.isError() && !expr.isError())
        {
            if (typesAssignable(dest.getObj().getType(),
                expr.getObj().getType()))
            {
                if (op != OP_ASSIGN_CODE)
                {
                    // Vrednost na steku nije duplirana jer
                    // treba samo da se koristi za izracunavanje
                    // Nista za dalje vrednosti.
                    Code.put(op);
                }
                Code.store(dest.getObj());
                if ( (op == OP_ASSIGN_CODE)
                    && !dest.hasAdditionalParsOnStack())
                {
                    Code.put(Code.pop);
                }
            }
            else
            {
                semantic_error("Vrednosti izraza pri dodeli nisu kompatibilne.", destleft);
                RESULT = dest.setSemanticError(true);
            }
        }
        else
        {
            RESULT = dest.propagateError(expr);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssingmentStatementOrErrorSemi",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ExpOrErrorSemi ::= Expr SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpOrErrorSemi",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ExpOrErrorSemi ::= error SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		

            parser.report_error("Uspesan oporavak od greske dodele promenljive,  SEMI_COLUMN je resio stvar", null);
            RESULT = (new ObjResultWrapper()).setSyntaxError(true);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpOrErrorSemi",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$25 ::= 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (listIsVirtualFunction.getLast())
            {
                // adr adr par
                Code.put(Code.dup_x1);
                // adr par adr par
                Code.put(Code.pop);
                //adr par adr
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$25",119, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ActPars ::= Expr NT$25 CommaExprListEpsilon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CommaExprListEpsilon ::= CommaExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprListEpsilon",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CommaExprListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprListEpsilon",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CommaExprList ::= CommaExprList CommaExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CommaExprList ::= CommaExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CommaExpr ::= COMMA Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (listIsVirtualFunction.getLast())
            {
                // adr adr par
                Code.put(Code.dup_x1);
                // adr par adr par
                Code.put(Code.pop);
                //adr par adr
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExpr",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ForCondition ::= OpOrCondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // IfConditionParRight ::= OpOrCondTermList PAR_RIGHT 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper cond = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                RESULT = cond;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfConditionParRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // IfConditionParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                parser.report_error("Uspesan oporavak od greske prilikom definisanja uslova za if PAR_RIGHT je resila stvar", null);
                RESULT = (new ObjResultWrapper()).setSyntaxError(true);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfConditionParRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OpOrCondTermList ::= OpOrCondTermList OP_OR CondTerm 
            {
              ObjResultWrapper RESULT =null;
		
            Code.put(Code.add);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpOrCondTermList",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OpOrCondTermList ::= CondTerm 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpOrCondTermList",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CondTerm ::= OpAndCondFactList 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OpAndCondFactList ::= OpAndCondFactList OP_AND CondFact 
            {
              ObjResultWrapper RESULT =null;
		int leftFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFact = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rightFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFact = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Code.put(Code.mul);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpAndCondFactList",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OpAndCondFactList ::= CondFact 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpAndCondFactList",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CondFact ::= Expr RelOpExprOrEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int compareRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int compareRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper compareRight = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!expr.isSemanticError()
            && ( (null == compareRight) || (!compareRight.isSemanticError())))
        {
            if (null == compareRight)
            {
                if(check_type_and_report(expr.getObj(), TabExt.boolType, exprleft, "Tip kod logickog izraza mora biti boolean"))
                {
                    RESULT = expr.setSemanticError(true);
                }
                RESULT = expr;
            }
            else
            {
                if (typesCompatibile(expr.getObj().getType(), compareRight.getObj().getType()))
                {
                    if ( (expr.isClass() || compareRight.isClass()
                        || expr.isArray() || compareRight.isArray())
                        && ( (compareRight.getRelOp() != Code.eq) &&
                        (compareRight.getRelOp() != Code.ne)))
                    {
                        semantic_error("Kad se porede nizovi/klase sme da se koristi samo != i ==", exprleft);
                        RESULT = (new ObjResultWrapper()).setSemanticError(true);
                    }
                    else
                    {
                        // JCONDFALSE.
                        //
                        Code.putFalseJump(compareRight.getRelOp(), 0);
                        int adrFromWhereToJumpFalse = Code.pc - 2;
                        // TRUE.
                        //
                        Code.put(Code.const_1);
                        Code.putJump(0);
                        int adrFromWhereToJumpTrue = Code.pc - 2;

                        Code.fixup(adrFromWhereToJumpFalse);
                        // False.
                        //
                        Code.put(Code.const_n);
                        // JMP over this
                        Code.fixup(adrFromWhereToJumpTrue);
                        RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", TabExt.boolType));
                    }
                }
                else
                {
                    semantic_error("Tipovi kod poredjenja nisu kompatibilni.", exprleft);
                    RESULT = (new ObjResultWrapper()).setSemanticError(true);
                }
            }

        }
        else
        {
            RESULT = expr.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // RelOpExprOrEpsilon ::= Relop Expr 
            {
              ObjResultWrapper RESULT =null;
		int relOpleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int relOpright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer relOp = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!expr.isError())
            {
                expr.setRelOp(relOp);
            }
            RESULT = expr;

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprOrEpsilon",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // RelOpExprOrEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprOrEpsilon",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Expr ::= OP_SUB AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!term.isSemanticError()
        && check_type_and_report(term.getObj(), Tab.intType, termleft, " Kad se - nalazi ispred nekog izraza, on mora biti int."))
        {
            Code.put(Code.neg);
            term.generateRightValue();
            RESULT = term;
        }
        else
        {
            RESULT = term.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Expr ::= AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!term.isSemanticError())
        {
            term.generateRightValue();
        }
        RESULT = term;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AddopRightTerm ::= AddopLeftTerm AddopRight AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int leftTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
    // Treba dodati provere za polja i sve ostale gluposti
    //
       if (!leftTerm.isSemanticError()
        && !rightTerm.isSemanticError()
        && check_type_and_report(leftTerm.getObj(), Tab.intType, rightTermleft, " Levi sabirak / umanjenik mora biti tipa int.")
        && check_type_and_report(rightTerm.getObj(), Tab.intType, rightTermleft, " Desni sabirak / umanjilac mora biti tipa int."))
        {
            if (leftTerm.isLeftValue())
            {
                rightTerm.generateRightValue();
                Code.put(op);
                if (leftTerm.isArrayElement())
                {
                    // a i sum
                    Code.put(Code.dup_x2);
                    // sum a i sum
                }
                else if (leftTerm.isField())
                {
                    // c sum
                    Code.put(Code.dup_x1);
                    // sum c sum
                }
                else
                {
                    Code.put(Code.dup);
                }
                // sum
                Code.store(leftTerm.getObj());

                leftTerm.promoteToConst();
                RESULT = leftTerm;
            }
            else
            {
                semantic_error("Kod += -= leva strana treba da bude lvalue");
                RESULT = leftTerm.setSemanticError(true);
            }
        }
        else
        {
            RESULT = leftTerm.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRightTerm",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AddopRightTerm ::= AddopLeftTerm 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = type;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRightTerm",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AddopLeftTerm ::= AddopLeftTerm AddopLeft Term 
            {
              ObjResultWrapper RESULT =null;
		int leftTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (check_type_and_report(leftTerm.getObj(), Tab.intType, leftTermleft, " Tip levog sabirka/umanjenika u zbiru/proizvodu mora da bude int")
            &&
            check_type_and_report(rightTerm.getObj(), Tab.intType, rightTermleft, " Tip desnog sabirka/umanjioca u zbiru/razlici mora biti int"))
            {
                rightTerm.generateRightValue();
                Code.put(op);
                leftTerm.generateRightValue();
                RESULT = leftTerm;
        }
        else
        {
            RESULT = leftTerm.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeftTerm",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // AddopLeftTerm ::= Term 
            {
              ObjResultWrapper RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = term;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeftTerm",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Term ::= MullopRightFactor 
            {
              ObjResultWrapper RESULT =null;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = rightFactor;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // MullopRightFactor ::= MulopLeftFactor MulopRight MullopRightFactor 
            {
              ObjResultWrapper RESULT =null;
		int leftFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // TODO: Treba dodati provere za polja i sve ostale gluposti
            //
            if (!leftFactor.isSemanticError()
            && !rightFactor.isSemanticError()
            && check_type_and_report(leftFactor.getObj(), Tab.intType, leftFactorleft, " Levi cinilac / deljenik mora biti tipa int.")
            && check_type_and_report(rightFactor.getObj(), Tab.intType, rightFactorleft, " Desni cinilac / delilac mora biti tipa int."))
            {
                if (leftFactor.isLeftValue())
                {
                    rightFactor.generateRightValue();
                    Code.put(op);
                    if (leftFactor.isArrayElement())
                    {
                        Code.put(Code.dup_x2);
                    }
                    else if (leftFactor.isField())
                    {
                        Code.put(Code.dup_x1);
                    }
                    else
                    {
                        Code.put(Code.dup);
                    }

                    Code.store(leftFactor.getObj());
                    leftFactor.promoteToConst();
                    RESULT = leftFactor;
                }
                else
                {
                    semantic_error("Kod /= *= %= leva strana treba da bude lvalue.", rightFactorleft);
                    RESULT = leftFactor.setSemanticError(true);
                }
            }
            else
            {
                RESULT = leftFactor.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MullopRightFactor",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // MullopRightFactor ::= MulopLeftFactor 
            {
              ObjResultWrapper RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper factor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = factor;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MullopRightFactor",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // MulopLeftFactor ::= MulopLeftFactor MulopLeft Factor 
            {
              ObjResultWrapper RESULT =null;
		int leftFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (check_type_and_report(leftFactor.getObj(), Tab.intType, leftFactorleft, " Tip levog cinioca/deljenika u proizvodu mora da bude int")
            &&
                check_type_and_report(rightFactor.getObj(), Tab.intType, rightFactorleft, " Tip desnog cinioca/delioca mora biti int"))
            {
                rightFactor.generateRightValue();
                Code.put(op);
                leftFactor.generateRightValue();
                RESULT = leftFactor;
            }
            else
            {
                RESULT = leftFactor.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeftFactor",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // MulopLeftFactor ::= Factor 
            {
              ObjResultWrapper RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper factor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = factor;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeftFactor",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Factor ::= DesignatorFuncCall 
            {
              ObjResultWrapper RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = func;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Factor ::= Designator 
            {
              ObjResultWrapper RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper designator = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = designator;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Factor ::= ConstValue 
            {
              ObjResultWrapper RESULT =null;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Code.load(constValue);
            RESULT = new ObjResultWrapper(constValue);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Factor ::= NEW Type BracketExprEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprWrapleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprWrapright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprWrap = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (null != exprWrap)
            {
                if (!exprWrap.isSemanticError()
                    && !type.isSemanticError()
                    && check_type_and_report(exprWrap.getObj(),
                                          Tab.intType,
                                         exprWrapleft,
                                         "Tip izraza kod NEW operatora sa nizom mora da bude int"))
                {
                    Code.put(Code.newarray);
                    if (typesEqual(type.getObj().getType(), Tab.charType))
                    {
                        Code.put(0);
                    }
                    else
                    {
                        Code.put(1);
                    }
                    Struct struct = new Struct(Struct.Array, type.getObj().getType());
                    RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", struct));
                }
                else
                {
                    RESULT = (new ObjResultWrapper()).setSemanticError(true);
                }
            }
            else
            {
                if (!type.isSemanticError())
                {
                    // For sur is type if it's not a semantic error
                    if  (type.getObj().getType().getKind() == Struct.Class)
                    {
                        Code.put(Code.new_);
                        Code.put2(type.getObj().getType().getNumberOfFields() * INT_SIZE);
                        // adr
                        Code.put(Code.dup);
                        // adr adr
                        Code.loadConst(type.getObj().getAdr());
                        // adr adr val
                        // TODO add check if class is not initialized.
                        //
                        Code.store(type.getObj().getType().getMembersTable().searchKey(VFT_POINTER_NAME));
                        RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", type.getObj().getType()));
                    }
                    else
                    {
                        semantic_error(type.getObj().getName() + " nije tip unutrasnje klase", typeleft);
                        RESULT = (new ObjResultWrapper()).setSemanticError(true);
                    }
                }
                else
                {
                    RESULT = (new ObjResultWrapper()).setSemanticError(true);
                }

            }
            // TO DO : Add check of errors.
            //
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Factor ::= PAR_LEFT Expr PAR_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper result = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            RESULT = result;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // BracketExprEpsilon ::= BRACKET_LEFT Expr BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                RESULT = expr;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketExprEpsilon",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // BracketExprEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
                RESULT = null;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketExprEpsilon",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$26 ::= 
            {
              ObjResultWrapper RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curObjWrappFieldOrElem = find_for_use_and_report(name, nameleft, name);

        if (!curObjWrappFieldOrElem.isError())
        {
            if (isInClass)
            {

                if (curObjWrappFieldOrElem.isField())
                {
                    Code.load(Tab.find("this"));
                    Code.put(Code.dup);
                }
                else if ((curObjWrappFieldOrElem.getObj().getKind() == Obj.Meth)
                    && (!isMethodStatic(curObjWrappFieldOrElem.getObj())) )
                {
                    Code.load(Tab.find("this"));
                    curObjWrappFieldOrElem.setVirtual(true);
                }
            }

            listCurObjWrapperFieldOrElem.addLast(curObjWrappFieldOrElem);
            if (curObjWrappFieldOrElem.loadable())
            {
                Code.load(curObjWrappFieldOrElem.getObj());
            }

        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$26",120, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator ::= IDENT NT$26 DotIdentOrBracketExprListEpsilon 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!curObjWrappFieldOrElem.isError())
        {
            if(objWrapper == null)
            {
                RESULT = curObjWrappFieldOrElem;
            }
            else if ( (objWrapper != null) && (!objWrapper.isError()) )
            {
                RESULT = objWrapper;
            }
            else
            {
                RESULT = objWrapper;
            }
        }
        else
        {
            RESULT = curObjWrappFieldOrElem;
        }

        if (!curObjWrappFieldOrElem.isError())
        {
            listCurObjWrapperFieldOrElem.removeLast();
            if (listCurObjWrapperFieldOrElem.size() != 0)
            {
                curObjWrappFieldOrElem = listCurObjWrapperFieldOrElem.getLast();
            }
            else
            {
                curObjWrappFieldOrElem = null;
            }
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",84, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // DotIdentOrBracketExprListEpsilon ::= DotIdentOrBracketExprList 
            {
              ObjResultWrapper RESULT =null;
		int objWrapleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrap = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = objWrap;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprListEpsilon",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DotIdentOrBracketExprListEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprListEpsilon",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // DotIdentOrBracketExprList ::= DotIdentOrBracketExprList DotIdentOrBracketExpr 
            {
              ObjResultWrapper RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper left = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (left.isError() || objWrapper.isError())
            {
                objWrapper.propagateError(left);
            }
            else
            {
                RESULT = objWrapper;
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprList",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // DotIdentOrBracketExprList ::= DotIdentOrBracketExpr 
            {
              ObjResultWrapper RESULT =null;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

            RESULT = objWrapper;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprList",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // DotIdentOrBracketExpr ::= DOT IDENT 
            {
              ObjResultWrapper RESULT =null;
		int memberNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int memberNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String memberName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!curObjWrappFieldOrElem.isError())
        {
            if (curObjWrappFieldOrElem.isClassType())
            {
                Obj obj = curObjWrappFieldOrElem.getObj().getType().getMembersTable().searchKey(memberName);
                if ( (obj == null)
                ||
                ((obj.getKind() != Obj.Meth)
                || (!isMethodStatic(obj))) )
                {
                    // TODO ispisi
                    RESULT = curObjWrappFieldOrElem.setSemanticError(true);
                }
                else
                {
                    curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));

                    RESULT = curObjWrappFieldOrElem;
                }
            }
            else if (curObjWrappFieldOrElem.isClass())
            {
                Obj obj = curObjWrappFieldOrElem.getObj().getType().getMembersTable().searchKey(memberName);
                if ( (obj == null) || ((obj.getKind() != Obj.Fld) && (obj.getKind() != Obj.Meth) ) )
                {
                    RESULT = curObjWrappFieldOrElem.setSemanticError(true);
                }
                else
                {
                    if ( (obj.getKind() == Obj.Meth) && (isMethodStatic(obj)) )
                    {
                        Code.put(Code.pop);
                        curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));
                        RESULT = curObjWrappFieldOrElem;
                    }
                    else
                    {
                        curObjWrappFieldOrElem.generateRightValue();
                        if (obj.getKind() == Obj.Fld)
                        {
                            // x
                            Code.put(Code.dup);
                            // x x
                            Code.load(obj);
                            // x x.i

                            curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));
                            RESULT = curObjWrappFieldOrElem;
                        }
                        else
                        {
                            curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));
                            curObjWrappFieldOrElem.setVirtual(true);
                            RESULT = curObjWrappFieldOrElem;
                        }
                    }
                }
            }
            else
            {
                RESULT = curObjWrappFieldOrElem.setSemanticError(true);
            }
        }
        else
        {
            RESULT = curObjWrappFieldOrElem;
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$27 ::= 
            {
              ObjResultWrapper RESULT =null;

        curObjWrappFieldOrElem.generateRightValue(false);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$27",121, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // DotIdentOrBracketExpr ::= BRACKET_LEFT NT$27 Expr BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        if (!curObjWrappFieldOrElem.isError()
        && !expr.isError())
        {
            if (check_type_and_report(expr.getObj(), Tab.intType,
            exprleft, " indeks niza mora bude tipa int"))
            {

                if (curObjWrappFieldOrElem.isArray())
                {
                    Struct curArrayDotType = curObjWrappFieldOrElem.getObj().getType().getElemType();
                    Obj obj = new Obj(Obj.Elem, "", curArrayDotType);
                    curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));
                    Code.put(Code.dup2);
                    Code.load(obj);
                    RESULT = new ObjResultWrapper(obj);
                }
                else
                {
                    semantic_error("Kad se koriste [] sa leve strane mora biti niz", exprleft);
                    RESULT = curObjWrappFieldOrElem.setSemanticError(true);
                }
            }
            else
            {
                RESULT = curObjWrappFieldOrElem.setSemanticError(true);

            }
        }
        else
        {
            RESULT = curObjWrappFieldOrElem.propagateError(expr);;
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // DotIdentOrBracketExpr ::= BRACKET_LEFT error BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod indeksa niza,  BRACKET_RIGHT je resio stvar" , null);
        RESULT = new ObjResultWrapper().setSyntaxError(true);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Assignop ::= OP_ASSIGN 
            {
              Integer RESULT =null;
		
                RESULT = OP_ASSIGN_CODE;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = op;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = op;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Relop ::= OP_EQ 
            {
              Integer RESULT =null;
		
                RESULT = Code.eq;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Relop ::= OP_NOT_EQ 
            {
              Integer RESULT =null;
		
                RESULT = Code.ne;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Relop ::= OP_GTE 
            {
              Integer RESULT =null;
		
                RESULT = Code.ge;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Relop ::= OP_GREAT 
            {
              Integer RESULT =null;
		
                RESULT = Code.gt;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Relop ::= OP_LESS 
            {
              Integer RESULT =null;
		
                RESULT = Code.lt;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Relop ::= OP_LTE 
            {
              Integer RESULT =null;
		
                RESULT = Code.le;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // AddopLeft ::= OP_ADD 
            {
              Integer RESULT =null;
		
                RESULT = Code.add;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // AddopLeft ::= OP_SUB 
            {
              Integer RESULT =null;
		
                RESULT = Code.sub;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // AddopRight ::= OP_ASSIGN_ADD 
            {
              Integer RESULT =null;
		
                RESULT = Code.add;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // AddopRight ::= OP_ASSIGN_SUB 
            {
              Integer RESULT =null;
		
                RESULT = Code.sub;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // MulopLeft ::= OP_MUL 
            {
              Integer RESULT =null;
		
                RESULT = Code.mul;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // MulopLeft ::= OP_DIV 
            {
              Integer RESULT =null;
		
                RESULT = Code.div;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // MulopLeft ::= OP_MOD 
            {
              Integer RESULT =null;
		
                RESULT = Code.rem;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // MulopRight ::= OP_ASSIGN_MUL 
            {
              Integer RESULT =null;
		
                RESULT = Code.mul;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // MulopRight ::= OP_ASSIGN_DIV 
            {
              Integer RESULT =null;
		
                RESULT = Code.div;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // MulopRight ::= OP_ASSIGN_MOD 
            {
              Integer RESULT =null;
		
                RESULT = Code.rem;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MJParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
              return CUP$MJParser$do_action_part00000000(
                               CUP$MJParser$act_num,
                               CUP$MJParser$parser,
                               CUP$MJParser$stack,
                               CUP$MJParser$top);
    }
}

}
