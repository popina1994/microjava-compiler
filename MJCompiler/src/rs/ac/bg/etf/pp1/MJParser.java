
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import java.io.*;
import java.util.LinkedList;
import java.util.Collection;
import java.util.Iterator;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.*;
import rs.etf.pp1.symboltable.structure.HashTableDataStructure;
import rs.etf.pp1.symboltable.visitors.SymbolTableVisitor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MJParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\355\000\002\142\002\000\002\143\002\000\002\002" +
    "\012\000\002\002\004\000\002\003\003\000\002\003\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\144\002\000\002" +
    "\006\005\000\002\021\004\000\002\021\003\000\002\023" +
    "\004\000\002\023\004\000\002\022\004\000\002\022\003" +
    "\000\002\024\004\000\002\024\004\000\002\007\003\000" +
    "\002\007\002\000\002\010\004\000\002\010\003\000\002" +
    "\145\002\000\002\146\002\000\002\011\010\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\014\003\000" +
    "\002\016\003\000\002\015\003\000\002\020\004\000\002" +
    "\025\004\000\002\025\002\000\002\147\002\000\002\150" +
    "\002\000\002\027\011\000\002\026\005\000\002\026\005" +
    "\000\002\151\002\000\002\026\004\000\002\035\005\000" +
    "\002\035\003\000\002\152\002\000\002\035\006\000\002" +
    "\035\002\000\002\153\002\000\002\036\005\000\002\036" +
    "\003\000\002\036\004\000\002\154\002\000\002\036\006" +
    "\000\002\155\002\000\002\036\005\000\002\156\002\000" +
    "\002\037\006\000\002\031\004\000\002\031\003\000\002" +
    "\157\002\000\002\032\006\000\002\032\005\000\002\032" +
    "\004\000\002\033\005\000\002\033\003\000\002\034\005" +
    "\000\002\034\002\000\002\160\002\000\002\161\002\000" +
    "\002\162\002\000\002\163\002\000\002\164\002\000\002" +
    "\040\017\000\002\041\003\000\002\041\002\000\002\042" +
    "\003\000\002\042\003\000\002\055\003\000\002\055\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\004\000" +
    "\002\044\003\000\002\046\004\000\002\046\003\000\002" +
    "\165\002\000\002\045\006\000\002\045\004\000\002\047" +
    "\005\000\002\047\003\000\002\050\004\000\002\050\004" +
    "\000\002\051\003\000\002\051\002\000\002\052\004\000" +
    "\002\052\003\000\002\057\004\000\002\057\003\000\002" +
    "\053\004\000\002\053\003\000\002\056\004\000\002\056" +
    "\004\000\002\060\004\000\002\060\004\000\002\166\002" +
    "\000\002\054\005\000\002\061\003\000\002\062\003\000" +
    "\002\167\002\000\002\170\002\000\002\062\011\000\002" +
    "\171\002\000\002\172\002\000\002\062\011\000\002\173" +
    "\002\000\002\174\002\000\002\175\002\000\002\062\014" +
    "\000\002\062\011\000\002\062\011\000\002\062\011\000" +
    "\002\062\011\000\002\062\011\000\002\062\011\000\002" +
    "\062\011\000\002\062\007\000\002\062\005\000\002\062" +
    "\004\000\002\062\004\000\002\062\005\000\002\062\007" +
    "\000\002\062\010\000\002\062\005\000\002\063\004\000" +
    "\002\063\002\000\002\064\003\000\002\064\002\000\002" +
    "\077\004\000\002\077\003\000\002\077\004\000\002\066" +
    "\004\000\002\066\002\000\002\102\003\000\002\102\003" +
    "\000\002\102\002\000\002\100\004\000\002\100\004\000" +
    "\002\100\003\000\002\100\004\000\002\075\004\000\002" +
    "\075\003\000\002\067\003\000\002\067\003\000\002\104" +
    "\004\000\002\106\003\000\002\106\003\000\002\176\002" +
    "\000\002\105\007\000\002\105\006\000\002\070\003\000" +
    "\002\070\002\000\002\177\002\000\002\101\006\000\002" +
    "\200\002\000\002\103\006\000\002\107\004\000\002\107" +
    "\004\000\002\201\002\000\002\071\005\000\002\072\003" +
    "\000\002\072\002\000\002\073\004\000\002\073\003\000" +
    "\002\074\004\000\002\111\003\000\002\065\004\000\002" +
    "\065\004\000\002\112\005\000\002\112\003\000\002\113" +
    "\003\000\002\114\005\000\002\114\003\000\002\115\004" +
    "\000\002\116\004\000\002\116\002\000\002\117\004\000" +
    "\002\117\003\000\002\120\005\000\002\120\003\000\002" +
    "\121\005\000\002\121\003\000\002\122\003\000\002\123" +
    "\005\000\002\123\003\000\002\124\005\000\002\124\003" +
    "\000\002\125\003\000\002\125\003\000\002\125\003\000" +
    "\002\125\005\000\002\125\005\000\002\127\005\000\002" +
    "\127\002\000\002\202\002\000\002\130\005\000\002\131" +
    "\003\000\002\131\002\000\002\132\004\000\002\132\003" +
    "\000\002\133\004\000\002\203\002\000\002\133\006\000" +
    "\002\133\005\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\135\003\000\002\135\003\000\002\135" +
    "\003\000\002\135\003\000\002\135\003\000\002\135\003" +
    "\000\002\136\003\000\002\136\003\000\002\137\003\000" +
    "\002\137\003\000\002\140\003\000\002\140\003\000\002" +
    "\140\003\000\002\141\003\000\002\141\003\000\002\141" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0166\000\004\004\001\001\002\000\004\002\u0168\001" +
    "\002\000\004\004\006\001\002\000\004\023\007\001\002" +
    "\000\012\007\000\011\000\023\000\063\000\001\002\000" +
    "\012\007\021\011\022\023\013\063\ufffc\001\002\000\006" +
    "\003\ufff6\023\ufff6\001\002\000\004\063\u0158\001\002\000" +
    "\066\003\uff92\023\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\051\uff92\054\uff92\055\uff92\060\uff92\061\uff92\062\uff92\063" +
    "\uff92\001\002\000\012\007\ufff8\011\ufff8\023\ufff8\063\ufff8" +
    "\001\002\000\012\007\ufff7\011\ufff7\023\ufff7\063\ufff7\001" +
    "\002\000\012\007\ufffa\011\ufffa\023\ufffa\063\ufffa\001\002" +
    "\000\012\007\021\011\022\023\013\063\ufffd\001\002\000" +
    "\012\007\ufff9\011\ufff9\023\ufff9\063\ufff9\001\002\000\004" +
    "\023\044\001\002\000\004\023\013\001\002\000\004\023" +
    "\uffe8\001\002\000\004\023\026\001\002\000\006\054\uffe7" +
    "\055\040\001\002\000\004\044\030\001\002\000\006\054" +
    "\uffe4\055\uffe4\001\002\000\010\024\035\025\037\026\036" +
    "\001\002\000\056\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\054\uffe1\055\uffe1\060\uffe1\062\uffe1\001\002\000\056" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\054\uffe0\055" +
    "\uffe0\060\uffe0\062\uffe0\001\002\000\056\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\054\uffe2\055\uffe2\060\uffe2\062" +
    "\uffe2\001\002\000\006\054\uffe3\055\uffe3\001\002\000\056" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\054\uffdf\055" +
    "\uffdf\060\uffdf\062\uffdf\001\002\000\056\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\054\uffde\055\uffde\060\uffde\062" +
    "\uffde\001\002\000\056\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\054\uffdd\055\uffdd\060\uffdd\062\uffdd\001\002\000" +
    "\004\023\026\001\002\000\004\054\042\001\002\000\012" +
    "\007\uffe6\011\uffe6\023\uffe6\063\uffe6\001\002\000\006\054" +
    "\uffe5\055\uffe5\001\002\000\006\021\uffd9\063\uffd9\001\002" +
    "\000\006\021\046\063\uffd4\001\002\000\006\003\u0154\023" +
    "\013\001\002\000\004\063\u0152\001\002\000\012\003\uffd8" +
    "\023\uffd8\063\uffd8\064\uffd8\001\002\000\012\003\060\023" +
    "\013\063\055\064\uffce\001\002\000\006\003\u0148\023\uffc1" +
    "\001\002\000\012\005\uffcb\017\uffcb\023\uffcb\064\uffcb\001" +
    "\002\000\012\005\077\017\uffb2\023\uffb2\064\uffeb\001\002" +
    "\000\012\005\uffd0\017\uffd0\023\uffd0\064\uffd0\001\002\000" +
    "\004\064\074\001\002\000\012\003\065\023\013\063\uffcd" +
    "\064\uffd1\001\002\000\006\054\062\063\uffc7\001\002\000" +
    "\012\003\uffc2\023\uffc2\063\uffc2\064\uffc2\001\002\000\012" +
    "\003\uffbe\023\uffbe\063\uffbe\064\uffbe\001\002\000\004\063" +
    "\064\001\002\000\012\005\uffc6\017\uffc6\023\uffc6\064\uffc6" +
    "\001\002\000\006\054\062\063\uffc9\001\002\000\004\063" +
    "\071\001\002\000\012\005\uffca\017\uffca\023\uffca\064\uffca" +
    "\001\002\000\012\003\uffc3\023\uffc3\063\uffc3\064\uffc3\001" +
    "\002\000\012\005\uffcc\017\uffcc\023\uffcc\064\uffcc\001\002" +
    "\000\004\063\073\001\002\000\012\005\uffc8\017\uffc8\023" +
    "\uffc8\064\uffc8\001\002\000\012\007\uffd7\011\uffd7\023\uffd7" +
    "\063\uffd7\001\002\000\012\005\077\017\uffb2\023\uffb2\064" +
    "\uffeb\001\002\000\004\064\u0145\001\002\000\006\017\uffb3" +
    "\023\uffb3\001\002\000\012\005\077\017\uffb2\023\uffb2\064" +
    "\uffec\001\002\000\012\005\uffe9\017\uffe9\023\uffe9\064\uffe9" +
    "\001\002\000\006\017\104\023\013\001\002\000\004\023" +
    "\uffb1\001\002\000\004\023\uffb0\001\002\000\004\023\uffb9" +
    "\001\002\000\004\023\107\001\002\000\004\057\uffb8\001" +
    "\002\000\004\057\111\001\002\000\010\003\uffb7\023\uffb7" +
    "\060\uffb7\001\002\000\010\003\121\023\013\060\114\001" +
    "\002\000\004\023\uff94\001\002\000\010\003\uffae\023\uffae" +
    "\063\uffae\001\002\000\010\003\uff9b\023\uff9b\063\uff9b\001" +
    "\002\000\006\055\u0140\060\u0141\001\002\000\010\003\uffb6" +
    "\023\uffb6\063\uffb6\001\002\000\006\003\uff99\023\uff99\001" +
    "\002\000\006\055\126\060\127\001\002\000\010\003\uffaf" +
    "\023\uffaf\063\uffaf\001\002\000\006\003\121\023\013\001" +
    "\002\000\006\003\uff9a\023\uff9a\001\002\000\010\003\uff9c" +
    "\023\uff9c\063\uff9c\001\002\000\006\003\uff97\023\uff97\001" +
    "\002\000\010\003\uff95\023\uff95\063\uff95\001\002\000\010" +
    "\003\137\023\013\063\133\001\002\000\004\023\uffa7\001" +
    "\002\000\010\003\uffa8\023\uffa8\063\u0135\001\002\000\026" +
    "\006\uffac\012\uffac\014\uffac\015\uffac\016\uffac\020\uffac\022" +
    "\uffac\023\uffac\063\uffac\064\uffac\001\002\000\026\006\uffad" +
    "\012\uffad\014\uffad\015\uffad\016\uffad\020\uffad\022\uffad\023" +
    "\uffad\063\uffad\064\uffad\001\002\000\026\006\uffaa\012\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\020\uffaa\022\uffaa\023\uffaa\063" +
    "\uffaa\064\uffaa\001\002\000\006\003\137\023\013\001\002" +
    "\000\006\054\u0131\063\u0132\001\002\000\026\006\uffb5\012" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\022\uffb5\023\uffb5" +
    "\063\uffb5\064\uffb5\001\002\000\026\006\152\012\151\014" +
    "\154\015\144\016\150\020\160\022\145\023\146\063\163" +
    "\064\uff9f\001\002\000\024\044\363\045\270\046\266\047" +
    "\236\050\240\051\233\052\366\053\367\057\311\001\002" +
    "\000\004\064\u0129\001\002\000\004\057\u0125\001\002\000" +
    "\004\054\u0124\001\002\000\072\027\uff31\030\uff31\031\uff31" +
    "\032\uff31\033\uff31\034\uff31\035\uff31\036\uff31\037\uff31\040" +
    "\uff31\041\uff31\042\uff31\043\uff31\044\uff31\045\uff31\046\uff31" +
    "\047\uff31\050\uff31\051\uff31\052\uff31\053\uff31\054\uff31\055" +
    "\uff31\056\uff31\057\uff31\060\uff31\061\uff31\062\uff31\001\002" +
    "\000\004\054\u0116\001\002\000\022\013\222\023\146\024" +
    "\035\025\037\026\036\030\213\054\uff74\057\207\001\002" +
    "\000\004\057\u0103\001\002\000\004\054\u0102\001\002\000" +
    "\030\006\uff91\010\uff91\012\uff91\014\uff91\015\uff91\016\uff91" +
    "\020\uff91\022\uff91\023\uff91\063\uff91\064\uff91\001\002\000" +
    "\004\057\373\001\002\000\006\054\uff65\060\uff65\001\002" +
    "\000\006\054\uff64\060\uff64\001\002\000\026\006\uff9d\012" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\020\uff9d\022\uff9d\023\uff9d" +
    "\063\uff9d\064\uff9d\001\002\000\012\003\172\023\146\054" +
    "\uff6c\057\174\001\002\000\030\006\uff66\010\uff66\012\uff66" +
    "\014\uff66\015\uff66\016\uff66\020\uff66\022\uff66\023\uff66\063" +
    "\uff66\064\uff66\001\002\000\026\006\152\012\151\014\154" +
    "\015\144\016\150\020\160\022\145\023\146\063\163\064" +
    "\uffa0\001\002\000\026\006\152\012\151\014\154\015\144" +
    "\016\150\020\160\022\145\023\146\063\163\064\uff9f\001" +
    "\002\000\004\064\165\001\002\000\030\006\uff78\010\uff78" +
    "\012\uff78\014\uff78\015\uff78\016\uff78\020\uff78\022\uff78\023" +
    "\uff78\063\uff78\064\uff78\001\002\000\026\006\uff9e\012\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\020\uff9e\022\uff9e\023\uff9e\063" +
    "\uff9e\064\uff9e\001\002\000\006\054\uff6d\060\uff6d\001\002" +
    "\000\024\044\363\045\270\046\266\047\236\050\240\051" +
    "\233\052\366\053\367\057\311\001\002\000\006\054\uff6e" +
    "\060\uff6e\001\002\000\006\054\343\060\344\001\002\000" +
    "\004\054\330\001\002\000\006\023\146\054\uff6c\001\002" +
    "\000\004\054\176\001\002\000\024\003\uff8a\013\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\030\uff8a\054\uff8a\057\uff8a" +
    "\001\002\000\024\003\220\013\222\023\146\024\035\025" +
    "\037\026\036\030\213\054\212\057\207\001\002\000\060" +
    "\027\uff37\030\uff37\031\uff37\032\uff37\033\uff37\034\uff37\035" +
    "\uff37\036\uff37\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37" +
    "\045\uff37\046\uff37\047\uff37\050\uff37\051\uff37\054\uff37\055" +
    "\uff37\057\311\060\uff37\062\uff37\001\002\000\056\027\uff39" +
    "\030\uff39\031\uff39\032\uff39\033\uff39\034\uff39\035\uff39\036" +
    "\uff39\037\uff39\040\uff39\041\uff39\042\uff39\043\uff39\045\uff39" +
    "\046\uff39\047\uff39\050\uff39\051\uff39\054\uff39\055\uff39\060" +
    "\uff39\062\uff39\001\002\000\032\034\uff42\035\uff42\036\uff42" +
    "\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\054\uff42\055" +
    "\uff42\060\uff42\062\uff42\001\002\000\010\003\uff89\023\uff89" +
    "\060\uff89\001\002\000\042\027\267\030\273\034\uff40\035" +
    "\uff40\036\uff40\037\uff40\040\uff40\041\uff40\042\uff40\043\uff40" +
    "\045\270\046\266\054\uff40\055\uff40\060\uff40\062\uff40\001" +
    "\002\000\006\043\264\054\uff4e\001\002\000\012\042\uff47" +
    "\043\uff47\054\uff47\060\uff47\001\002\000\020\013\222\023" +
    "\146\024\035\025\037\026\036\030\213\057\207\001\002" +
    "\000\026\034\260\035\253\036\255\037\254\040\257\041" +
    "\251\042\uff44\043\uff44\054\uff44\060\uff44\001\002\000\042" +
    "\027\uff3d\030\uff3d\034\uff3d\035\uff3d\036\uff3d\037\uff3d\040" +
    "\uff3d\041\uff3d\042\uff3d\043\uff3d\045\uff3d\046\uff3d\054\uff3d" +
    "\055\uff3d\060\uff3d\062\uff3d\001\002\000\010\003\uff72\023" +
    "\uff72\060\uff72\001\002\000\016\013\222\023\146\024\035" +
    "\025\037\026\036\057\207\001\002\000\004\054\247\001" +
    "\002\000\056\027\uff36\030\uff36\031\uff36\032\uff36\033\uff36" +
    "\034\uff36\035\uff36\036\uff36\037\uff36\040\uff36\041\uff36\042" +
    "\uff36\043\uff36\045\uff36\046\uff36\047\uff36\050\uff36\051\uff36" +
    "\054\uff36\055\uff36\060\uff36\062\uff36\001\002\000\012\042" +
    "\245\043\uff49\054\uff49\060\uff49\001\002\000\056\027\uff3b" +
    "\030\uff3b\031\234\032\237\033\242\034\uff3b\035\uff3b\036" +
    "\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b\045\uff3b" +
    "\046\uff3b\047\236\050\240\051\233\054\uff3b\055\uff3b\060" +
    "\uff3b\062\uff3b\001\002\000\004\054\232\001\002\000\056" +
    "\027\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034\uff38\035" +
    "\uff38\036\uff38\037\uff38\040\uff38\041\uff38\042\uff38\043\uff38" +
    "\045\uff38\046\uff38\047\uff38\050\uff38\051\uff38\054\uff38\055" +
    "\uff38\060\uff38\062\uff38\001\002\000\004\023\013\001\002" +
    "\000\010\043\uff4a\054\uff4a\060\uff4a\001\002\000\042\027" +
    "\uff3e\030\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e\040\uff3e" +
    "\041\uff3e\042\uff3e\043\uff3e\045\uff3e\046\uff3e\054\uff3e\055" +
    "\uff3e\060\uff3e\062\uff3e\001\002\000\060\027\uff32\030\uff32" +
    "\031\uff32\032\uff32\033\uff32\034\uff32\035\uff32\036\uff32\037" +
    "\uff32\040\uff32\041\uff32\042\uff32\043\uff32\045\uff32\046\uff32" +
    "\047\uff32\050\uff32\051\uff32\054\uff32\055\uff32\060\uff32\061" +
    "\227\062\uff32\001\002\000\056\027\uff35\030\uff35\031\uff35" +
    "\032\uff35\033\uff35\034\uff35\035\uff35\036\uff35\037\uff35\040" +
    "\uff35\041\uff35\042\uff35\043\uff35\045\uff35\046\uff35\047\uff35" +
    "\050\uff35\051\uff35\054\uff35\055\uff35\060\uff35\062\uff35\001" +
    "\002\000\020\013\222\023\146\024\035\025\037\026\036" +
    "\030\213\057\207\001\002\000\004\062\231\001\002\000" +
    "\056\027\uff33\030\uff33\031\uff33\032\uff33\033\uff33\034\uff33" +
    "\035\uff33\036\uff33\037\uff33\040\uff33\041\uff33\042\uff33\043" +
    "\uff33\045\uff33\046\uff33\047\uff33\050\uff33\051\uff33\054\uff33" +
    "\055\uff33\060\uff33\062\uff33\001\002\000\010\003\uff71\023" +
    "\uff71\060\uff71\001\002\000\022\003\uff15\013\uff15\023\uff15" +
    "\024\uff15\025\uff15\026\uff15\030\uff15\057\uff15\001\002\000" +
    "\016\013\uff1a\023\uff1a\024\uff1a\025\uff1a\026\uff1a\057\uff1a" +
    "\001\002\000\016\013\222\023\146\024\035\025\037\026" +
    "\036\057\207\001\002\000\022\003\uff17\013\uff17\023\uff17" +
    "\024\uff17\025\uff17\026\uff17\030\uff17\057\uff17\001\002\000" +
    "\016\013\uff19\023\uff19\024\uff19\025\uff19\026\uff19\057\uff19" +
    "\001\002\000\022\003\uff16\013\uff16\023\uff16\024\uff16\025" +
    "\uff16\026\uff16\030\uff16\057\uff16\001\002\000\016\013\222" +
    "\023\146\024\035\025\037\026\036\057\207\001\002\000" +
    "\016\013\uff18\023\uff18\024\uff18\025\uff18\026\uff18\057\uff18" +
    "\001\002\000\056\027\uff3a\030\uff3a\031\uff3a\032\uff3a\033" +
    "\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a\041\uff3a" +
    "\042\uff3a\043\uff3a\045\uff3a\046\uff3a\047\uff3a\050\uff3a\051" +
    "\uff3a\054\uff3a\055\uff3a\060\uff3a\062\uff3a\001\002\000\042" +
    "\027\uff3c\030\uff3c\034\uff3c\035\uff3c\036\uff3c\037\uff3c\040" +
    "\uff3c\041\uff3c\042\uff3c\043\uff3c\045\uff3c\046\uff3c\054\uff3c" +
    "\055\uff3c\060\uff3c\062\uff3c\001\002\000\020\013\222\023" +
    "\146\024\035\025\037\026\036\030\213\057\207\001\002" +
    "\000\012\042\uff48\043\uff48\054\uff48\060\uff48\001\002\000" +
    "\010\003\uff73\023\uff73\060\uff73\001\002\000\032\034\uff43" +
    "\035\uff43\036\uff43\037\uff43\040\uff43\041\uff43\042\uff43\043" +
    "\uff43\054\uff43\055\uff43\060\uff43\062\uff43\001\002\000\020" +
    "\013\uff1f\023\uff1f\024\uff1f\025\uff1f\026\uff1f\030\uff1f\057" +
    "\uff1f\001\002\000\012\042\uff46\043\uff46\054\uff46\060\uff46" +
    "\001\002\000\020\013\uff23\023\uff23\024\uff23\025\uff23\026" +
    "\uff23\030\uff23\057\uff23\001\002\000\020\013\uff20\023\uff20" +
    "\024\uff20\025\uff20\026\uff20\030\uff20\057\uff20\001\002\000" +
    "\020\013\uff21\023\uff21\024\uff21\025\uff21\026\uff21\030\uff21" +
    "\057\uff21\001\002\000\020\013\222\023\146\024\035\025" +
    "\037\026\036\030\213\057\207\001\002\000\020\013\uff22" +
    "\023\uff22\024\uff22\025\uff22\026\uff22\030\uff22\057\uff22\001" +
    "\002\000\020\013\uff24\023\uff24\024\uff24\025\uff24\026\uff24" +
    "\030\uff24\057\uff24\001\002\000\012\042\uff45\043\uff45\054" +
    "\uff45\060\uff45\001\002\000\004\060\263\001\002\000\056" +
    "\027\uff34\030\uff34\031\uff34\032\uff34\033\uff34\034\uff34\035" +
    "\uff34\036\uff34\037\uff34\040\uff34\041\uff34\042\uff34\043\uff34" +
    "\045\uff34\046\uff34\047\uff34\050\uff34\051\uff34\054\uff34\055" +
    "\uff34\060\uff34\062\uff34\001\002\000\020\013\222\023\146" +
    "\024\035\025\037\026\036\030\213\057\207\001\002\000" +
    "\010\043\uff4b\054\uff4b\060\uff4b\001\002\000\022\003\uff1b" +
    "\013\uff1b\023\uff1b\024\uff1b\025\uff1b\026\uff1b\030\uff1b\057" +
    "\uff1b\001\002\000\016\013\uff1e\023\uff1e\024\uff1e\025\uff1e" +
    "\026\uff1e\057\uff1e\001\002\000\022\003\uff1c\013\uff1c\023" +
    "\uff1c\024\uff1c\025\uff1c\026\uff1c\030\uff1c\057\uff1c\001\002" +
    "\000\016\013\222\023\146\024\035\025\037\026\036\057" +
    "\207\001\002\000\016\013\222\023\146\024\035\025\037" +
    "\026\036\057\207\001\002\000\016\013\uff1d\023\uff1d\024" +
    "\uff1d\025\uff1d\026\uff1d\057\uff1d\001\002\000\042\027\uff3f" +
    "\030\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040\uff3f\041" +
    "\uff3f\042\uff3f\043\uff3f\045\uff3f\046\uff3f\054\uff3f\055\uff3f" +
    "\060\uff3f\062\uff3f\001\002\000\032\034\uff41\035\uff41\036" +
    "\uff41\037\uff41\040\uff41\041\uff41\042\uff41\043\uff41\054\uff41" +
    "\055\uff41\060\uff41\062\uff41\001\002\000\010\003\302\023" +
    "\146\060\277\001\002\000\024\006\uff69\012\uff69\014\uff69" +
    "\015\uff69\016\uff69\020\uff69\022\uff69\023\uff69\063\uff69\001" +
    "\002\000\004\060\310\001\002\000\004\060\307\001\002" +
    "\000\004\060\306\001\002\000\024\006\uff88\012\uff88\014" +
    "\uff88\015\uff88\016\uff88\020\uff88\022\uff88\023\uff88\063\uff88" +
    "\001\002\000\024\006\152\012\151\014\154\015\144\016" +
    "\150\020\160\022\145\023\146\063\163\001\002\000\030" +
    "\006\uff87\010\uff87\012\uff87\014\uff87\015\uff87\016\uff87\020" +
    "\uff87\022\uff87\023\uff87\063\uff87\064\uff87\001\002\000\024" +
    "\006\uff68\012\uff68\014\uff68\015\uff68\016\uff68\020\uff68\022" +
    "\uff68\023\uff68\063\uff68\001\002\000\024\006\uff6b\012\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\020\uff6b\022\uff6b\023\uff6b\063" +
    "\uff6b\001\002\000\024\006\uff6a\012\uff6a\014\uff6a\015\uff6a" +
    "\016\uff6a\020\uff6a\022\uff6a\023\uff6a\063\uff6a\001\002\000" +
    "\024\003\312\013\uff60\023\uff60\024\uff60\025\uff60\026\uff60" +
    "\030\uff60\057\uff60\060\uff60\001\002\000\004\060\327\001" +
    "\002\000\022\013\222\023\146\024\035\025\037\026\036" +
    "\030\213\057\207\060\uff5c\001\002\000\006\055\uff55\060" +
    "\uff55\001\002\000\004\060\317\001\002\000\004\060\uff5d" +
    "\001\002\000\056\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033" +
    "\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f" +
    "\042\uff5f\043\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051" +
    "\uff5f\054\uff5f\055\uff5f\060\uff5f\062\uff5f\001\002\000\006" +
    "\055\321\060\uff52\001\002\000\020\013\222\023\146\024" +
    "\035\025\037\026\036\030\213\057\207\001\002\000\006" +
    "\055\321\060\uff53\001\002\000\004\060\uff54\001\002\000" +
    "\006\055\uff50\060\uff50\001\002\000\006\055\uff51\060\uff51" +
    "\001\002\000\006\055\uff4f\060\uff4f\001\002\000\056\027" +
    "\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e" +
    "\036\uff5e\037\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\045" +
    "\uff5e\046\uff5e\047\uff5e\050\uff5e\051\uff5e\054\uff5e\055\uff5e" +
    "\060\uff5e\062\uff5e\001\002\000\022\003\332\013\222\023" +
    "\146\024\035\025\037\026\036\030\213\057\207\001\002" +
    "\000\004\054\340\001\002\000\004\054\333\001\002\000" +
    "\010\003\335\023\146\060\uff6c\001\002\000\004\060\337" +
    "\001\002\000\004\060\336\001\002\000\030\006\uff81\010" +
    "\uff81\012\uff81\014\uff81\015\uff81\016\uff81\020\uff81\022\uff81" +
    "\023\uff81\063\uff81\064\uff81\001\002\000\030\006\uff85\010" +
    "\uff85\012\uff85\014\uff85\015\uff85\016\uff85\020\uff85\022\uff85" +
    "\023\uff85\063\uff85\064\uff85\001\002\000\004\003\341\001" +
    "\002\000\004\060\342\001\002\000\030\006\uff84\010\uff84" +
    "\012\uff84\014\uff84\015\uff84\016\uff84\020\uff84\022\uff84\023" +
    "\uff84\063\uff84\064\uff84\001\002\000\022\003\346\013\222" +
    "\023\146\024\035\025\037\026\036\030\213\057\207\001" +
    "\002\000\030\006\uff7e\010\uff7e\012\uff7e\014\uff7e\015\uff7e" +
    "\016\uff7e\020\uff7e\022\uff7e\023\uff7e\063\uff7e\064\uff7e\001" +
    "\002\000\004\054\355\001\002\000\006\054\347\060\350" +
    "\001\002\000\010\003\352\023\146\060\uff6c\001\002\000" +
    "\030\006\uff7f\010\uff7f\012\uff7f\014\uff7f\015\uff7f\016\uff7f" +
    "\020\uff7f\022\uff7f\023\uff7f\063\uff7f\064\uff7f\001\002\000" +
    "\004\060\354\001\002\000\004\060\353\001\002\000\030" +
    "\006\uff80\010\uff80\012\uff80\014\uff80\015\uff80\016\uff80\020" +
    "\uff80\022\uff80\023\uff80\063\uff80\064\uff80\001\002\000\030" +
    "\006\uff83\010\uff83\012\uff83\014\uff83\015\uff83\016\uff83\020" +
    "\uff83\022\uff83\023\uff83\063\uff83\064\uff83\001\002\000\010" +
    "\003\357\023\146\060\uff6c\001\002\000\004\060\361\001" +
    "\002\000\004\060\360\001\002\000\030\006\uff82\010\uff82" +
    "\012\uff82\014\uff82\015\uff82\016\uff82\020\uff82\022\uff82\023" +
    "\uff82\063\uff82\064\uff82\001\002\000\030\006\uff86\010\uff86" +
    "\012\uff86\014\uff86\015\uff86\016\uff86\020\uff86\022\uff86\023" +
    "\uff86\063\uff86\064\uff86\001\002\000\022\003\uff25\013\uff25" +
    "\023\uff25\024\uff25\025\uff25\026\uff25\030\uff25\057\uff25\001" +
    "\002\000\022\003\uff27\013\uff27\023\uff27\024\uff27\025\uff27" +
    "\026\uff27\030\uff27\057\uff27\001\002\000\022\003\uff26\013" +
    "\uff26\023\uff26\024\uff26\025\uff26\026\uff26\030\uff26\057\uff26" +
    "\001\002\000\020\013\uff5b\023\uff5b\024\uff5b\025\uff5b\026" +
    "\uff5b\030\uff5b\057\uff5b\001\002\000\006\054\uff62\060\uff62" +
    "\001\002\000\006\054\uff61\060\uff61\001\002\000\006\054" +
    "\uff63\060\uff63\001\002\000\020\013\222\023\146\024\035" +
    "\025\037\026\036\030\213\057\207\001\002\000\006\054" +
    "\uff5a\060\uff5a\001\002\000\020\013\222\023\146\024\035" +
    "\025\037\026\036\030\213\057\207\001\002\000\006\055" +
    "\375\060\uff6f\001\002\000\004\024\u0101\001\002\000\004" +
    "\060\377\001\002\000\004\054\u0100\001\002\000\030\006" +
    "\uff79\010\uff79\012\uff79\014\uff79\015\uff79\016\uff79\020\uff79" +
    "\022\uff79\023\uff79\063\uff79\064\uff79\001\002\000\004\060" +
    "\uff70\001\002\000\030\006\uff7d\010\uff7d\012\uff7d\014\uff7d" +
    "\015\uff7d\016\uff7d\020\uff7d\022\uff7d\023\uff7d\063\uff7d\064" +
    "\uff7d\001\002\000\022\003\u0106\013\222\023\146\024\035" +
    "\025\037\026\036\030\213\057\207\001\002\000\006\043" +
    "\264\060\u0112\001\002\000\024\006\uff90\012\uff90\014\uff90" +
    "\015\uff90\016\uff90\020\uff90\022\uff90\023\uff90\063\uff90\001" +
    "\002\000\026\006\uff8d\012\uff8d\014\uff8d\015\uff8d\016\uff8d" +
    "\020\uff8d\022\uff8d\023\uff8d\060\u0107\063\uff8d\001\002\000" +
    "\024\006\uff4c\012\uff4c\014\uff4c\015\uff4c\016\uff4c\020\uff4c" +
    "\022\uff4c\023\uff4c\063\uff4c\001\002\000\024\006\152\012" +
    "\151\014\154\015\144\016\150\020\160\022\145\023\146" +
    "\063\163\001\002\000\030\006\uff8c\010\uff8c\012\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\020\uff8c\022\uff8c\023\uff8c\063\uff8c" +
    "\064\uff8c\001\002\000\030\006\uff76\010\u010b\012\uff76\014" +
    "\uff76\015\uff76\016\uff76\020\uff76\022\uff76\023\uff76\063\uff76" +
    "\064\uff76\001\002\000\024\006\152\012\151\014\154\015" +
    "\144\016\150\020\160\022\145\023\146\063\163\001\002" +
    "\000\030\006\uff8b\010\uff8b\012\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\020\uff8b\022\uff8b\023\uff8b\063\uff8b\064\uff8b\001\002" +
    "\000\030\006\uff77\010\uff77\012\uff77\014\uff77\015\uff77\016" +
    "\uff77\020\uff77\022\uff77\023\uff77\063\uff77\064\uff77\001\002" +
    "\000\024\006\152\012\151\014\154\015\144\016\150\020" +
    "\160\022\145\023\146\063\163\001\002\000\030\006\uff8f" +
    "\010\uff8f\012\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f\022" +
    "\uff8f\023\uff8f\063\uff8f\064\uff8f\001\002\000\030\006\uff76" +
    "\010\u010b\012\uff76\014\uff76\015\uff76\016\uff76\020\uff76\022" +
    "\uff76\023\uff76\063\uff76\064\uff76\001\002\000\030\006\uff8e" +
    "\010\uff8e\012\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e\022" +
    "\uff8e\023\uff8e\063\uff8e\064\uff8e\001\002\000\024\006\uff4d" +
    "\012\uff4d\014\uff4d\015\uff4d\016\uff4d\020\uff4d\022\uff4d\023" +
    "\uff4d\063\uff4d\001\002\000\004\054\u0115\001\002\000\004" +
    "\054\uff75\001\002\000\030\006\uff7b\010\uff7b\012\uff7b\014" +
    "\uff7b\015\uff7b\016\uff7b\020\uff7b\022\uff7b\023\uff7b\063\uff7b" +
    "\064\uff7b\001\002\000\030\006\uff67\010\uff67\012\uff67\014" +
    "\uff67\015\uff67\016\uff67\020\uff67\022\uff67\023\uff67\063\uff67" +
    "\064\uff67\001\002\000\072\027\uff2e\030\uff2e\031\uff2e\032" +
    "\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e" +
    "\041\uff2e\042\uff2e\043\uff2e\044\uff2e\045\uff2e\046\uff2e\047" +
    "\uff2e\050\uff2e\051\uff2e\052\uff2e\053\uff2e\054\uff2e\055\uff2e" +
    "\056\u011c\057\uff2e\060\uff2e\061\u011b\062\uff2e\001\002\000" +
    "\066\027\uff30\030\uff30\031\uff30\032\uff30\033\uff30\034\uff30" +
    "\035\uff30\036\uff30\037\uff30\040\uff30\041\uff30\042\uff30\043" +
    "\uff30\044\uff30\045\uff30\046\uff30\047\uff30\050\uff30\051\uff30" +
    "\052\uff30\053\uff30\054\uff30\055\uff30\057\uff30\060\uff30\062" +
    "\uff30\001\002\000\072\027\uff2f\030\uff2f\031\uff2f\032\uff2f" +
    "\033\uff2f\034\uff2f\035\uff2f\036\uff2f\037\uff2f\040\uff2f\041" +
    "\uff2f\042\uff2f\043\uff2f\044\uff2f\045\uff2f\046\uff2f\047\uff2f" +
    "\050\uff2f\051\uff2f\052\uff2f\053\uff2f\054\uff2f\055\uff2f\056" +
    "\u011c\057\uff2f\060\uff2f\061\u011b\062\uff2f\001\002\000\072" +
    "\027\uff2c\030\uff2c\031\uff2c\032\uff2c\033\uff2c\034\uff2c\035" +
    "\uff2c\036\uff2c\037\uff2c\040\uff2c\041\uff2c\042\uff2c\043\uff2c" +
    "\044\uff2c\045\uff2c\046\uff2c\047\uff2c\050\uff2c\051\uff2c\052" +
    "\uff2c\053\uff2c\054\uff2c\055\uff2c\056\uff2c\057\uff2c\060\uff2c" +
    "\061\uff2c\062\uff2c\001\002\000\022\003\u011f\013\uff2a\023" +
    "\uff2a\024\uff2a\025\uff2a\026\uff2a\030\uff2a\057\uff2a\001\002" +
    "\000\004\023\u011d\001\002\000\072\027\uff2b\030\uff2b\031" +
    "\uff2b\032\uff2b\033\uff2b\034\uff2b\035\uff2b\036\uff2b\037\uff2b" +
    "\040\uff2b\041\uff2b\042\uff2b\043\uff2b\044\uff2b\045\uff2b\046" +
    "\uff2b\047\uff2b\050\uff2b\051\uff2b\052\uff2b\053\uff2b\054\uff2b" +
    "\055\uff2b\056\uff2b\057\uff2b\060\uff2b\061\uff2b\062\uff2b\001" +
    "\002\000\020\013\222\023\146\024\035\025\037\026\036" +
    "\030\213\057\207\001\002\000\004\062\u0120\001\002\000" +
    "\072\027\uff28\030\uff28\031\uff28\032\uff28\033\uff28\034\uff28" +
    "\035\uff28\036\uff28\037\uff28\040\uff28\041\uff28\042\uff28\043" +
    "\uff28\044\uff28\045\uff28\046\uff28\047\uff28\050\uff28\051\uff28" +
    "\052\uff28\053\uff28\054\uff28\055\uff28\056\uff28\057\uff28\060" +
    "\uff28\061\uff28\062\uff28\001\002\000\004\062\u0122\001\002" +
    "\000\072\027\uff29\030\uff29\031\uff29\032\uff29\033\uff29\034" +
    "\uff29\035\uff29\036\uff29\037\uff29\040\uff29\041\uff29\042\uff29" +
    "\043\uff29\044\uff29\045\uff29\046\uff29\047\uff29\050\uff29\051" +
    "\uff29\052\uff29\053\uff29\054\uff29\055\uff29\056\uff29\057\uff29" +
    "\060\uff29\061\uff29\062\uff29\001\002\000\072\027\uff2d\030" +
    "\uff2d\031\uff2d\032\uff2d\033\uff2d\034\uff2d\035\uff2d\036\uff2d" +
    "\037\uff2d\040\uff2d\041\uff2d\042\uff2d\043\uff2d\044\uff2d\045" +
    "\uff2d\046\uff2d\047\uff2d\050\uff2d\051\uff2d\052\uff2d\053\uff2d" +
    "\054\uff2d\055\uff2d\056\uff2d\057\uff2d\060\uff2d\061\uff2d\062" +
    "\uff2d\001\002\000\030\006\uff7c\010\uff7c\012\uff7c\014\uff7c" +
    "\015\uff7c\016\uff7c\020\uff7c\022\uff7c\023\uff7c\063\uff7c\064" +
    "\uff7c\001\002\000\004\023\146\001\002\000\004\060\u0127" +
    "\001\002\000\004\054\u0128\001\002\000\030\006\uff7a\010" +
    "\uff7a\012\uff7a\014\uff7a\015\uff7a\016\uff7a\020\uff7a\022\uff7a" +
    "\023\uff7a\063\uff7a\064\uff7a\001\002\000\012\005\uffb4\017" +
    "\uffb4\023\uffb4\064\uffb4\001\002\000\022\003\uff59\013\uff59" +
    "\023\uff59\024\uff59\025\uff59\026\uff59\030\uff59\057\uff59\001" +
    "\002\000\022\003\u012e\013\222\023\146\024\035\025\037" +
    "\026\036\030\213\057\207\001\002\000\030\006\uff58\010" +
    "\uff58\012\uff58\014\uff58\015\uff58\016\uff58\020\uff58\022\uff58" +
    "\023\uff58\063\uff58\064\uff58\001\002\000\004\054\u0130\001" +
    "\002\000\004\054\u012f\001\002\000\030\006\uff56\010\uff56" +
    "\012\uff56\014\uff56\015\uff56\016\uff56\020\uff56\022\uff56\023" +
    "\uff56\063\uff56\064\uff56\001\002\000\030\006\uff57\010\uff57" +
    "\012\uff57\014\uff57\015\uff57\016\uff57\020\uff57\022\uff57\023" +
    "\uff57\063\uff57\064\uff57\001\002\000\010\003\uffa5\023\uffa5" +
    "\063\uffa5\001\002\000\026\006\uffa2\012\uffa2\014\uffa2\015" +
    "\uffa2\016\uffa2\020\uffa2\022\uffa2\023\uffa2\063\uffa2\064\uffa2" +
    "\001\002\000\026\006\uffab\012\uffab\014\uffab\015\uffab\016" +
    "\uffab\020\uffab\022\uffab\023\uffab\063\uffab\064\uffab\001\002" +
    "\000\010\003\uffa9\023\uffa9\063\u0135\001\002\000\026\006" +
    "\uffa1\012\uffa1\014\uffa1\015\uffa1\016\uffa1\020\uffa1\022\uffa1" +
    "\023\uffa1\063\uffa1\064\uffa1\001\002\000\004\023\u0139\001" +
    "\002\000\006\054\uffa3\055\uffa3\001\002\000\006\054\u013e" +
    "\055\u013d\001\002\000\012\054\uffda\055\uffda\060\uffda\061" +
    "\u013b\001\002\000\010\054\uffdc\055\uffdc\060\uffdc\001\002" +
    "\000\004\062\u013c\001\002\000\010\054\uffdb\055\uffdb\060" +
    "\uffdb\001\002\000\004\023\u0139\001\002\000\010\003\uffa6" +
    "\023\uffa6\063\uffa6\001\002\000\006\054\uffa4\055\uffa4\001" +
    "\002\000\006\003\uff98\023\uff98\001\002\000\010\003\uff96" +
    "\023\uff96\063\uff96\001\002\000\004\023\u0139\001\002\000" +
    "\006\055\uff93\060\uff93\001\002\000\012\005\uffea\017\uffea" +
    "\023\uffea\064\uffea\001\002\000\004\064\uffcf\001\002\000" +
    "\004\064\u0147\001\002\000\004\064\uffd2\001\002\000\006" +
    "\054\u014f\063\uffc5\001\002\000\004\023\u0139\001\002\000" +
    "\006\054\uffbc\055\uffbc\001\002\000\006\054\u014d\055\u014c" +
    "\001\002\000\004\023\u0139\001\002\000\012\003\uffc0\023" +
    "\uffc0\063\uffc0\064\uffc0\001\002\000\006\054\uffbd\055\uffbd" +
    "\001\002\000\012\003\uffbf\023\uffbf\063\uffbf\064\uffbf\001" +
    "\002\000\004\063\u0151\001\002\000\012\005\uffc4\017\uffc4" +
    "\023\uffc4\064\uffc4\001\002\000\012\003\uffd3\023\uffd3\063" +
    "\uffd3\064\uffd3\001\002\000\004\063\u0156\001\002\000\004" +
    "\063\u0155\001\002\000\012\003\uffd5\023\uffd5\063\uffd5\064" +
    "\uffd5\001\002\000\012\003\uffd6\023\uffd6\063\uffd6\064\uffd6" +
    "\001\002\000\012\007\ufffb\011\ufffb\023\ufffb\063\ufffb\001" +
    "\002\000\012\005\077\017\uffb2\023\uffb2\064\uffeb\001\002" +
    "\000\004\064\u015a\001\002\000\004\002\uffff\001\002\000" +
    "\006\003\u015d\023\u0139\001\002\000\006\054\u0167\055\u0166" +
    "\001\002\000\006\054\u0165\055\u0164\001\002\000\006\003" +
    "\uffef\023\uffef\001\002\000\012\007\ufff5\011\ufff5\023\ufff5" +
    "\063\ufff5\001\002\000\006\003\u015d\023\u0139\001\002\000" +
    "\012\007\ufff3\011\ufff3\023\ufff3\063\ufff3\001\002\000\006" +
    "\003\ufff0\023\ufff0\001\002\000\012\007\ufff4\011\ufff4\023" +
    "\ufff4\063\ufff4\001\002\000\006\003\uffed\023\uffed\001\002" +
    "\000\012\007\ufff1\011\ufff1\023\ufff1\063\ufff1\001\002\000" +
    "\006\003\uffee\023\uffee\001\002\000\012\007\ufff2\011\ufff2" +
    "\023\ufff2\063\ufff2\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0166\000\006\002\003\142\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\143\007" +
    "\001\001\000\020\003\011\004\016\005\015\006\013\011" +
    "\017\027\014\061\010\001\001\000\004\144\u015a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\u0156\006\013" +
    "\011\017\027\014\061\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\022\001\001\000\004\145\023" +
    "\001\001\000\006\012\024\013\026\001\001\000\004\146" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\032\015\031\016\030\017\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\147\044\001\001\000\006\026" +
    "\047\151\046\001\001\000\004\061\u0152\001\001\000\002" +
    "\001\001\000\004\150\050\001\001\000\016\031\056\032" +
    "\060\035\055\036\053\037\052\061\051\001\001\000\004" +
    "\157\u0148\001\001\000\002\001\001\000\012\007\u0145\010" +
    "\077\040\100\041\101\001\001\000\004\152\074\001\001" +
    "\000\002\001\001\000\012\032\067\037\066\061\051\153" +
    "\065\001\001\000\004\155\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\154\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\075\010\077" +
    "\040\100\041\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\u0143\041\101\001\001\000\002\001\001" +
    "\000\006\042\104\061\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\160\105\001\001\000\002\001\001" +
    "\000\004\161\107\001\001\000\002\001\001\000\004\162" +
    "\111\001\001\000\020\053\122\054\115\055\116\056\117" +
    "\057\121\060\114\061\112\001\001\000\004\166\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\163\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\054\115\056\123\060\124" +
    "\061\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\043\137\044\133" +
    "\045\131\046\135\050\134\061\130\001\001\000\004\165" +
    "\u0135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\045\u0133\050\u0132\061" +
    "\130\001\001\000\002\001\001\000\004\164\140\001\001" +
    "\000\024\051\142\052\161\062\156\067\146\075\152\103" +
    "\160\104\154\105\155\130\141\001\001\000\012\106\367" +
    "\134\u0129\137\363\141\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\202\u0116\001\001" +
    "\000\002\001\001\000\036\014\032\015\031\016\030\017" +
    "\214\064\u0112\105\220\117\u0113\120\201\121\203\122\223" +
    "\123\210\124\216\125\200\130\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\067\170\101\166\102\172\104\154\105\155\130\167" +
    "\001\001\000\002\001\001\000\020\062\165\067\146\075" +
    "\152\103\160\104\154\105\155\130\141\001\001\000\024" +
    "\051\163\052\161\062\156\067\146\075\152\103\160\104" +
    "\154\105\155\130\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\106" +
    "\367\134\364\137\363\141\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\067\170\101" +
    "\166\102\174\104\154\105\155\130\167\001\001\000\002" +
    "\001\001\000\004\173\176\001\001\000\050\014\032\015" +
    "\031\016\030\017\214\077\202\105\220\111\213\112\204" +
    "\113\222\114\215\115\205\117\207\120\201\121\203\122" +
    "\223\123\210\124\216\125\200\130\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\174" +
    "\275\001\001\000\006\136\271\137\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\014\032\015\031\016" +
    "\030\017\214\105\220\117\261\120\201\121\203\122\223" +
    "\123\210\124\216\125\200\130\177\001\001\000\006\116" +
    "\251\135\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\014\032\015\031\016\030\017\214\105\220\120" +
    "\247\121\203\122\223\123\210\124\216\125\200\130\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\140\240\141\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\127\225\001\001\000\002" +
    "\001\001\000\034\014\032\015\031\016\030\017\214\105" +
    "\220\117\227\120\201\121\203\122\223\123\210\124\216" +
    "\125\200\130\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\014\032\015\031\016\030\017\214\105\220\123" +
    "\243\124\216\125\200\130\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\032\015" +
    "\031\016\030\017\214\105\220\125\242\130\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\014\032\015\031\016\030\017\214\105\220\115\245" +
    "\117\207\120\201\121\203\122\223\123\210\124\216\125" +
    "\200\130\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\032\015\031\016\030\017\214\105\220\117\260\120" +
    "\201\121\203\122\223\123\210\124\216\125\200\130\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\014\032" +
    "\015\031\016\030\017\214\105\220\113\264\114\215\115" +
    "\205\117\207\120\201\121\203\122\223\123\210\124\216" +
    "\125\200\130\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\014\032" +
    "\015\031\016\030\017\214\105\220\120\274\121\203\122" +
    "\223\123\210\124\216\125\200\130\177\001\001\000\026" +
    "\014\032\015\031\016\030\017\214\105\220\122\273\123" +
    "\210\124\216\125\200\130\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\067\300\100" +
    "\302\101\277\104\154\105\155\130\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\175\303\001\001\000\020\062\304\067\146" +
    "\075\152\103\160\104\154\105\155\130\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\176\312\001\001\000\002\001\001\000" +
    "\040\014\032\015\031\016\030\017\214\070\314\071\315" +
    "\105\220\117\313\120\201\121\203\122\223\123\210\124" +
    "\216\125\200\130\177\001\001\000\004\201\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\072\322\073\321\074\323\001\001\000\034\014\032" +
    "\015\031\016\030\017\214\105\220\117\325\120\201\121" +
    "\203\122\223\123\210\124\216\125\200\130\177\001\001" +
    "\000\004\074\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\014\032\015\031\016\030\017\214\105\220\111" +
    "\330\112\204\113\222\114\215\115\205\117\207\120\201" +
    "\121\203\122\223\123\210\124\216\125\200\130\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\067\170" +
    "\101\166\102\333\104\154\105\155\130\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\014\032\015\031\016\030\017\214\105\220" +
    "\111\344\112\204\113\222\114\215\115\205\117\207\120" +
    "\201\121\203\122\223\123\210\124\216\125\200\130\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\067\170\101\166\102\350\104\154\105\155" +
    "\130\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\067\170\101\166\102\355\104\154\105\155\130\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\177\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\014\032\015" +
    "\031\016\030\017\214\105\220\117\371\120\201\121\203" +
    "\122\223\123\210\124\216\125\200\130\177\001\001\000" +
    "\002\001\001\000\034\014\032\015\031\016\030\017\214" +
    "\105\220\117\373\120\201\121\203\122\223\123\210\124" +
    "\216\125\200\130\177\001\001\000\004\066\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\014\032\015\031\016\030\017\214\065\u0104\105\220\112" +
    "\u0103\113\222\114\215\115\205\117\207\120\201\121\203" +
    "\122\223\123\210\124\216\125\200\130\177\001\001\000" +
    "\002\001\001\000\004\167\u010d\001\001\000\004\171\u0107" +
    "\001\001\000\002\001\001\000\020\062\u0108\067\146\075" +
    "\152\103\160\104\154\105\155\130\141\001\001\000\004" +
    "\172\u0109\001\001\000\004\063\u010b\001\001\000\020\062" +
    "\u010c\067\146\075\152\103\160\104\154\105\155\130\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\062" +
    "\u010e\067\146\075\152\103\160\104\154\105\155\130\141" +
    "\001\001\000\004\170\u010f\001\001\000\004\063\u0110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\131\u0117\132\u0118\133\u0119\001\001\000\002\001\001" +
    "\000\004\133\u0122\001\001\000\002\001\001\000\004\203" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\032\015\031\016\030\017\214\105\220\117\u0120\120" +
    "\201\121\203\122\223\123\210\124\216\125\200\130\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\130\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\200\u012a" +
    "\001\001\000\036\014\032\015\031\016\030\017\214\105" +
    "\220\107\u012b\117\u012c\120\201\121\203\122\223\123\210" +
    "\124\216\125\200\130\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\u0136" +
    "\047\u0137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u0139\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u013e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\156\u014f\001\001\000\006\020\u0149\033\u014a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u014d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u0158\010\077" +
    "\040\100\041\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\u015b\021\u015e\022\u015f\023\u0160\024\u015d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\u015b\023\u0162\024\u0161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    Tab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null)
        log.debug(s.toString() + " " + s.value.toString());
    return s;

    }



    public static class DumpUpgradeSymbolTableVisitor extends SymbolTableVisitor
    {
        protected StringBuilder output = new StringBuilder();
        protected final String indent = "   ";
        protected StringBuilder currentIndent = new StringBuilder();

        protected void nextIndentationLevel() {
            currentIndent.append(indent);
        }

        protected void previousIndentationLevel() {
            if (currentIndent.length() > 0)
                currentIndent.setLength(currentIndent.length()-indent.length());
        }


        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitObjNode(symboltable.Obj)
         */
        @Override
        public void visitObjNode(Obj objToVisit) {
            //output.append("[");
            switch (objToVisit.getKind()) {
            case Obj.Con:  output.append("Con "); break;
            case Obj.Var:  output.append("Var "); break;
            case Obj.Type: output.append("Type "); break;
            case Obj.Meth: output.append("Meth "); break;
            case Obj.Fld:  output.append("Fld "); break;
            case Obj.Prog: output.append("Prog "); break;
            }

            output.append(objToVisit.getName());
            output.append(": ");

            if ( (objToVisit.getKind() == Obj.Meth) && (objToVisit.getType().getKind() == Struct.Class))
            {
                output.append("Class ");
                output.append(objToVisit.getType());
            }
            else
            {
                objToVisit.getType().accept(this);
            }
            output.append(", ");
            output.append("Adr:" + objToVisit.getAdr());
            output.append(", ");
            output.append("Level:" + objToVisit.getLevel() + " ");

            if (objToVisit.getKind() == Obj.Meth)
            {
                if (isMethodStatic(objToVisit))
                {
                    output.append(", static method");
                }
                else
                {
                    output.append(", virtual method");
                }
            }

            if (objToVisit.getKind() == Obj.Prog || objToVisit.getKind() == Obj.Meth) {
                output.append("\n");
                nextIndentationLevel();
            }


            for (Obj o : objToVisit.getLocalSymbols()) {
                output.append(currentIndent.toString());
                if ((objToVisit.getKind() == Obj.Meth) &&(o.getType().getKind() == Struct.Class))
                {
                    output.append("Var ");
                    output.append(o.getName());
                    output.append(": ");
                    output.append("Class ");
                    output.append(o.getType());
                    output.append(", ");
                    output.append("Adr:" + o.getAdr());
                    output.append(", ");
                    output.append("Level:" + o.getLevel() + " ");
                }
                else
                {
                    o.accept(this);
                }
                output.append("\n");
            }

            if (objToVisit.getKind() == Obj.Prog || objToVisit.getKind() == Obj.Meth)
                previousIndentationLevel();

            //output.append("]");

        }

        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitScopeNode(symboltable.Scope)
         */
        @Override
        public void visitScopeNode(Scope scope) {
            for (Obj o : scope.values()) {
                o.accept(this);
                output.append("\n");
            }
        }

        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitStructNode(symboltable.Struct)
         */
        @Override
        public void visitStructNode(Struct structToVisit) {
            switch (structToVisit.getKind()) {
            case Struct.None:
                output.append("notype");
                break;
            case Struct.Int:
                output.append("int");
                break;
            case Struct.Char:
                output.append("char");
                break;
            case Struct.Bool:
                output.append("bool");
                break;
            case Struct.Array:
                output.append("Arr of ");

                switch (structToVisit.getElemType().getKind()) {
                case Struct.None:
                    output.append("notype");
                    break;
                case Struct.Int:
                    output.append("int");
                    break;
                case Struct.Char:
                    output.append("char");
                    break;
                case Struct.Class:
                    output.append("Class");
                    break;
                case Struct.Bool:
                  output.append("bool");
                    break;
                }
                break;
            case Struct.Class:
                output.append("Class [\n");
                nextIndentationLevel();
                for (Obj obj : structToVisit.getMembers()) {
                    output.append(currentIndent.toString());
                    obj.accept(this);
                    if (obj.getKind() == Obj.Fld)
                    {
                        output.append("\n");
                    }
                }
                previousIndentationLevel();
                output.append(currentIndent.toString());
                output.append("]");
                break;
            }

        }

        public String getOutput() {
            StringBuilder tmp = output;
            output = new StringBuilder("");
            return tmp.toString();
        }

    }

    static class TabExt
    {
        static Struct boolType = new Struct(Struct.Bool);
        static SymbolTableVisitor symbolTableVisitor = new DumpUpgradeSymbolTableVisitor();
        static Obj programObj = null;
        static boolean doesMainExist = false;
        static int staticDataCnt = 0;
    }

    public static class ObjResultWrapper {
        Obj obj;
        boolean semanticError = false;
        boolean syntaxError = false;
        int relOp;
        boolean isVirtual = false;
        boolean doesOverride = false;

        public ObjResultWrapper() {}

        public ObjResultWrapper(Obj obj)
        {
            this.obj = obj;
        }

        public ObjResultWrapper clone()
        {
            ObjResultWrapper objWrapper = new ObjResultWrapper(obj);
            objWrapper.setSemanticError(semanticError);
            objWrapper.setSyntaxError(syntaxError);
            objWrapper.setRelOp(relOp);
            objWrapper.setVirtual(isVirtual);
            objWrapper.setDoesOverride(doesOverride);
            return objWrapper;
        }

        public void copyTo(ObjResultWrapper copyFrom)
        {
            setSemanticError(copyFrom.semanticError);
            setSyntaxError(copyFrom.syntaxError);
            setRelOp(copyFrom.relOp);
            setVirtual(copyFrom.isVirtual);
            setDoesOverride(copyFrom.doesOverride);
            obj = copyFrom.obj;
        }

        public Obj getObj() {
            return obj;
        }
        public void setObj(Obj obj) {
            this.obj = obj;
        }

        public boolean isSemanticError() {
            return semanticError;
        }

        public boolean isSyntaxError()
        {
            return syntaxError;
        }

        public ObjResultWrapper setSemanticError(boolean semanticError) {
            this.semanticError = semanticError;
            return this;
        }

        public ObjResultWrapper setSyntaxError(boolean syntaxError)
        {
            this.syntaxError = syntaxError;
            return this;
        }

        public void promoteToConst()
        {
            Struct objType = obj.getType();
            obj = new Obj(Obj.Con, "", objType);
        }

        public boolean isError()
        {
            return (syntaxError || semanticError);
        }

        public boolean isVar()
        {
            return (obj.getKind() == Obj.Var) || (obj.getKind() == Obj.Con)
                || (obj.getKind() == Obj.Fld) || (obj.getKind() == Obj.Elem);
        }

        public boolean isLeftValue()
        {
            return (isVar() && (obj.getKind() != obj.Con));
        }

        public boolean  isField()
        {
            return obj.getKind() == Obj.Fld;
        }

        public boolean isClassType()
        {
            return (obj.getKind() == Obj.Type) && (obj.getType().getKind() == Struct.Class);
        }

        public boolean isArrayElement()
        {
            return obj.getKind() == Obj.Elem;
        }

        public boolean isArray()
        {
            return (obj.getType().getKind() == Struct.Array)
                    && isLeftValue();
        }

        public boolean isClass()
        {
            return isLeftValue() && (obj.getType().getKind() == Struct.Class);
        }


        public boolean hasAdditionalParsOnStack()
        {
            return isArrayElement() || isField();
        }

        public boolean loadable()
        {
            int kind = obj.getKind();
            return isVar();
        }

        public void generateRightValue()
        {
            generateRightValue(true);
        }

        public void generateRightValue(boolean shouldPromote)
        {
            if (isArrayElement())
            {
                // a i a[i]
                Code.put(Code.dup_x2);
                // a[i] a i a[i]
                Code.put(Code.pop);
                // a[i] a i
                Code.put(Code.pop);
                // a[i] a
                Code.put(Code.pop);
                // a[i]

            }
            else if (isField())
            {
                // x x.i
                Code.put(Code.dup_x1);
                // x.i x x.i
                Code.put(Code.pop);
                // x.i x
                Code.put(Code.pop);
                // x.i
            }
            if (shouldPromote && isVar() && (obj.getType().getKind() != Struct.Array) && (obj.getType().getKind() != Struct.Class))
            {
                promoteToConst();
            }
        }

        public boolean isVirtual()
        {
            return isVirtual;
        }

        public void setVirtual(boolean isVirtual)
        {
            this.isVirtual = isVirtual;
        }

        public void setRelOp(int relOp)
        {
            this.relOp = relOp;
        }

        public int getRelOp()
        {
            return relOp;
        }

        public boolean doesOverride()
        {
            return doesOverride;
        }

        public void setDoesOverride(boolean doesOverride)
        {
            this.doesOverride = doesOverride;
        }

        ObjResultWrapper propagateError(ObjResultWrapper obj)
        {
            if (obj != null)
            {
                semanticError = semanticError || obj.isSemanticError();
                syntaxError = syntaxError || obj.isSyntaxError();
            }
            return this;
        }
    }


    // U slucaju greske.
    //
     @Override
    protected int error_sync_size() {
        // TODO Auto-generated method stubTab
        return 1;
    }

    static class ParserCnt {
        // NIVO A
        static int globalVarDefCnt = 0;
        static int localVarDefMainCnt = 0;
        static int globalConstDefCnt = 0;
        static int globalArrayDeclCnt = 0;

        // NIVO B
        static int globalAndStaticMethodCnt = 0;
        //static int l

        static boolean inVarDeclGlobalScope = false;
        static boolean inMethodDeclGlobalScope = false;
        static boolean inMethodEntryGlobalScope = false;
    }

    boolean errorDetected = false;
    boolean syntaxError = false;
    boolean semanticError = false;
    String fileName = "test/generator/program.obj";


    public void setFileName(String fileName){
        this.fileName = fileName;
    }

    Logger log = Logger.getLogger(getClass());

    // MJParser greska.
    //
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    // Overrideovana MJParser funkcija.
    //
    public void syntax_error(Symbol cur_token) {
        syntaxError = true;
        report_error("\nSintaksna greska", cur_token);
    }

    public void semantic_error(String msg, Symbol sym)
    {
        semanticError = true;
        report_error("\nSemnaticka greska : " + msg, sym);
    }

    public void semantic_error(String msg)
    {
        semantic_error(msg, null);
    }

    public void semantic_error(String msg, int line)
    {
        semantic_error(msg + "Linija:" + line + ".");
    }

    // Overrideovana MJParser funkcija.
    //
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    // Sa vezbi funkcija.
    //
    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
        {
            Symbol symbol = (Symbol)info;
            msg.append(symbol.toString()).append (" na liniji ").append(symbol.left);
        }
        log.info(msg.toString());
    }

    public boolean typesEqual(Struct type1, Struct type2)
    {
        // This is the same as check with name, because all types are on first level.
        //
        if (type1 == type2)
        {
            return true;
        }

        if ((type1.getKind() == Struct.Array)
            && (type2.getKind() == Struct.Array)
            && typesEqual(type1.getElemType(), type2.getElemType()))
            {
                return true;
            }
        return false;
    }

    public boolean typesCompatibile(Struct type1, Struct type2)
    {
        if (typesEqual(type1, type2)
        || (type1.isRefType() && (type2 == Tab.nullType) )
        || (type2.isRefType() && (type1 == Tab.nullType)) )
        {
            return true;
        }
        return false;
    }

    public Struct getParentClass(Struct childClass)
    {
        return childClass.getElemType();
    }

    boolean isDerivedClass(Struct childClass, Struct parentClass)
    {
        Struct curClass = null;
        while ( (curClass = getParentClass(childClass)) != null)
        {
            if (typesEqual(curClass, parentClass))
            {
                return true;
            }
            childClass = curClass;
        }
        return false;
    }

    public boolean typesAssignable(Struct dest, Struct expr)
    {
        if (typesEqual(dest, expr)
            || (dest.isRefType() && expr == Tab.nullType)
            || isDerivedClass(expr, dest))
            {
                return true;
            }
        return false;
    }

    boolean find_double_and_report_search(String name, int line, String additionalMessage)
    {
        Scope currentScope = Tab.currentScope;

        Obj objDoubleDef = currentScope.findSymbol(name);
        // Nadjen je duplikat u okruzujucem opsegu.
        //
        if (objDoubleDef != null)
        {
            additionalMessage += " simbol " + name +  " vec postoji.";
            semantic_error(additionalMessage, line);
            return true;
        }
        else
        {
            return false;
        }
    }

    ObjResultWrapper find_virtual_method(Struct childClass, String methodName,
    boolean isStatic)
    {
        Struct parentClass = getParentClass(childClass);
        Obj methodObj  = childClass.getMembersTable().searchKey(methodName);
        if (methodObj == null)
        {
            return null;
        }

        Obj parentMethodObj = parentClass.getMembersTable().searchKey(methodName);
        if (parentMethodObj == null)
        {
            // Double definition of method.
            //
            return (new ObjResultWrapper()).setSemanticError(true);
        }

        if (parentMethodObj.getKind() != Obj.Meth)
        {
            // Double
            return (new ObjResultWrapper()).setSemanticError(true);
        }

        return new ObjResultWrapper(methodObj);
    }



    boolean check_type_and_report(Obj obj, Struct type, int line, String additionalMessage)
    {
        if (additionalMessage == null)
        {
            additionalMessage = "";
        }
        if (!typesEqual(obj.getType(), type)) {
            semantic_error(additionalMessage + ". Tipovi nisu isti. ", line);
            return false;
        }
        return true;
    }

    boolean check_type_and_report(Obj obj, LinkedList<Struct> listType, int line, String additionalMessage)
    {
        if (additionalMessage == "")
        {
            additionalMessage = "";
        }

        boolean found = false;

        for (Struct type : listType)
        {
            if (typesEqual(obj.getType(), type))
            {
                found = true;
                break;
            }
        }

        if (!found)
        {
            semantic_error(additionalMessage + "." + obj.getName() + " ne slaze se ni sa jednim od tipova.", line);
            return false;
        }
        return true;
    }

    boolean check_obj_kind_and_report(Obj obj, int kind, int line, String additionalMessage)
    {
        if (additionalMessage == null)
        {
            additionalMessage = "";
        }

        if (obj.getKind() != kind){
            semantic_error(additionalMessage + ". Nije odgovarajuce vrste.", line);
            return false;
        }
        return true;
    }

    ObjResultWrapper find_for_use_and_report(String name, int line, String additionalMessage)
    {
        ObjResultWrapper result = null;
        Obj obj = Tab.find(name);
        result = new ObjResultWrapper(obj);
        if (obj == Tab.noObj)
        {
            semantic_error(additionalMessage + " Nije definisan u okruzujucem opsegu.", line);
            result.setSemanticError(true);
        }
        else
        {
            // TODO : info za koriscenje objekta
        }

        return result;
    }




    void pushOnCodeStack(LinkedList<LinkedList<Byte>> codeStack, int beginAddress)
    {
        // Oprezno, mozda je jos neophodno azurirati!!!
        //
        LinkedList<Byte> listOfCode = new LinkedList<Byte>();

        for (int idx = beginAddress; idx < Code.pc; idx ++)
        {
            listOfCode.addLast(Code.buf[idx]);
        }
        codeStack.addLast(listOfCode);
        Code.pc = beginAddress;
    }

    void popFromCodeStack(LinkedList<LinkedList<Byte>> codeStack)
    {
        LinkedList<Byte> listOfCode = codeStack.removeLast();
        for (int idx = 0; idx < listOfCode.size(); idx ++)
        {
            Code.put(listOfCode.get(idx));
        }
    }

    void updateAdresses(LinkedList<LinkedList<Integer>> list)
    {
        LinkedList<Integer> listOfJumpAdresses = list.removeLast();

        for (int idx = 0; idx < listOfJumpAdresses.size(); idx ++)
        {
            Code.fixup(listOfJumpAdresses.get(idx));
        }
    }

    void putIntInStaticData(int val)
    {
        Code.loadConst(val);
        Code.put(Code.putstatic);
        Code.put2(TabExt.staticDataCnt++);
    }

    static boolean isMethodStatic(Obj obj)
    {
        return obj.getFpPos() != 0;
    }

    static void setMethodStatic(Obj obj)
    {
        obj.setFpPos(1);
    }

    static void setParentClass(Obj child, Obj parent)
    {
        child.getType().setElementType(parent.getType());
    }

    void initVirtualFunctionTable(Obj objType, LinkedList<Integer> listVFTAdresses)
    {
        Struct type = objType.getType();
        Collection<Obj> symbols = type.getMembers();
        if (listVFTAdresses.size() > 0)
        {
            Code.fixup(listVFTAdresses.getLast());
        }

        objType.setAdr(TabExt.staticDataCnt);
        for (Obj obj : symbols)
        {
            if ( (obj.getKind() == Obj.Meth) && !isMethodStatic(obj))
            {
                String name = obj.getName();
                for (int idx = 0; idx < name.length(); idx ++)
                {
                    putIntInStaticData((int)name.charAt(idx));
                }
                putIntInStaticData(-1);
                putIntInStaticData(obj.getAdr());
            }
        }
        putIntInStaticData(-2);

        Code.putJump(0);
        listVFTAdresses.addLast(Code.pc - 2);
    }

    public void copyFieldsAndMethodsFromParent(Obj parentClass, Obj childClass)
    {
        Struct parentType = parentClass.getType();
        Struct childType = childClass.getType();
        Collection<Obj> parentMembers = parentType.getMembers();

        for (Obj it : parentMembers)
        {
            if (it.getKind() == Obj.Fld)
            {
                Tab.insert(it.getKind(), it.getName(), it.getType());
            }
            else if ( (it.getKind() == Obj.Meth) )
            {
                Obj methObj = Tab.insert(it.getKind(), it.getName(), it.getType());
                methObj.setAdr(it.getAdr());
                methObj.setFpPos(it.getFpPos());

                Tab.openScope();
                for (Obj itPars : it.getLocalSymbols())
                {
                    if (itPars.getName()    .equals("this"))
                    {
                        Tab.insert(itPars.getKind(), itPars.getName(), childType);
                    }
                    else
                    {
                        Tab.insert(itPars.getKind(), itPars.getName(), itPars.getType());
                    }
                }
                Tab.chainLocalSymbols(methObj);
                Tab.closeScope();
            }
        }

    }

    public void extendFromParentClass(Obj childClass, Obj parentClass)
    {
        setParentClass(childClass, parentClass);
        copyFieldsAndMethodsFromParent(parentClass, childClass);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MJParser$actions {


    final String METHOD_ENTRY_NAME = "main";
    final String VFT_POINTER_NAME = "_vftPointer";
    final int OP_ASSIGN_CODE = 0;
    final int CHAR_SIZE = 1;
    final int INT_SIZE = 4;
    ObjResultWrapper curConstType = null;
    ObjResultWrapper curVarType = null ;
    ObjResultWrapper curLocalType = null;
    ObjResultWrapper curFormType = null;
    ObjResultWrapper curFieldType = null;
    ObjResultWrapper curObjWrappFieldOrElem = null;
    ObjResultWrapper curObjWrapperClass = null;
    ObjResultWrapper curObjWrapperMethod = null;
    LinkedList<ObjResultWrapper> listCurObjWrapperFieldOrElem = new LinkedList<ObjResultWrapper>();
    LinkedList<Integer> listAdrIfConditionTrue = new LinkedList<Integer>();
    LinkedList<Integer> listAdrIfConditionFalse = new LinkedList<Integer>();

    LinkedList<Integer> listAdrForConditionFalse  = new LinkedList<Integer>();
    LinkedList<Integer> listAdrForCondition = new LinkedList<Integer>();
    LinkedList<LinkedList<Byte>> listSavedCode = new LinkedList<LinkedList<Byte>>();
    LinkedList<LinkedList<Integer>> listOfListOfBreaksInFor = new LinkedList<LinkedList<Integer>>();
    LinkedList<LinkedList<Integer>> listOfListOfContinuesInFor = new LinkedList<LinkedList<Integer>>();
    LinkedList<Integer> listVFTAdresses = new LinkedList<Integer>();
    LinkedList<Boolean> listIsVirtualFunction = new LinkedList<Boolean>();
    Integer forLastDesigantorBeginAddress = null;

    boolean globalVar = false;
    boolean localVar = false;
    boolean formVar = false;
    boolean fieldVar = false;
    boolean isInClass = false;
    boolean addThis = false;
    int formParCnt = 0;


  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action_part00000000(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;

        parser.report_info("Krece da prepoznaje globalne deklaracije", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",96, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;


        Tab.insert(Obj.Type, "bool", TabExt.boolType);

        Obj eolObj = Tab.find("eol");
        eolObj.setAdr((int)'\n');

        Obj chrObj = Tab.find("chr");
        chrObj.setAdr(Code.pc);
        Code.put(Code.enter);
        Code.put(1);
        Code.put(1);
        // Read variable from procedure stack and leave it as return value.
        Code.put(Code.load_n);
        Code.put(Code.exit);
        Code.put(Code.return_);

        Obj ordObj = Tab.find("ord");
        ordObj.setAdr(Code.pc);
        Code.put(Code.enter);
        Code.put(1);
        Code.put(1);
        Code.put(Code.load_n);
        Code.put(Code.exit);
        Code.put(Code.return_);

        Obj lenObj = Tab.find("len");
        lenObj.setAdr(Code.pc);
        Code.put(Code.enter);
        Code.put(1);
        Code.put(1);
        Code.put(Code.load_n);
        Code.put(Code.arraylength);
        Code.put(Code.exit);
        Code.put(Code.return_);


        TabExt.programObj = Tab.insert(Obj.Prog, programName, Tab.noType);

        Tab.openScope();
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",97, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= NT$0 PROGRAM IDENT NT$1 GlobalDeclListEpsilon BRACE_LEFT MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		

        // TODO update with virtual table.
        //
        Code.dataSize = TabExt.staticDataCnt;
        Tab.chainLocalSymbols(TabExt.programObj);
        Tab.closeScope();

        if (!TabExt.doesMainExist)
        {
            semantic_error("Ne postoji globalna main funkcija");
        }

        parser.report_info("****************** NIVO A***********************", null);
        parser.report_info("Broj definicija globalnih promenljivih " + ParserCnt.globalVarDefCnt, null);
        parser.report_info("Broj definicija lokalnih promenljivih u main funkciji " + ParserCnt.localVarDefMainCnt, null);
        parser.report_info("Broj definicija globalnih konstanti " + ParserCnt.globalConstDefCnt, null);
        parser.report_info("Broj deklaracija globalnih nizova " + ParserCnt.globalArrayDeclCnt, null);
        parser.report_info("******************* NIVO B**********************", null);
        parser.report_info("Broj definicija globalnih i statickih funkcija unutrasnjih klasa " + ParserCnt.globalAndStaticMethodCnt, null);
        parser.report_info("USPESNO PREPOZNAVANJE", null);
        Tab.dump(TabExt.symbolTableVisitor);

        if (errorDetected)  {
            parser.report_error("Neuspesno parsiranje!!!", null);
        }
        else {
            parser.report_info("Uspesno parsiranje!!!", null);
            File f = new File(fileName);
            if (f.exists())
            {
                f.delete();
            }
            f = new File(fileName);
            Code.write(new FileOutputStream(f));

        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalDeclListEpsilon ::= GlobalDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclListEpsilon",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclListEpsilon",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDeclList ::= GlobalDeclList GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDeclList ::= GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= ClassDecl 
            {
              Object RESULT =null;
		
        parser.log.debug("Prepoznata klasa", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper varType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curVarType = varType;
        globalVar = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",98, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalVarDecl ::= Type NT$2 GlobalVarExprList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper varType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
        globalVar = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobalVarExprList ::= GlobalVarExprCommaList VarExprOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GlobalVarExprList ::= VarExprOrErrorSemi 
            {
              Object RESULT =null;
		int exprOrErrorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprOrErrorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprOrError = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = exprOrError;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarExprOrErrorSemi ::= VarExpr SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper t = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT = (new ObjResultWrapper());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorSemi",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarExprOrErrorSemi ::= error SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT = (new ObjResultWrapper()).setSyntaxError(true);

        parser.report_error("Uspesan oporavak od greske deklaracije globalne promenljive,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorSemi",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarExprCommaList ::= GlobalVarExprCommaList VarExprOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprCommaList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarExprCommaList ::= VarExprOrErrorComma 
            {
              Object RESULT =null;
		int exprOrErrorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprOrErrorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprOrError = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = exprOrError;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprCommaList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarExprOrErrorComma ::= VarExpr COMMA 
            {
              ObjResultWrapper RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper t = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT  = t;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorComma",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarExprOrErrorComma ::= error COMMA 
            {
              ObjResultWrapper RESULT =null;
		
        RESULT = (new ObjResultWrapper()).setSyntaxError(true);
        parser.report_error("Uspesan oporavak od greske prilikom deklaracije globalne promenljiva COMMA je resila stvar", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorComma",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MethodDeclListEpsilon ::= MethodDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListEpsilon",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListEpsilon",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDeclList ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curConstType = type;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",99, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;


    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",100, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ConstDecl ::= CONST Type NT$3 ConstExprList NT$4 SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ConstExprList ::= ConstExprList COMMA ConstExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExprList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ConstExprList ::= ConstExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExprList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ConstExpr ::= IDENT OP_ASSIGN ConstValue 
            {
              Object RESULT =null;
		int nameOfConstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfConstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfConst = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int numObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj numObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // Da li se konstanta slaze po tipu sa deklaracijom.
        //
        if (!curConstType.isSemanticError()
            &&(check_type_and_report(numObj, curConstType.getObj().getType(), numObj.getLevel(), " poredjenje tipova konstanti")))
        {
            // Da nema slucajno duplikata.
            //
            if (!find_double_and_report_search(nameOfConst, nameOfConstleft, "Konstanta"))
            {
                Obj constObj = Tab.insert(Obj.Con, nameOfConst, curConstType.getObj().getType());
                constObj.setAdr(numObj.getAdr());
                ParserCnt.globalConstDefCnt++;
            }

        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExpr",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConstValue ::= ConstNum 
            {
              Obj RESULT =null;
		int constNumleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constNumright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constNum = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constNum;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ConstValue ::= ConstBool 
            {
              Obj RESULT =null;
		int constBoolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constBoolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constBool = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constBool;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ConstValue ::= ConstChar 
            {
              Obj RESULT =null;
		int constCharleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constCharright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constChar = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constChar;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstNum ::= CONST_NUM 
            {
              Obj RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, number.toString(), Tab.intType, number.intValue(), numberleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstNum",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ConstBool ::= CONST_BOOL 
            {
              Obj RESULT =null;
		int boolStrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolStrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String boolStr = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, "", TabExt.boolType, Boolean.valueOf(boolStr) ? 1 : 0, boolStrleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstBool",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConstChar ::= CONST_CHAR 
            {
              Obj RESULT =null;
		int charStrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int charStrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String charStr = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            char c = charStr.charAt(1);
            RESULT = new Obj(Obj.Con, "", Tab.charType,
            c, charStrleft);

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstChar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarExpr ::= IDENT BracketEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int nameOfVarleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameOfVarright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String nameOfVar = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        {
            Struct typeVar = null;
            String message = "";
            Obj varObj = null;
            int objType = Obj.Var;

            if (globalVar)
            {
                message = "Definicija globalne varijable";
                if (!curVarType.isSemanticError())
                {
                    typeVar = curVarType.getObj().getType();
                }
                ParserCnt.globalVarDefCnt++;
                if (isArray)
                {
                    ParserCnt.globalArrayDeclCnt++;
                }

            }
            else if (localVar)
            {
                message = "Definicija lokalne varijable";
                if (!curLocalType.isSemanticError())
                {
                    typeVar = curLocalType.getObj().getType();
                }
                if (!isInClass && curObjWrapperMethod.getObj().getName().equals(METHOD_ENTRY_NAME))
                {
                    ParserCnt.localVarDefMainCnt++;
                }
            }
            else if (formVar)
            {
                message = "Definicija formalnog parametra";
                if (!curFormType.isSemanticError())
                {
                    typeVar = curFormType.getObj().getType();
                }
            }
            else if (fieldVar)
            {
                message = "Definicija polja klase";
                if (!curFieldType.isSemanticError())
                {
                    typeVar = curFieldType.getObj().getType();
                    objType = Obj.Fld;
                }
            }

            if (isArray)
            {
                if (typeVar != null)
                {
                    typeVar = new Struct (Struct.Array, typeVar);
                }
            }
            if (!find_double_and_report_search(nameOfVar, nameOfVarleft, message)
                && (typeVar != null) )
            {

                varObj = Tab.insert(objType, nameOfVar, typeVar);
                if (formVar)
                {
                    varObj.setAdr(Tab.currentScope().getnVars() - 1);
                    // TODO : think about formPar
                    //
                }
                else if (globalVar)
                {
                    varObj.setAdr(TabExt.staticDataCnt++);
                }
            }
            else
            {
                RESULT = (new ObjResultWrapper()).setSemanticError(true);
            }
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExpr",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BracketEpsilon ::= BRACKET_LEFT BRACKET_RIGHT 
            {
              Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketEpsilon",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BracketEpsilon ::= 
            {
              Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketEpsilon",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              Object RESULT =null;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        isInClass = true;
        if (find_double_and_report_search(nameOfClass, nameOfClassleft, "Ime je vec deklarisano u okruzujucem opsegu"))
        {
            // TODO : test
            curObjWrapperClass = (new ObjResultWrapper()).setSemanticError(true);
            curObjWrapperClass.setSemanticError(true);
        }
        else
        {
            Obj obj = Tab.insert(Obj.Type, nameOfClass, new Struct(Struct.Class));
            curObjWrapperClass = new ObjResultWrapper(obj);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",101, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int extendsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int extendsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper extendsType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        if (!curObjWrapperClass.isSemanticError())
        {
            Tab.openScope();
            if ( (extendsType != null) && (!extendsType.isError()))
            {
                extendFromParentClass( curObjWrapperClass.getObj(), extendsType.getObj());
            }
            else
            {
                Tab.insert(Obj.Fld, VFT_POINTER_NAME, Tab.intType);
            }
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",102, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ClassDecl ::= CLASS IDENT NT$5 ExtendsTypeEpsilonBraceLeftOrError NT$6 FieldDeclListEpsilonBraceMethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int extendsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int extendsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper extendsType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
        Tab.closeScope();
        Tab.insert(Obj.Type, curObjWrapperClass.getObj().getName(), curObjWrapperClass.getObj().getType());

        if (listVFTAdresses.size() == 0)
        {
            Code.mainPc = Code.pc;
        }
        initVirtualFunctionTable(curObjWrapperClass.getObj(), listVFTAdresses);

        isInClass = false;
        parser.log.debug("Prepoznata klasa", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExtendsTypeEpsilonBraceLeftOrError ::= EXTENDS Type BRACE_LEFT 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        if ( (!type.isSemanticError())
            &&(type.getObj().getKind() != Obj.Type)
            && (type.getObj().getType().getKind() != Struct.Class) )
        {
            semantic_error("Tip " + type.getObj().getName() + " nije tipa klase.", typeleft);
            type.setSemanticError(true);
        }
        RESULT =  type;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsTypeEpsilonBraceLeftOrError",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExtendsTypeEpsilonBraceLeftOrError ::= EXTENDS error BRACE_LEFT 
            {
              ObjResultWrapper RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod EXTEND-a,  BRACE_LEFT je resila stvar" , null);
        RESULT = (new ObjResultWrapper()).setSyntaxError(true);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsTypeEpsilonBraceLeftOrError",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$7 ::= 
            {
              ObjResultWrapper RESULT =null;

        RESULT = null;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",103, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExtendsTypeEpsilonBraceLeftOrError ::= NT$7 BRACE_LEFT 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsTypeEpsilonBraceLeftOrError",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FieldDeclListEpsilonBraceMethodDeclListEpsilon ::= FieldDeclListOrErrorBraceLeft MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilonBraceMethodDeclListEpsilon",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FieldDeclListEpsilonBraceMethodDeclListEpsilon ::= FieldDeclList 
            {
              Object RESULT =null;
		
        Tab.chainLocalSymbols(curObjWrapperClass.getObj().getType());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilonBraceMethodDeclListEpsilon",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$8 ::= 
            {
              Object RESULT =null;

        Tab.chainLocalSymbols(curObjWrapperClass.getObj().getType());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",104, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FieldDeclListEpsilonBraceMethodDeclListEpsilon ::= BRACE_LEFT NT$8 MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilonBraceMethodDeclListEpsilon",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FieldDeclListEpsilonBraceMethodDeclListEpsilon ::= 
            {
              Object RESULT =null;
		
        Tab.chainLocalSymbols(curObjWrapperClass.getObj().getType());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilonBraceMethodDeclListEpsilon",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$9 ::= 
            {
              Object RESULT =null;

        Tab.chainLocalSymbols(curObjWrapperClass.getObj().getType());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",105, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FieldDeclListOrErrorBraceLeft ::= FieldDeclList NT$9 BRACE_LEFT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListOrErrorBraceLeft",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FieldDeclListOrErrorBraceLeft ::= FieldDeclErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListOrErrorBraceLeft",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FieldDeclListOrErrorBraceLeft ::= FieldDeclList FieldDeclErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListOrErrorBraceLeft",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$10 ::= 
            {
              Object RESULT =null;

        parser.report_error("Uspesan oporavak od greske kod deklaracije fieldsa,  BRACE_LEFT je resio stvar" , null);
        Tab.chainLocalSymbols(curObjWrapperClass.getObj().getType());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",106, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FieldDeclListOrErrorBraceLeft ::= FieldDeclList error NT$10 BRACE_LEFT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListOrErrorBraceLeft",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$11 ::= 
            {
              Object RESULT =null;

        parser.report_error("Uspesan oporavak od greske kod deklaracije fieldsa,  BRACE_LEFT je resio stvar" , null);
        Tab.chainLocalSymbols(curObjWrapperClass.getObj().getType());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",107, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FieldDeclListOrErrorBraceLeft ::= error NT$11 BRACE_LEFT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListOrErrorBraceLeft",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$12 ::= 
            {
              Object RESULT =null;

        parser.report_error("Uspesan oporavak od greske kod deklaracije fieldsa,  BRACE_LEFT je resio stvar" , null);
        Tab.chainLocalSymbols(curObjWrapperClass.getObj().getType());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",108, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FieldDeclErrorBraceLeft ::= Type error NT$12 BRACE_LEFT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclErrorBraceLeft",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FieldDeclList ::= FieldDeclList FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FieldDeclList ::= FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$13 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curFieldType = type;
        fieldVar = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",109, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FieldDecl ::= Type NT$13 FieldExprList SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
        fieldVar = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FieldDecl ::= Type error SEMI_COLUMN 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
       parser.report_error("Uspesan oporavak od greske kod deklaracije fieldsa,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FieldDecl ::= error SEMI_COLUMN 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod deklaracije fieldsa,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FieldExprList ::= FieldExprList COMMA VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldExprList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FieldExprList ::= VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldExprList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BraceMethodDeclListEpsilonEpsilon ::= BRACE_LEFT MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceMethodDeclListEpsilonEpsilon",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BraceMethodDeclListEpsilonEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceMethodDeclListEpsilonEpsilon",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$14 ::= 
            {
              Object RESULT =null;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            parser.log.debug("Prepoznat povratni tip", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",110, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            String message = "Metoda";
            if (isInClass)
            {
                ObjResultWrapper objWrapper = find_virtual_method(curObjWrapperClass.getObj().getType(), nameOfMethod, isStatic);
                if (objWrapper == null)
                {
                    Obj curMethod  = Tab.insert(Obj.Meth, nameOfMethod, retType.getObj().getType());
                    curObjWrapperMethod = new ObjResultWrapper(curMethod);
                }
                else if (!objWrapper.isSemanticError())
                {
                    curObjWrapperMethod = objWrapper;
                    curObjWrapperMethod.setDoesOverride(true);
                }
            }
            else if (!find_double_and_report_search(nameOfMethod, nameOfMethodleft, message))
            {
                Obj curMethod  = Tab.insert(Obj.Meth, nameOfMethod, retType.getObj().getType());
                curObjWrapperMethod = new ObjResultWrapper(curMethod);
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$15",111, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

            Tab.openScope();
            if (!isStatic && isInClass)
            {
                Obj varObj = Tab.insert(Obj.Var, "this", curObjWrapperClass.getObj().getType());
                varObj.setAdr(0);
                addThis = false;
            }
            else
            {
                setMethodStatic(curObjWrapperMethod.getObj());
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$16",112, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

            if (null != curObjWrapperMethod.getObj())
            {
                // Postavi broj formalnih parametara.
                //
                curObjWrapperMethod.getObj().setLevel(Tab.currentScope().getnVars());
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$17",113, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

            if (null != curObjWrapperMethod.getObj() && !curObjWrapperMethod.doesOverride())
            {
                Tab.chainLocalSymbols(curObjWrapperMethod.getObj());
            }
            curObjWrapperMethod.getObj().setAdr(Code.pc);
            if (nameOfMethod.equals(METHOD_ENTRY_NAME) && !isInClass)
            {
                TabExt.doesMainExist = true;
                if (listVFTAdresses.size() == 0)
                {
                    Code.mainPc = curObjWrapperMethod.getObj().getAdr();
                }
                else
                {
                    Code.fixup(listVFTAdresses.getLast());
                }

            }

            Code.put(Code.enter);
            Code.put(curObjWrapperMethod.getObj().getLevel());
            Code.put(Tab.currentScope().getnVars());

            parser.log.debug("Zavrseno prepoznavanje deklaracija lokalnih promen", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$18",114, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MethodDecl ::= StaticEpsilon ReturnType NT$14 IDENT NT$15 PAR_LEFT NT$16 FormParsEpsilonParRight NT$17 LocalVarDeclListBraceLeftEpsilon NT$18 StatementListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		
            // Dealocira se stek.
            //
            if (retType.getObj().getType() == Tab.noType)
            {
                Code.put(Code.exit);
                Code.put(Code.return_);
            }
            else
            {
                // Error in case of no return.
                //
                Code.put(Code.trap);
                Code.put(1);
            }

            Tab.closeScope();
            parser.log.debug("Prepoznat METHOD", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StaticEpsilon ::= STATIC 
            {
              Boolean RESULT =null;
		
                RESULT = new Boolean(true);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticEpsilon",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StaticEpsilon ::= 
            {
              Boolean RESULT =null;
		
                RESULT = new Boolean(false);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticEpsilon",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ReturnType ::= Type 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = type;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ReturnType ::= VOID 
            {
              ObjResultWrapper RESULT =null;
		
                RESULT = new ObjResultWrapper(new Obj(Obj.Type, "", Tab.noType));
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FormParsEpsilonParRight ::= FormParsParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsEpsilonParRight",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FormParsEpsilonParRight ::= PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsEpsilonParRight",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LocalVarDeclListBraceLeftEpsilon ::= LocalVarDeclListBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeftEpsilon",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LocalVarDeclListBraceLeftEpsilon ::= BRACE_LEFT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeftEpsilon",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LocalVarDeclListBraceLeft ::= LocalVarDeclListOrErrorSemi LocalVarDeclOrErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeft",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LocalVarDeclListBraceLeft ::= LocalVarDeclOrErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeft",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LocalVarDeclListOrErrorSemi ::= LocalVarDeclListOrErrorSemi LocalVarDeclOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListOrErrorSemi",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LocalVarDeclListOrErrorSemi ::= LocalVarDeclOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListOrErrorSemi",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$19 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

                curLocalType =  type;
                localVar = true;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$19",115, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LocalVarDeclOrErrorSemi ::= Type NT$19 LocalVarExprList SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
                localVar = false;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorSemi",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LocalVarDeclOrErrorSemi ::= error SEMI_COLUMN 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
              parser.report_error("Uspesan oporavak od greske deklaracije lokalne promenljive,  SEMI_COLUMN je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorSemi",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LocalVarExprList ::= LocalVarExprList COMMA VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarExprList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LocalVarExprList ::= VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarExprList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LocalVarDeclOrErrorBraceLeft ::= error BRACE_LEFT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije lokalne promenljive,  BRACE_LEFT je resila stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorBraceLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LocalVarDeclOrErrorBraceLeft ::= LocalVarDeclOrErrorSemi BRACE_LEFT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorBraceLeft",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // StatementListEpsilon ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListEpsilon",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // StatementListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListEpsilon",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FormParsParRight ::= FormPars FormParOrErrorParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsParRight",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FormParsParRight ::= FormParOrErrorParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsParRight",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FormPars ::= FormPars FormParOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FormPars ::= FormParOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FormParOrErrorComma ::= FormPar COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorComma",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FormParOrErrorComma ::= error COMMA 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije formalnog parametra lokalne funkcije,  COMMA je resila stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorComma",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FormParOrErrorParRight ::= FormPar PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorParRight",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FormParOrErrorParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije formalnog parametra lokalne funkcije,  PAR_RIGHT je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorParRight",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$20 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

                curFormType = type;
                formVar = true;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$20",116, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FormPar ::= Type NT$20 VarExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
                formVar = false;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Type ::= IDENT 
            {
              ObjResultWrapper RESULT =null;
		int nameOfTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfType = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Obj obj = Tab.find(nameOfType);
            if (obj.getKind() != Obj.Type)
            {
                obj = new Obj(Obj.Type, "", Tab.noType);
                semantic_error("Nije definisan tip:" + nameOfType+" ", nameOfTypeleft);
                RESULT = (new ObjResultWrapper()).setSemanticError(true);
            }
            else
            {
                RESULT = new ObjResultWrapper(obj);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Statement ::= DesignatorStatementOrAssignErrorSemi 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        parser.log.debug("Prepoznata STATEMENT", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$21 ::= 
            {
              Object RESULT =null;

        // FALSE.
        //
        Code.put(Code.const_n);
        Code.putFalseJump(Code.ne, 0);
        int adrConditionFalse = Code.pc - 2;
        listAdrIfConditionFalse.addLast(adrConditionFalse);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$21",117, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;


        Code.putJump(0);
        Code.fixup(listAdrIfConditionFalse.removeLast());
        int adrConditionTrue = Code.pc - 2;
        listAdrIfConditionTrue.addLast(adrConditionTrue);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$22",118, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Statement ::= IF PAR_LEFT IfConditionParRight NT$21 Statement NT$22 ElseStatementEpsilon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		

        Code.fixup(listAdrIfConditionTrue.removeLast());
        parser.log.debug("Prepoznat IF", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$23 ::= 
            {
              Object RESULT =null;

        parser.report_error("Uspesan oporavak od greske kod IF-a,  PAR_RIGHT je resila stvar" , null);
        // FALSE.
        //
        Code.put(Code.const_n);
        Code.putFalseJump(Code.ne, 0);
        int adrConditionFalse = Code.pc - 2;
        listAdrIfConditionFalse.addLast(adrConditionFalse);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$23",119, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;


        Code.putJump(0);
        Code.fixup(listAdrIfConditionFalse.removeLast());
        int adrConditionTrue = Code.pc - 2;
        listAdrIfConditionTrue.addLast(adrConditionTrue);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$24",120, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Statement ::= IF PAR_LEFT error NT$23 Statement NT$24 ElseStatementEpsilon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		

        Code.fixup(listAdrIfConditionTrue.removeLast());
        parser.log.debug("Prepoznat IF", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$25 ::= 
            {
              Object RESULT =null;

        listAdrForCondition.addLast(Code.pc);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$25",121, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$26 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

        //
        Code.put(Code.const_n);
        Code.putFalseJump(Code.ne, 0);
        int adrConditionFalse = Code.pc - 2;
        listAdrForConditionFalse.addLast(adrConditionFalse);


        forLastDesigantorBeginAddress = Code.pc;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$26",122, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

        pushOnCodeStack(listSavedCode, forLastDesigantorBeginAddress);
        listOfListOfContinuesInFor.addLast(new LinkedList<Integer>());
        listOfListOfBreaksInFor.addLast(new LinkedList<Integer>());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$27",123, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Statement ::= FOR PAR_LEFT DesignatorStatementOrAssign SEMI_COLUMN NT$25 ForConditionSemi NT$26 DesignatorStatementOrAssignOrErrorParRight NT$27 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        updateAdresses(listOfListOfContinuesInFor);
        popFromCodeStack(listSavedCode);

        int adrCondition = listAdrForCondition.removeLast();
        Code.putJump(adrCondition);

        updateAdresses(listOfListOfBreaksInFor);
        Code.fixup(listAdrForConditionFalse.removeLast());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Statement ::= FOR error SEMI_COLUMN ForCondition SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN error SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN ForCondition SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Statement ::= FOR error SEMI_COLUMN error SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Statement ::= FOR error SEMI_COLUMN ForCondition SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT ili SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT ili SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Statement ::= FOR error SEMI_COLUMN error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT ili SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Statement ::= FOR error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT ili SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Statement ::= FOR error PAR_RIGHT 
            {
              Object RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod FOR-a,  PAR_RIGHT je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Statement ::= BREAK SEMI_COLUMN 
            {
              Object RESULT =null;
		
        // Ne mora 0. Moze sta god.
        //
        Code.putJump(0);
        int adr = Code.pc - 2;
        listOfListOfBreaksInFor.getLast().addLast(adr);
        parser.log.debug("Prepoznat BREAK", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Statement ::= CONTINUE SEMI_COLUMN 
            {
              Object RESULT =null;
		
        Code.putJump(0);
        int adr = Code.pc - 2;
        listOfListOfContinuesInFor.getLast().addLast(adr);
        parser.log.debug("Prepoznat CONTINUE", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Statement ::= RETURN ExprEpsilon SEMI_COLUMN 
            {
              Object RESULT =null;
		
        // TODO : return check semantic.
        // Should exist, are types ok...
        //
        Code.put(Code.exit);
        Code.put(Code.return_);

        parser.log.debug("Prepoznat RETURN", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Statement ::= READ PAR_LEFT Designator PAR_RIGHT SEMI_COLUMN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper des = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
        LinkedList<Struct> listType = new LinkedList<Struct>();
        listType.addLast(Tab.intType);
        listType.addLast(Tab.charType);
        listType.addLast(TabExt.boolType);
        if (!des.isSemanticError()
             && check_type_and_report(des.getObj(), listType, desleft, " prvi argument READ-a mora biti char, bool ili int"))
        {
            if (des.isLeftValue())
            {
                Code.put(Code.pop);
                if (typesEqual(des.getObj().getType(), Tab.charType))
                {
                    Code.put(Code.bread);
                }
                else
                {
                    Code.put(Code.read);
                }
                Code.store(des.getObj());
            }
            else
            {
                semantic_error("Parametar kod read mora da bude lvalue. ", desleft);
            }
        }
        parser.log.debug("Prepoznat READ", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Statement ::= PRINT PAR_LEFT Expr CommaConstNumEpsilon PAR_RIGHT SEMI_COLUMN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int numObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj numObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
        LinkedList<Struct> listType = new LinkedList<Struct>();
        listType.addLast(Tab.intType);
        listType.addLast(Tab.charType);
        listType.addLast(TabExt.boolType);
        if (!expr.isSemanticError()
        && check_type_and_report(expr.getObj(), listType, exprleft, " prvi argument PRINT-a mora biti char, bool ili int"))
        {
            if (numObj != null)
            {
                Code.load(numObj);
            }
            else
            {
                Code.loadConst(0);
            }
            if (typesEqual(expr.getObj().getType(), Tab.charType))
            {
                Code.put(Code.bprint);
            }
            else
            {
                Code.put(Code.print);
            }
        }
        else
        {
            expr.setSemanticError(true);
        }
        RESULT = expr;
        parser.log.debug("Prepoznat PRINT");
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Statement ::= BRACE_LEFT StatementListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
		
        parser.log.debug("Prepoznat BLOK", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ElseStatementEpsilon ::= ELSE Statement 
            {
              Object RESULT =null;
		
            parser.log.debug("Prepoznat ELSE", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatementEpsilon",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ElseStatementEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatementEpsilon",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ExprEpsilon ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEpsilon",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ExprEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEpsilon",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ForConditionSemi ::= ForCondition SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ForConditionSemi ::= SEMI_COLUMN 
            {
              Object RESULT =null;
		
            Code.loadConst(1);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ForConditionSemi ::= error SEMI_COLUMN 
            {
              Object RESULT =null;
		
              parser.report_error("Uspesan oporavak od greske kod uslova u for-u,  SEMI_COLUMN je resio stvar" , null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CommaConstNumEpsilon ::= COMMA CONST_NUM 
            {
              Obj RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, number.toString(), Tab.intType, number.intValue(), numberleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaConstNumEpsilon",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CommaConstNumEpsilon ::= 
            {
              Obj RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaConstNumEpsilon",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DesignatorStatementOrAssign ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DesignatorStatementOrAssign ::= AssingmentStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DesignatorStatementOrAssign ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DesignatorStatementOrAssignOrErrorParRight ::= DesignatorStatement PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DesignatorStatementOrAssignOrErrorParRight ::= AssingmentStatement PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DesignatorStatementOrAssignOrErrorParRight ::= PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DesignatorStatementOrAssignOrErrorParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske kod inkrementatorra u for-u,  PAR_RIGHT je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DesignatorStatementOrAssignErrorSemi ::= DesignatorStatement SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignErrorSemi",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DesignatorStatementOrAssignErrorSemi ::= AssingmentStatementOrErrorSemi 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignErrorSemi",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DesignatorStatement ::= DesignatorIncOrDec 
            {
              Object RESULT =null;
		int incOrDecleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int incOrDecright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper incOrDec = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = incOrDec;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DesignatorStatement ::= DesignatorFuncCall 
            {
              Object RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper funcCall = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!funcCall.isError() && (funcCall.getObj().getType() != Tab.noType))
            {
                Code.put(Code.pop);
            }
            RESULT = funcCall;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DesignatorIncOrDec ::= Designator IncOrDec 
            {
              ObjResultWrapper RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper designator = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

        if (!designator.isSemanticError())
        {
            if (designator.isLeftValue())
            {
                if (check_type_and_report(designator.getObj(), Tab.intType, designatorleft, "Izraz koji se inkrementira/dekrementira mora da bude int"))
                {
                    // right value is not needed
                    // because a i a[i] is good because there is no inc
                    Code.loadConst(1);
                    Code.put(op);
                    Code.store(designator.getObj());
                    designator.promoteToConst();
                    RESULT = designator;
                }
                else
                {
                    RESULT = designator.setSemanticError(true);
                }
            }
            else
            {
                semantic_error("Izraz koji se inkrementira/dekrementira mora da bude lvalue.", designatorleft);
                RESULT = designator.setSemanticError(true);
            }
        }
        else
        {
            RESULT = designator.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorIncOrDec",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // IncOrDec ::= OP_INC 
            {
              Integer RESULT =null;
		
        RESULT = Code.add;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncOrDec",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // IncOrDec ::= OP_DEC 
            {
              Integer RESULT =null;
		
        RESULT = Code.sub;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncOrDec",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$28 ::= 
            {
              ObjResultWrapper RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

            // TODO: add semantic errors.
            if (func.isVirtual())
            {
                // adr
                Code.put(Code.dup);

                // adr adr
            }
            listIsVirtualFunction.addLast(func.isVirtual());
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$28",124, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DesignatorFuncCall ::= Designator PAR_LEFT NT$28 ActParsEpsilon PAR_RIGHT 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
            if (func.isVirtual())
            {
                String funcName = func.getObj().getName();
                // VFT_POINTER
                Code.put(Code.getfield);
                Code.put2(0);
                Code.put(Code.invokevirtual);
                for (int idx = 0; idx < funcName.length(); idx ++)
                {
                    Code.put4((int)funcName.charAt(idx));
                }
                Code.put4(-1);

            }
            else
            {
                Code.put(Code.call);
                // Because Code.call is put then pc  = pc + 1.
                //
                int adr = func.getObj().getAdr() - Code.pc + 1;
                Code.put2(adr);
            }
            listIsVirtualFunction.removeLast();
            RESULT = func;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorFuncCall",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DesignatorFuncCall ::= Designator PAR_LEFT error PAR_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		
           parser.report_error("Uspesan oporavak od greske kod poziva metode/funkcije/staticke metode,  SEMI_COLUMN je resio stvar" , null);
           RESULT = (new ObjResultWrapper()).setSyntaxError(true);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorFuncCall",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ActParsEpsilon ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsEpsilon",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ActParsEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsEpsilon",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$29 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (!dest.isError())
            {
                if (dest.isLeftValue())
                {
                    if ( dest.hasAdditionalParsOnStack() && op == OP_ASSIGN_CODE)
                    {
                        // a i a[i]
                        // c c.x
                        Code.put(Code.pop);
                        // a i
                        // c
                    }
                }
                else
                {
                    semantic_error("Levi izraz kod dodele mora da bude lvalue.", destleft);
                    RESULT = dest.setSemanticError(true);

                }
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$29",125, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AssingmentStatement ::= Designator Assignop NT$29 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!dest.isError() && !expr.isError())
            {
                if (typesAssignable(dest.getObj().getType(), expr.getObj().getType()))
                {
                    if (op != OP_ASSIGN_CODE)
                    {
                        // Vrednost na steku nije duplirana jer
                        // treba samo da se koristi za izracunavanje
                        // Nista za dalje vrednosti.
                        Code.put(op);
                    }
                    Code.store(dest.getObj());
                    if ( (op == OP_ASSIGN_CODE)
                        && !dest.hasAdditionalParsOnStack())
                    {
                        Code.put(Code.pop);
                    }
                }
                else
                {
                    semantic_error("Vrednosti izraza pri dodeli nisu kompatibilne.", destleft);
                    RESULT = dest.setSemanticError(true);
                    }
            }
            else
            {
                RESULT = dest.propagateError(expr);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssingmentStatement",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$30 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        if (!dest.isError())
        {
            if (dest.isLeftValue())
            {
                if ( dest.hasAdditionalParsOnStack() && op == OP_ASSIGN_CODE)
                {
                    // a i a[i]
                    // c c.x
                    Code.put(Code.pop);
                    // a i
                    // c
                }
            }
            else
            {
                semantic_error("Levi izraz kod dodele mora da bude lvalue.", destleft);
                RESULT = dest.setSemanticError(true);

            }
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$30",126, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AssingmentStatementOrErrorSemi ::= Designator Assignop NT$30 ExpOrErrorSemi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // Check error.
        //
        if (!dest.isError() && !expr.isError())
        {
            if (typesAssignable(dest.getObj().getType(),
                expr.getObj().getType()))
            {
                if (op != OP_ASSIGN_CODE)
                {
                    // Vrednost na steku nije duplirana jer
                    // treba samo da se koristi za izracunavanje
                    // Nista za dalje vrednosti.
                    Code.put(op);
                }
                Code.store(dest.getObj());
                if ( (op == OP_ASSIGN_CODE)
                    && !dest.hasAdditionalParsOnStack())
                {
                    Code.put(Code.pop);
                }
            }
            else
            {
                semantic_error("Vrednosti izraza pri dodeli nisu kompatibilne.", destleft);
                RESULT = dest.setSemanticError(true);
            }
        }
        else
        {
            RESULT = dest.propagateError(expr);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssingmentStatementOrErrorSemi",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ExpOrErrorSemi ::= Expr SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpOrErrorSemi",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ExpOrErrorSemi ::= error SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		

            parser.report_error("Uspesan oporavak od greske dodele promenljive,  SEMI_COLUMN je resio stvar", null);
            RESULT = (new ObjResultWrapper()).setSyntaxError(true);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpOrErrorSemi",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$31 ::= 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (listIsVirtualFunction.getLast())
            {
                // adr adr par
                Code.put(Code.dup_x1);
                // adr par adr par
                Code.put(Code.pop);
                //adr par adr
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$31",127, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ActPars ::= Expr NT$31 CommaExprListEpsilon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CommaExprListEpsilon ::= CommaExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprListEpsilon",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CommaExprListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprListEpsilon",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CommaExprList ::= CommaExprList CommaExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprList",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CommaExprList ::= CommaExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprList",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CommaExpr ::= COMMA Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (listIsVirtualFunction.getLast())
            {
                // adr adr par
                Code.put(Code.dup_x1);
                // adr par adr par
                Code.put(Code.pop);
                //adr par adr
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExpr",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ForCondition ::= OpOrCondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // IfConditionParRight ::= OpOrCondTermList PAR_RIGHT 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper cond = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                RESULT = cond;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfConditionParRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // IfConditionParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                parser.report_error("Uspesan oporavak od greske prilikom definisanja uslova za if PAR_RIGHT je resila stvar", null);
                RESULT = (new ObjResultWrapper()).setSyntaxError(true);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfConditionParRight",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // OpOrCondTermList ::= OpOrCondTermList OP_OR CondTerm 
            {
              ObjResultWrapper RESULT =null;
		
            Code.put(Code.add);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpOrCondTermList",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // OpOrCondTermList ::= CondTerm 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpOrCondTermList",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CondTerm ::= OpAndCondFactList 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // OpAndCondFactList ::= OpAndCondFactList OP_AND CondFact 
            {
              ObjResultWrapper RESULT =null;
		int leftFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFact = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rightFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFact = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Code.put(Code.mul);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpAndCondFactList",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OpAndCondFactList ::= CondFact 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpAndCondFactList",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CondFact ::= Expr RelOpExprOrEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int compareRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int compareRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper compareRight = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!expr.isSemanticError()
            && ( (null == compareRight) || (!compareRight.isSemanticError())))
        {
            if (null == compareRight)
            {
                if(check_type_and_report(expr.getObj(), TabExt.boolType, exprleft, "Tip kod logickog izraza mora biti boolean"))
                {
                    RESULT = expr.setSemanticError(true);
                }
                RESULT = expr;
            }
            else
            {
                if (typesCompatibile(expr.getObj().getType(), compareRight.getObj().getType()))
                {
                    if ( (expr.isClass() || compareRight.isClass()
                        || expr.isArray() || compareRight.isArray())
                        && ( (compareRight.getRelOp() != Code.eq) &&
                        (compareRight.getRelOp() != Code.ne)))
                    {
                        semantic_error("Kad se porede nizovi/klase sme da se koristi samo != i ==", exprleft);
                        RESULT = (new ObjResultWrapper()).setSemanticError(true);
                    }
                    else
                    {
                        // JCONDFALSE.
                        //
                        Code.putFalseJump(compareRight.getRelOp(), 0);
                        int adrFromWhereToJumpFalse = Code.pc - 2;
                        // TRUE.
                        //
                        Code.put(Code.const_1);
                        Code.putJump(0);
                        int adrFromWhereToJumpTrue = Code.pc - 2;

                        Code.fixup(adrFromWhereToJumpFalse);
                        // False.
                        //
                        Code.put(Code.const_n);
                        // JMP over this
                        Code.fixup(adrFromWhereToJumpTrue);
                        RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", TabExt.boolType));
                    }
                }
                else
                {
                    semantic_error("Tipovi kod poredjenja nisu kompatibilni.", exprleft);
                    RESULT = (new ObjResultWrapper()).setSemanticError(true);
                }
            }

        }
        else
        {
            RESULT = expr.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // RelOpExprOrEpsilon ::= Relop Expr 
            {
              ObjResultWrapper RESULT =null;
		int relOpleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int relOpright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer relOp = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!expr.isError())
            {
                expr.setRelOp(relOp);
            }
            RESULT = expr;

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprOrEpsilon",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // RelOpExprOrEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprOrEpsilon",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Expr ::= OP_SUB AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!term.isError())
        {
            if (check_type_and_report(term.getObj(), Tab.intType, termleft, " Kad se - nalazi ispred nekog izraza, on mora biti int."))
            {
                Code.put(Code.neg);
                term.generateRightValue();
                RESULT = term;
            }
            else
            {
                RESULT = term.setSemanticError(true);
            }
        }
        else
        {
            RESULT = term;
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Expr ::= AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!term.isError())
        {
            term.generateRightValue();
        }
        RESULT = term;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // AddopRightTerm ::= AddopLeftTerm AddopRight AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int leftTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
       if (!leftTerm.isError() && !rightTerm.isError())
       {
        if (
            check_type_and_report(leftTerm.getObj(), Tab.intType, rightTermleft, " Levi sabirak / umanjenik mora biti tipa int.")
            && check_type_and_report(rightTerm.getObj(), Tab.intType, rightTermleft, " Desni sabirak / umanjilac mora biti tipa int."))
            {
                if (leftTerm.isLeftValue())
                {
                    rightTerm.generateRightValue();
                    Code.put(op);
                    if (leftTerm.isArrayElement())
                    {
                        // a i sum
                        Code.put(Code.dup_x2);
                        // sum a i sum
                    }
                    else if (leftTerm.isField())
                    {
                        // c sum
                        Code.put(Code.dup_x1);
                        // sum c sum
                    }
                    else
                    {
                        Code.put(Code.dup);
                    }
                    // sum
                    Code.store(leftTerm.getObj());

                    leftTerm.promoteToConst();
                    RESULT = leftTerm;
                }
                else
                {
                    semantic_error("Kod += -= leva strana treba da bude lvalue");
                    RESULT = leftTerm.setSemanticError(true);
                }
            }
            else
            {
                RESULT = leftTerm.setSemanticError(true);
            }
        }
        else
        {
            RESULT = leftTerm.propagateError(rightTerm);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRightTerm",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // AddopRightTerm ::= AddopLeftTerm 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = type;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRightTerm",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // AddopLeftTerm ::= AddopLeftTerm AddopLeft Term 
            {
              ObjResultWrapper RESULT =null;
		int leftTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!leftTerm.isError() && !rightTerm.isError())
        {
            if (check_type_and_report(leftTerm.getObj(), Tab.intType, leftTermleft, " Tip levog sabirka/umanjenika u zbiru/proizvodu mora da bude int")
                &&
                check_type_and_report(rightTerm.getObj(), Tab.intType, rightTermleft, " Tip desnog sabirka/umanjioca u zbiru/razlici mora biti int"))
                {
                    rightTerm.generateRightValue();
                    Code.put(op);
                    leftTerm.generateRightValue();
                    RESULT = leftTerm;
            }
            else
            {
                RESULT = leftTerm.setSemanticError(true);
            }
        }
        else
        {
            RESULT = leftTerm.propagateError(rightTerm);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeftTerm",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // AddopLeftTerm ::= Term 
            {
              ObjResultWrapper RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = term;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeftTerm",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Term ::= MullopRightFactor 
            {
              ObjResultWrapper RESULT =null;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = rightFactor;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // MullopRightFactor ::= MulopLeftFactor MulopRight MullopRightFactor 
            {
              ObjResultWrapper RESULT =null;
		int leftFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // TODO: Treba dodati provere za polja i sve ostale gluposti
        //
        if (!leftFactor.isError() && !rightFactor.isError())
        {
            if (check_type_and_report(leftFactor.getObj(), Tab.intType, leftFactorleft, " Levi cinilac / deljenik mora biti tipa int.")
            && check_type_and_report(rightFactor.getObj(), Tab.intType, rightFactorleft, " Desni cinilac / delilac mora biti tipa int."))
            {
                if (leftFactor.isLeftValue())
                {
                    rightFactor.generateRightValue();
                    Code.put(op);
                    if (leftFactor.isArrayElement())
                    {
                        Code.put(Code.dup_x2);
                    }
                    else if (leftFactor.isField())
                    {
                        Code.put(Code.dup_x1);
                    }
                    else
                    {
                        Code.put(Code.dup);
                    }

                    Code.store(leftFactor.getObj());
                    leftFactor.promoteToConst();
                    RESULT = leftFactor;
                }
                else
                {
                    semantic_error("Kod /= *= %= leva strana treba da bude lvalue.", rightFactorleft);
                    RESULT = leftFactor.setSemanticError(true);
                }
            }
        else
        {
            RESULT = leftFactor.setSemanticError(true);
        }
    }
    else
    {
        RESULT = leftFactor.propagateError(rightFactor);
    }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MullopRightFactor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // MullopRightFactor ::= MulopLeftFactor 
            {
              ObjResultWrapper RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper factor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = factor;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MullopRightFactor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // MulopLeftFactor ::= MulopLeftFactor MulopLeft Factor 
            {
              ObjResultWrapper RESULT =null;
		int leftFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!leftFactor.isError() && !rightFactor.isError())
            {
                if (check_type_and_report(leftFactor.getObj(), Tab.intType, leftFactorleft, " Tip levog cinioca/deljenika u proizvodu mora da bude int")
                &&
                    check_type_and_report(rightFactor.getObj(), Tab.intType, rightFactorleft, " Tip desnog cinioca/delioca mora biti int"))
                {
                    rightFactor.generateRightValue();
                    Code.put(op);
                    leftFactor.generateRightValue();
                    RESULT = leftFactor;
                }
                else
                {
                    RESULT = leftFactor.setSemanticError(true);
                }
            }
            else
            {
                RESULT = leftFactor.propagateError(rightFactor);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeftFactor",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // MulopLeftFactor ::= Factor 
            {
              ObjResultWrapper RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper factor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = factor;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeftFactor",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Factor ::= DesignatorFuncCall 
            {
              ObjResultWrapper RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = func;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Factor ::= Designator 
            {
              ObjResultWrapper RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper designator = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = designator;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Factor ::= ConstValue 
            {
              ObjResultWrapper RESULT =null;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Code.load(constValue);
            RESULT = new ObjResultWrapper(constValue);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Factor ::= NEW Type BracketExprEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprWrapleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprWrapright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprWrap = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (null != exprWrap)
            {
                if (!exprWrap.isSemanticError()
                    && !type.isSemanticError()
                    && check_type_and_report(exprWrap.getObj(),
                                          Tab.intType,
                                         exprWrapleft,
                                         "Tip izraza kod NEW operatora sa nizom mora da bude int"))
                {
                    Code.put(Code.newarray);
                    if (typesEqual(type.getObj().getType(), Tab.charType))
                    {
                        Code.put(0);
                    }
                    else
                    {
                        Code.put(1);
                    }
                    Struct struct = new Struct(Struct.Array, type.getObj().getType());
                    RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", struct));
                }
                else
                {
                    RESULT = (new ObjResultWrapper()).setSemanticError(true);
                }
            }
            else
            {
                if (!type.isSemanticError())
                {
                    // For sur is type if it's not a semantic error
                    if  (type.getObj().getType().getKind() == Struct.Class)
                    {
                        Code.put(Code.new_);
                        Code.put2(type.getObj().getType().getNumberOfFields() * INT_SIZE);
                        // adr
                        Code.put(Code.dup);
                        // adr adr
                        Code.loadConst(type.getObj().getAdr());
                        // adr adr val
                        // TODO add check if class is not initialized.
                        //
                        Code.store(type.getObj().getType().getMembersTable().searchKey(VFT_POINTER_NAME));
                        RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", type.getObj().getType()));
                    }
                    else
                    {
                        semantic_error(type.getObj().getName() + " nije tip unutrasnje klase", typeleft);
                        RESULT = (new ObjResultWrapper()).setSemanticError(true);
                    }
                }
                else
                {
                    RESULT = (new ObjResultWrapper()).setSemanticError(true);
                }

            }
            // TO DO : Add check of errors.
            //
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Factor ::= PAR_LEFT Expr PAR_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper result = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            RESULT = result;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // BracketExprEpsilon ::= BRACKET_LEFT Expr BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                RESULT = expr;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketExprEpsilon",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // BracketExprEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
                RESULT = null;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketExprEpsilon",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$32 ::= 
            {
              ObjResultWrapper RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curObjWrappFieldOrElem = find_for_use_and_report(name, nameleft, name);

        if (!curObjWrappFieldOrElem.isError())
        {
            if (isInClass)
            {

                if (curObjWrappFieldOrElem.isField())
                {
                    Code.load(Tab.find("this"));
                    Code.put(Code.dup);
                }
                else if ((curObjWrappFieldOrElem.getObj().getKind() == Obj.Meth)
                    && (!isMethodStatic(curObjWrappFieldOrElem.getObj())) )
                {
                    Code.load(Tab.find("this"));
                    curObjWrappFieldOrElem.setVirtual(true);
                }
            }

            listCurObjWrapperFieldOrElem.addLast(curObjWrappFieldOrElem);
            if (curObjWrappFieldOrElem.loadable())
            {
                Code.load(curObjWrappFieldOrElem.getObj());
            }

        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$32",128, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Designator ::= IDENT NT$32 DotIdentOrBracketExprListEpsilon 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!curObjWrappFieldOrElem.isError())
        {
            if(objWrapper == null)
            {
                RESULT = curObjWrappFieldOrElem;
            }
            else if ( (objWrapper != null) && (!objWrapper.isError()) )
            {
                RESULT = objWrapper;
            }
            else
            {
                RESULT = objWrapper;
            }
        }
        else
        {
            RESULT = curObjWrappFieldOrElem;
        }

        if (!curObjWrappFieldOrElem.isError())
        {
            listCurObjWrapperFieldOrElem.removeLast();
            if (listCurObjWrapperFieldOrElem.size() != 0)
            {
                curObjWrappFieldOrElem = listCurObjWrapperFieldOrElem.getLast();
            }
            else
            {
                curObjWrappFieldOrElem = null;
            }
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // DotIdentOrBracketExprListEpsilon ::= DotIdentOrBracketExprList 
            {
              ObjResultWrapper RESULT =null;
		int objWrapleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrap = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = objWrap;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprListEpsilon",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // DotIdentOrBracketExprListEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprListEpsilon",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // DotIdentOrBracketExprList ::= DotIdentOrBracketExprList DotIdentOrBracketExpr 
            {
              ObjResultWrapper RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper left = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (left.isError() || objWrapper.isError())
            {
                objWrapper.propagateError(left);
            }
            else
            {
                RESULT = objWrapper;
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprList",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // DotIdentOrBracketExprList ::= DotIdentOrBracketExpr 
            {
              ObjResultWrapper RESULT =null;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

            RESULT = objWrapper;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprList",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // DotIdentOrBracketExpr ::= DOT IDENT 
            {
              ObjResultWrapper RESULT =null;
		int memberNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int memberNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String memberName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!curObjWrappFieldOrElem.isError())
        {
            if (curObjWrappFieldOrElem.isClassType())
            {
                Obj obj = curObjWrappFieldOrElem.getObj().getType().getMembersTable().searchKey(memberName);
                if ( (obj == null)
                ||
                ((obj.getKind() != Obj.Meth)
                || (!isMethodStatic(obj))) )
                {
                    // TODO ispisi
                    RESULT = curObjWrappFieldOrElem.setSemanticError(true);
                }
                else
                {
                    curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));

                    RESULT = curObjWrappFieldOrElem;
                }
            }
            else if (curObjWrappFieldOrElem.isClass())
            {
                Obj obj = curObjWrappFieldOrElem.getObj().getType().getMembersTable().searchKey(memberName);
                if ( (obj == null) || ((obj.getKind() != Obj.Fld) && (obj.getKind() != Obj.Meth) ) )
                {
                    RESULT = curObjWrappFieldOrElem.setSemanticError(true);
                }
                else
                {
                    if ( (obj.getKind() == Obj.Meth) && (isMethodStatic(obj)) )
                    {
                        Code.put(Code.pop);
                        curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));
                        RESULT = curObjWrappFieldOrElem;
                    }
                    else
                    {
                        curObjWrappFieldOrElem.generateRightValue();
                        if (obj.getKind() == Obj.Fld)
                        {
                            // x
                            Code.put(Code.dup);
                            // x x
                            Code.load(obj);
                            // x x.i

                            curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));
                            RESULT = curObjWrappFieldOrElem;
                        }
                        else
                        {
                            curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));
                            curObjWrappFieldOrElem.setVirtual(true);
                            RESULT = curObjWrappFieldOrElem;
                        }
                    }
                }
            }
            else
            {
                RESULT = curObjWrappFieldOrElem.setSemanticError(true);
            }
        }
        else
        {
            RESULT = curObjWrappFieldOrElem;
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // NT$33 ::= 
            {
              ObjResultWrapper RESULT =null;

        curObjWrappFieldOrElem.generateRightValue(false);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$33",129, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // DotIdentOrBracketExpr ::= BRACKET_LEFT NT$33 Expr BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        if (!curObjWrappFieldOrElem.isError()
        && !expr.isError())
        {
            if (check_type_and_report(expr.getObj(), Tab.intType,
            exprleft, " indeks niza mora bude tipa int"))
            {

                if (curObjWrappFieldOrElem.isArray())
                {
                    Struct curArrayDotType = curObjWrappFieldOrElem.getObj().getType().getElemType();
                    Obj obj = new Obj(Obj.Elem, "", curArrayDotType);
                    curObjWrappFieldOrElem.copyTo(new ObjResultWrapper(obj));
                    Code.put(Code.dup2);
                    Code.load(obj);
                    RESULT = new ObjResultWrapper(obj);
                }
                else
                {
                    semantic_error("Kad se koriste [] sa leve strane mora biti niz", exprleft);
                    RESULT = curObjWrappFieldOrElem.setSemanticError(true);
                }
            }
            else
            {
                RESULT = curObjWrappFieldOrElem.setSemanticError(true);

            }
        }
        else
        {
            RESULT = curObjWrappFieldOrElem.propagateError(expr);;
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // DotIdentOrBracketExpr ::= BRACKET_LEFT error BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod indeksa niza,  BRACKET_RIGHT je resio stvar" , null);
        RESULT = new ObjResultWrapper().setSyntaxError(true);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Assignop ::= OP_ASSIGN 
            {
              Integer RESULT =null;
		
                RESULT = OP_ASSIGN_CODE;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = op;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = op;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Relop ::= OP_EQ 
            {
              Integer RESULT =null;
		
                RESULT = Code.eq;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Relop ::= OP_NOT_EQ 
            {
              Integer RESULT =null;
		
                RESULT = Code.ne;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Relop ::= OP_GTE 
            {
              Integer RESULT =null;
		
                RESULT = Code.ge;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Relop ::= OP_GREAT 
            {
              Integer RESULT =null;
		
                RESULT = Code.gt;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Relop ::= OP_LESS 
            {
              Integer RESULT =null;
		
                RESULT = Code.lt;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Relop ::= OP_LTE 
            {
              Integer RESULT =null;
		
                RESULT = Code.le;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // AddopLeft ::= OP_ADD 
            {
              Integer RESULT =null;
		
                RESULT = Code.add;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // AddopLeft ::= OP_SUB 
            {
              Integer RESULT =null;
		
                RESULT = Code.sub;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // AddopRight ::= OP_ASSIGN_ADD 
            {
              Integer RESULT =null;
		
                RESULT = Code.add;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // AddopRight ::= OP_ASSIGN_SUB 
            {
              Integer RESULT =null;
		
                RESULT = Code.sub;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // MulopLeft ::= OP_MUL 
            {
              Integer RESULT =null;
		
                RESULT = Code.mul;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",94, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // MulopLeft ::= OP_DIV 
            {
              Integer RESULT =null;
		
                RESULT = Code.div;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",94, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // MulopLeft ::= OP_MOD 
            {
              Integer RESULT =null;
		
                RESULT = Code.rem;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",94, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // MulopRight ::= OP_ASSIGN_MUL 
            {
              Integer RESULT =null;
		
                RESULT = Code.mul;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",95, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // MulopRight ::= OP_ASSIGN_DIV 
            {
              Integer RESULT =null;
		
                RESULT = Code.div;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",95, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // MulopRight ::= OP_ASSIGN_MOD 
            {
              Integer RESULT =null;
		
                RESULT = Code.rem;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",95, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MJParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
              return CUP$MJParser$do_action_part00000000(
                               CUP$MJParser$act_num,
                               CUP$MJParser$parser,
                               CUP$MJParser$stack,
                               CUP$MJParser$top);
    }
}

}
