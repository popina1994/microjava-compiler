
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import java.io.*;
import java.util.LinkedList;
import java.util.Collection;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.*;
import rs.etf.pp1.symboltable.visitors.SymbolTableVisitor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MJParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\337\000\002\140\002\000\002\141\002\000\002\002" +
    "\012\000\002\002\004\000\002\003\003\000\002\003\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\142\002\000\002" +
    "\006\005\000\002\021\004\000\002\021\003\000\002\023" +
    "\004\000\002\023\004\000\002\022\004\000\002\022\003" +
    "\000\002\024\004\000\002\024\004\000\002\007\003\000" +
    "\002\007\002\000\002\010\004\000\002\010\003\000\002" +
    "\143\002\000\002\144\002\000\002\011\010\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\014\003\000" +
    "\002\016\003\000\002\015\003\000\002\020\004\000\002" +
    "\025\004\000\002\025\002\000\002\145\002\000\002\146" +
    "\002\000\002\147\002\000\002\150\002\000\002\151\002" +
    "\000\002\026\016\000\002\027\004\000\002\027\002\000" +
    "\002\030\003\000\002\030\002\000\002\031\004\000\002" +
    "\031\003\000\002\152\002\000\002\032\006\000\002\033" +
    "\005\000\002\033\003\000\002\034\005\000\002\034\002" +
    "\000\002\153\002\000\002\154\002\000\002\155\002\000" +
    "\002\156\002\000\002\157\002\000\002\160\002\000\002" +
    "\035\020\000\002\036\003\000\002\036\002\000\002\037" +
    "\003\000\002\037\003\000\002\052\003\000\002\052\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\004\000" +
    "\002\041\003\000\002\043\004\000\002\043\003\000\002" +
    "\161\002\000\002\042\006\000\002\042\004\000\002\044" +
    "\005\000\002\044\003\000\002\045\004\000\002\045\004" +
    "\000\002\046\003\000\002\046\002\000\002\047\004\000" +
    "\002\047\003\000\002\054\004\000\002\054\003\000\002" +
    "\050\004\000\002\050\003\000\002\053\004\000\002\053" +
    "\004\000\002\055\004\000\002\055\004\000\002\162\002" +
    "\000\002\051\005\000\002\056\003\000\002\057\003\000" +
    "\002\163\002\000\002\164\002\000\002\057\011\000\002" +
    "\165\002\000\002\166\002\000\002\167\002\000\002\057" +
    "\014\000\002\057\011\000\002\057\011\000\002\057\011" +
    "\000\002\057\011\000\002\057\011\000\002\057\011\000" +
    "\002\057\011\000\002\057\007\000\002\057\005\000\002" +
    "\057\004\000\002\057\004\000\002\057\005\000\002\057" +
    "\007\000\002\057\010\000\002\057\005\000\002\060\004" +
    "\000\002\060\002\000\002\061\003\000\002\061\002\000" +
    "\002\074\004\000\002\074\003\000\002\074\004\000\002" +
    "\063\004\000\002\063\002\000\002\077\003\000\002\077" +
    "\003\000\002\077\002\000\002\075\004\000\002\075\004" +
    "\000\002\075\003\000\002\075\004\000\002\072\004\000" +
    "\002\072\003\000\002\064\003\000\002\064\003\000\002" +
    "\101\004\000\002\103\003\000\002\103\003\000\002\102" +
    "\006\000\002\065\003\000\002\065\002\000\002\170\002" +
    "\000\002\076\006\000\002\171\002\000\002\100\006\000" +
    "\002\105\003\000\002\104\004\000\002\104\004\000\002" +
    "\172\002\000\002\066\005\000\002\067\003\000\002\067" +
    "\002\000\002\070\004\000\002\070\003\000\002\071\004" +
    "\000\002\106\003\000\002\062\004\000\002\062\004\000" +
    "\002\107\005\000\002\107\003\000\002\110\003\000\002" +
    "\111\005\000\002\111\003\000\002\173\002\000\002\112" +
    "\005\000\002\113\004\000\002\113\002\000\002\114\004" +
    "\000\002\115\003\000\002\115\002\000\002\116\005\000" +
    "\002\116\003\000\002\117\005\000\002\117\003\000\002" +
    "\120\003\000\002\121\005\000\002\121\003\000\002\122" +
    "\005\000\002\122\003\000\002\123\003\000\002\123\003" +
    "\000\002\123\003\000\002\123\005\000\002\123\005\000" +
    "\002\124\005\000\002\124\002\000\002\125\005\000\002" +
    "\125\002\000\002\174\002\000\002\126\005\000\002\127" +
    "\003\000\002\127\002\000\002\130\004\000\002\130\003" +
    "\000\002\131\004\000\002\131\005\000\002\131\005\000" +
    "\002\132\003\000\002\132\003\000\002\132\003\000\002" +
    "\133\003\000\002\133\003\000\002\133\003\000\002\133" +
    "\003\000\002\133\003\000\002\133\003\000\002\134\003" +
    "\000\002\134\003\000\002\135\003\000\002\135\003\000" +
    "\002\136\003\000\002\136\003\000\002\136\003\000\002" +
    "\137\003\000\002\137\003\000\002\137\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\004\004\001\001\002\000\004\002\u014f\001" +
    "\002\000\004\004\006\001\002\000\004\023\007\001\002" +
    "\000\012\007\000\011\000\023\000\063\000\001\002\000" +
    "\012\007\021\011\022\023\013\063\ufffc\001\002\000\006" +
    "\003\ufff6\023\ufff6\001\002\000\004\063\u013f\001\002\000" +
    "\066\003\uff9f\023\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\054\uff9f\055\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\001\002\000\012\007\ufff8\011\ufff8\023\ufff8\063\ufff8" +
    "\001\002\000\012\007\ufff7\011\ufff7\023\ufff7\063\ufff7\001" +
    "\002\000\012\007\ufffa\011\ufffa\023\ufffa\063\ufffa\001\002" +
    "\000\012\007\021\011\022\023\013\063\ufffd\001\002\000" +
    "\012\007\ufff9\011\ufff9\023\ufff9\063\ufff9\001\002\000\004" +
    "\023\044\001\002\000\004\023\013\001\002\000\004\023" +
    "\uffe8\001\002\000\004\023\026\001\002\000\006\054\uffe7" +
    "\055\040\001\002\000\004\044\030\001\002\000\006\054" +
    "\uffe4\055\uffe4\001\002\000\010\024\035\025\037\026\036" +
    "\001\002\000\056\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\054\uffe1\055\uffe1\060\uffe1\062\uffe1\001\002\000\056" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\054\uffe0\055" +
    "\uffe0\060\uffe0\062\uffe0\001\002\000\056\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\054\uffe2\055\uffe2\060\uffe2\062" +
    "\uffe2\001\002\000\006\054\uffe3\055\uffe3\001\002\000\056" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\054\uffdf\055" +
    "\uffdf\060\uffdf\062\uffdf\001\002\000\056\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\054\uffde\055\uffde\060\uffde\062" +
    "\uffde\001\002\000\056\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\054\uffdd\055\uffdd\060\uffdd\062\uffdd\001\002\000" +
    "\004\023\026\001\002\000\004\054\042\001\002\000\012" +
    "\007\uffe6\011\uffe6\023\uffe6\063\uffe6\001\002\000\006\054" +
    "\uffe5\055\uffe5\001\002\000\006\021\uffd9\063\uffd9\001\002" +
    "\000\006\021\046\063\uffd2\001\002\000\004\023\013\001" +
    "\002\000\004\063\uffd8\001\002\000\004\063\051\001\002" +
    "\000\010\023\uffd7\063\uffd7\064\uffd7\001\002\000\010\023" +
    "\013\063\uffd0\064\uffd0\001\002\000\006\063\uffd6\064\uffd6" +
    "\001\002\000\004\023\uffcd\001\002\000\010\023\013\063" +
    "\uffd1\064\uffd1\001\002\000\010\023\uffce\063\uffce\064\uffce" +
    "\001\002\000\010\023\uffcf\063\uffcf\064\uffcf\001\002\000" +
    "\004\023\063\001\002\000\006\054\uffca\055\uffca\001\002" +
    "\000\006\054\070\055\067\001\002\000\012\054\uffda\055" +
    "\uffda\060\uffda\061\065\001\002\000\010\054\uffdc\055\uffdc" +
    "\060\uffdc\001\002\000\004\062\066\001\002\000\010\054" +
    "\uffdb\055\uffdb\060\uffdb\001\002\000\004\023\063\001\002" +
    "\000\010\023\uffcc\063\uffcc\064\uffcc\001\002\000\006\054" +
    "\uffcb\055\uffcb\001\002\000\006\063\073\064\uffc8\001\002" +
    "\000\012\005\100\017\uffbf\023\uffbf\064\uffeb\001\002\000" +
    "\004\064\uffd5\001\002\000\004\064\076\001\002\000\012" +
    "\007\uffd4\011\uffd4\023\uffd4\063\uffd4\001\002\000\004\064" +
    "\u013c\001\002\000\006\017\uffc0\023\uffc0\001\002\000\012" +
    "\005\100\017\uffbf\023\uffbf\064\uffec\001\002\000\012\005" +
    "\uffe9\017\uffe9\023\uffe9\064\uffe9\001\002\000\006\017\uffc7" +
    "\023\uffc7\001\002\000\006\017\106\023\013\001\002\000" +
    "\004\023\uffbe\001\002\000\004\023\uffbd\001\002\000\004" +
    "\023\uffc6\001\002\000\004\023\111\001\002\000\004\057" +
    "\uffc5\001\002\000\004\057\113\001\002\000\010\003\uffc4" +
    "\023\uffc4\060\uffc4\001\002\000\010\003\123\023\013\060" +
    "\116\001\002\000\004\023\uffa1\001\002\000\010\003\uffbb" +
    "\023\uffbb\063\uffbb\001\002\000\010\003\uffa8\023\uffa8\063" +
    "\uffa8\001\002\000\006\055\u0137\060\u0138\001\002\000\010" +
    "\003\uffc3\023\uffc3\063\uffc3\001\002\000\006\003\uffa6\023" +
    "\uffa6\001\002\000\006\055\130\060\131\001\002\000\010" +
    "\003\uffbc\023\uffbc\063\uffbc\001\002\000\006\003\123\023" +
    "\013\001\002\000\006\003\uffa7\023\uffa7\001\002\000\010" +
    "\003\uffa9\023\uffa9\063\uffa9\001\002\000\006\003\uffa4\023" +
    "\uffa4\001\002\000\010\003\uffa2\023\uffa2\063\uffa2\001\002" +
    "\000\010\003\141\023\013\063\135\001\002\000\004\023" +
    "\uffb4\001\002\000\010\003\uffb5\023\uffb5\063\u0130\001\002" +
    "\000\026\006\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9\020" +
    "\uffb9\022\uffb9\023\uffb9\063\uffb9\064\uffb9\001\002\000\026" +
    "\006\uffba\012\uffba\014\uffba\015\uffba\016\uffba\020\uffba\022" +
    "\uffba\023\uffba\063\uffba\064\uffba\001\002\000\026\006\uffb7" +
    "\012\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\022\uffb7\023" +
    "\uffb7\063\uffb7\064\uffb7\001\002\000\006\003\141\023\013" +
    "\001\002\000\006\054\u012c\063\u012d\001\002\000\026\006" +
    "\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\022\uffc2" +
    "\023\uffc2\063\uffc2\064\uffc2\001\002\000\026\006\154\012" +
    "\153\014\156\015\146\016\152\020\162\022\147\023\150" +
    "\063\165\064\uffac\001\002\000\024\044\363\045\272\046" +
    "\270\047\257\050\261\051\254\052\366\053\367\057\300" +
    "\001\002\000\004\064\u0124\001\002\000\004\057\u0120\001" +
    "\002\000\004\054\u011f\001\002\000\072\027\uff3e\030\uff3e" +
    "\031\uff3e\032\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037" +
    "\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e" +
    "\046\uff3e\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054" +
    "\uff3e\055\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e" +
    "\001\002\000\004\054\u0112\001\002\000\022\013\uff51\023" +
    "\uff51\024\uff51\025\uff51\026\uff51\030\203\054\uff84\057\uff51" +
    "\001\002\000\004\057\u0103\001\002\000\004\054\u0102\001" +
    "\002\000\030\006\uff9e\010\uff9e\012\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\020\uff9e\022\uff9e\023\uff9e\063\uff9e\064\uff9e\001" +
    "\002\000\004\057\373\001\002\000\006\054\uff74\060\uff74" +
    "\001\002\000\006\054\uff75\060\uff75\001\002\000\026\006" +
    "\uffaa\012\uffaa\014\uffaa\015\uffaa\016\uffaa\020\uffaa\022\uffaa" +
    "\023\uffaa\063\uffaa\064\uffaa\001\002\000\012\003\174\023" +
    "\150\054\uff7c\057\176\001\002\000\030\006\uff76\010\uff76" +
    "\012\uff76\014\uff76\015\uff76\016\uff76\020\uff76\022\uff76\023" +
    "\uff76\063\uff76\064\uff76\001\002\000\026\006\154\012\153" +
    "\014\156\015\146\016\152\020\162\022\147\023\150\063" +
    "\165\064\uffad\001\002\000\026\006\154\012\153\014\156" +
    "\015\146\016\152\020\162\022\147\023\150\063\165\064" +
    "\uffac\001\002\000\004\064\167\001\002\000\030\006\uff88" +
    "\010\uff88\012\uff88\014\uff88\015\uff88\016\uff88\020\uff88\022" +
    "\uff88\023\uff88\063\uff88\064\uff88\001\002\000\026\006\uffab" +
    "\012\uffab\014\uffab\015\uffab\016\uffab\020\uffab\022\uffab\023" +
    "\uffab\063\uffab\064\uffab\001\002\000\006\054\uff7d\060\uff7d" +
    "\001\002\000\024\044\363\045\272\046\270\047\257\050" +
    "\261\051\254\052\366\053\367\057\300\001\002\000\006" +
    "\054\uff7e\060\uff7e\001\002\000\006\054\343\060\344\001" +
    "\002\000\004\054\330\001\002\000\006\023\150\054\uff7c" +
    "\001\002\000\004\054\200\001\002\000\024\003\uff9a\013" +
    "\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\030\uff9a\054\uff9a" +
    "\057\uff9a\001\002\000\024\003\211\013\uff51\023\uff51\024" +
    "\uff51\025\uff51\026\uff51\030\203\054\207\057\uff51\001\002" +
    "\000\012\042\326\043\uff5a\054\uff5a\060\uff5a\001\002\000" +
    "\016\013\uff52\023\uff52\024\uff52\025\uff52\026\uff52\057\uff52" +
    "\001\002\000\026\034\uff57\035\uff57\036\uff57\037\uff57\040" +
    "\uff57\041\uff57\042\uff57\043\uff57\054\uff57\060\uff57\001\002" +
    "\000\016\013\245\023\150\024\035\025\037\026\036\057" +
    "\240\001\002\000\004\054\233\001\002\000\010\003\uff82" +
    "\023\uff82\060\uff82\001\002\000\012\042\uff58\043\uff58\054" +
    "\uff58\060\uff58\001\002\000\004\054\232\001\002\000\010" +
    "\003\uff99\023\uff99\060\uff99\001\002\000\006\043\215\054" +
    "\uff5f\001\002\000\010\043\uff5b\054\uff5b\060\uff5b\001\002" +
    "\000\020\013\uff51\023\uff51\024\uff51\025\uff51\026\uff51\030" +
    "\203\057\uff51\001\002\000\010\043\uff5c\054\uff5c\060\uff5c" +
    "\001\002\000\010\003\223\023\150\060\220\001\002\000" +
    "\024\006\uff79\012\uff79\014\uff79\015\uff79\016\uff79\020\uff79" +
    "\022\uff79\023\uff79\063\uff79\001\002\000\004\060\231\001" +
    "\002\000\004\060\230\001\002\000\004\060\227\001\002" +
    "\000\024\006\uff98\012\uff98\014\uff98\015\uff98\016\uff98\020" +
    "\uff98\022\uff98\023\uff98\063\uff98\001\002\000\024\006\154" +
    "\012\153\014\156\015\146\016\152\020\162\022\147\023" +
    "\150\063\165\001\002\000\030\006\uff97\010\uff97\012\uff97" +
    "\014\uff97\015\uff97\016\uff97\020\uff97\022\uff97\023\uff97\063" +
    "\uff97\064\uff97\001\002\000\024\006\uff78\012\uff78\014\uff78" +
    "\015\uff78\016\uff78\020\uff78\022\uff78\023\uff78\063\uff78\001" +
    "\002\000\024\006\uff7b\012\uff7b\014\uff7b\015\uff7b\016\uff7b" +
    "\020\uff7b\022\uff7b\023\uff7b\063\uff7b\001\002\000\024\006" +
    "\uff7a\012\uff7a\014\uff7a\015\uff7a\016\uff7a\020\uff7a\022\uff7a" +
    "\023\uff7a\063\uff7a\001\002\000\010\003\uff81\023\uff81\060" +
    "\uff81\001\002\000\010\003\uff83\023\uff83\060\uff83\001\002" +
    "\000\060\027\uff46\030\uff46\031\uff46\032\uff46\033\uff46\034" +
    "\uff46\035\uff46\036\uff46\037\uff46\040\uff46\041\uff46\042\uff46" +
    "\043\uff46\045\uff46\046\uff46\047\uff46\050\uff46\051\uff46\054" +
    "\uff46\055\uff46\057\300\060\uff46\062\uff46\001\002\000\032" +
    "\034\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\042" +
    "\uff53\043\uff53\054\uff53\055\uff53\060\uff53\062\uff53\001\002" +
    "\000\056\027\uff48\030\uff48\031\uff48\032\uff48\033\uff48\034" +
    "\uff48\035\uff48\036\uff48\037\uff48\040\uff48\041\uff48\042\uff48" +
    "\043\uff48\045\uff48\046\uff48\047\uff48\050\uff48\051\uff48\054" +
    "\uff48\055\uff48\060\uff48\062\uff48\001\002\000\042\027\271" +
    "\030\275\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041" +
    "\uff4f\042\uff4f\043\uff4f\045\272\046\270\054\uff4f\055\uff4f" +
    "\060\uff4f\062\uff4f\001\002\000\020\013\uff51\023\uff51\024" +
    "\uff51\025\uff51\026\uff51\030\203\057\uff51\001\002\000\042" +
    "\027\uff4c\030\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040" +
    "\uff4c\041\uff4c\042\uff4c\043\uff4c\045\uff4c\046\uff4c\054\uff4c" +
    "\055\uff4c\060\uff4c\062\uff4c\001\002\000\056\027\uff45\030" +
    "\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45\036\uff45" +
    "\037\uff45\040\uff45\041\uff45\042\uff45\043\uff45\045\uff45\046" +
    "\uff45\047\uff45\050\uff45\051\uff45\054\uff45\055\uff45\060\uff45" +
    "\062\uff45\001\002\000\056\027\uff4a\030\uff4a\031\256\032" +
    "\260\033\263\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a" +
    "\041\uff4a\042\uff4a\043\uff4a\045\uff4a\046\uff4a\047\257\050" +
    "\261\051\254\054\uff4a\055\uff4a\060\uff4a\062\uff4a\001\002" +
    "\000\056\027\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034" +
    "\uff47\035\uff47\036\uff47\037\uff47\040\uff47\041\uff47\042\uff47" +
    "\043\uff47\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47\054" +
    "\uff47\055\uff47\060\uff47\062\uff47\001\002\000\004\023\013" +
    "\001\002\000\042\027\uff4d\030\uff4d\034\uff4d\035\uff4d\036" +
    "\uff4d\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d\045\uff4d" +
    "\046\uff4d\054\uff4d\055\uff4d\060\uff4d\062\uff4d\001\002\000" +
    "\060\027\uff3f\030\uff3f\031\uff3f\032\uff3f\033\uff3f\034\uff3f" +
    "\035\uff3f\036\uff3f\037\uff3f\040\uff3f\041\uff3f\042\uff3f\043" +
    "\uff3f\045\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\054\uff3f" +
    "\055\uff3f\060\uff3f\061\251\062\uff3f\001\002\000\056\027" +
    "\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44\035\uff44" +
    "\036\uff44\037\uff44\040\uff44\041\uff44\042\uff44\043\uff44\045" +
    "\uff44\046\uff44\047\uff44\050\uff44\051\uff44\054\uff44\055\uff44" +
    "\060\uff44\062\uff44\001\002\000\020\013\uff51\023\uff51\024" +
    "\uff51\025\uff51\026\uff51\030\203\057\uff51\001\002\000\004" +
    "\062\253\001\002\000\056\027\uff40\030\uff40\031\uff40\032" +
    "\uff40\033\uff40\034\uff40\035\uff40\036\uff40\037\uff40\040\uff40" +
    "\041\uff40\042\uff40\043\uff40\045\uff40\046\uff40\047\uff40\050" +
    "\uff40\051\uff40\054\uff40\055\uff40\060\uff40\062\uff40\001\002" +
    "\000\022\003\uff23\013\uff23\023\uff23\024\uff23\025\uff23\026" +
    "\uff23\030\uff23\057\uff23\001\002\000\016\013\245\023\150" +
    "\024\035\025\037\026\036\057\240\001\002\000\016\013" +
    "\uff28\023\uff28\024\uff28\025\uff28\026\uff28\057\uff28\001\002" +
    "\000\022\003\uff25\013\uff25\023\uff25\024\uff25\025\uff25\026" +
    "\uff25\030\uff25\057\uff25\001\002\000\016\013\uff27\023\uff27" +
    "\024\uff27\025\uff27\026\uff27\057\uff27\001\002\000\022\003" +
    "\uff24\013\uff24\023\uff24\024\uff24\025\uff24\026\uff24\030\uff24" +
    "\057\uff24\001\002\000\016\013\245\023\150\024\035\025" +
    "\037\026\036\057\240\001\002\000\016\013\uff26\023\uff26" +
    "\024\uff26\025\uff26\026\uff26\057\uff26\001\002\000\056\027" +
    "\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49" +
    "\036\uff49\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49\045" +
    "\uff49\046\uff49\047\uff49\050\uff49\051\uff49\054\uff49\055\uff49" +
    "\060\uff49\062\uff49\001\002\000\042\027\uff4b\030\uff4b\034" +
    "\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\042\uff4b" +
    "\043\uff4b\045\uff4b\046\uff4b\054\uff4b\055\uff4b\060\uff4b\062" +
    "\uff4b\001\002\000\004\060\267\001\002\000\056\027\uff43" +
    "\030\uff43\031\uff43\032\uff43\033\uff43\034\uff43\035\uff43\036" +
    "\uff43\037\uff43\040\uff43\041\uff43\042\uff43\043\uff43\045\uff43" +
    "\046\uff43\047\uff43\050\uff43\051\uff43\054\uff43\055\uff43\060" +
    "\uff43\062\uff43\001\002\000\022\003\uff29\013\uff29\023\uff29" +
    "\024\uff29\025\uff29\026\uff29\030\uff29\057\uff29\001\002\000" +
    "\016\013\uff2c\023\uff2c\024\uff2c\025\uff2c\026\uff2c\057\uff2c" +
    "\001\002\000\022\003\uff2a\013\uff2a\023\uff2a\024\uff2a\025" +
    "\uff2a\026\uff2a\030\uff2a\057\uff2a\001\002\000\016\013\245" +
    "\023\150\024\035\025\037\026\036\057\240\001\002\000" +
    "\016\013\245\023\150\024\035\025\037\026\036\057\240" +
    "\001\002\000\016\013\uff2b\023\uff2b\024\uff2b\025\uff2b\026" +
    "\uff2b\057\uff2b\001\002\000\042\027\uff4e\030\uff4e\034\uff4e" +
    "\035\uff4e\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043" +
    "\uff4e\045\uff4e\046\uff4e\054\uff4e\055\uff4e\060\uff4e\062\uff4e" +
    "\001\002\000\032\034\uff50\035\uff50\036\uff50\037\uff50\040" +
    "\uff50\041\uff50\042\uff50\043\uff50\054\uff50\055\uff50\060\uff50" +
    "\062\uff50\001\002\000\022\013\uff51\023\uff51\024\uff51\025" +
    "\uff51\026\uff51\030\203\057\uff51\060\uff6e\001\002\000\004" +
    "\060\313\001\002\000\004\060\uff6f\001\002\000\006\055" +
    "\uff66\060\uff66\001\002\000\006\055\305\060\uff63\001\002" +
    "\000\020\013\uff51\023\uff51\024\uff51\025\uff51\026\uff51\030" +
    "\203\057\uff51\001\002\000\006\055\305\060\uff64\001\002" +
    "\000\004\060\uff65\001\002\000\006\055\uff61\060\uff61\001" +
    "\002\000\006\055\uff62\060\uff62\001\002\000\006\055\uff60" +
    "\060\uff60\001\002\000\056\027\uff70\030\uff70\031\uff70\032" +
    "\uff70\033\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70" +
    "\041\uff70\042\uff70\043\uff70\045\uff70\046\uff70\047\uff70\050" +
    "\uff70\051\uff70\054\uff70\055\uff70\060\uff70\062\uff70\001\002" +
    "\000\026\034\322\035\317\036\321\037\320\040\323\041" +
    "\315\042\uff54\043\uff54\054\uff54\060\uff54\001\002\000\020" +
    "\013\uff2d\023\uff2d\024\uff2d\025\uff2d\026\uff2d\030\uff2d\057" +
    "\uff2d\001\002\000\012\042\uff56\043\uff56\054\uff56\060\uff56" +
    "\001\002\000\020\013\uff31\023\uff31\024\uff31\025\uff31\026" +
    "\uff31\030\uff31\057\uff31\001\002\000\020\013\uff2e\023\uff2e" +
    "\024\uff2e\025\uff2e\026\uff2e\030\uff2e\057\uff2e\001\002\000" +
    "\020\013\uff2f\023\uff2f\024\uff2f\025\uff2f\026\uff2f\030\uff2f" +
    "\057\uff2f\001\002\000\020\013\uff32\023\uff32\024\uff32\025" +
    "\uff32\026\uff32\030\uff32\057\uff32\001\002\000\020\013\uff30" +
    "\023\uff30\024\uff30\025\uff30\026\uff30\030\uff30\057\uff30\001" +
    "\002\000\020\013\uff51\023\uff51\024\uff51\025\uff51\026\uff51" +
    "\030\203\057\uff51\001\002\000\012\042\uff55\043\uff55\054" +
    "\uff55\060\uff55\001\002\000\020\013\uff51\023\uff51\024\uff51" +
    "\025\uff51\026\uff51\030\203\057\uff51\001\002\000\012\042" +
    "\uff59\043\uff59\054\uff59\060\uff59\001\002\000\022\003\332" +
    "\013\uff51\023\uff51\024\uff51\025\uff51\026\uff51\030\203\057" +
    "\uff51\001\002\000\004\054\340\001\002\000\004\054\333" +
    "\001\002\000\010\003\335\023\150\060\uff7c\001\002\000" +
    "\004\060\337\001\002\000\004\060\336\001\002\000\030" +
    "\006\uff91\010\uff91\012\uff91\014\uff91\015\uff91\016\uff91\020" +
    "\uff91\022\uff91\023\uff91\063\uff91\064\uff91\001\002\000\030" +
    "\006\uff95\010\uff95\012\uff95\014\uff95\015\uff95\016\uff95\020" +
    "\uff95\022\uff95\023\uff95\063\uff95\064\uff95\001\002\000\004" +
    "\003\341\001\002\000\004\060\342\001\002\000\030\006" +
    "\uff94\010\uff94\012\uff94\014\uff94\015\uff94\016\uff94\020\uff94" +
    "\022\uff94\023\uff94\063\uff94\064\uff94\001\002\000\022\003" +
    "\346\013\uff51\023\uff51\024\uff51\025\uff51\026\uff51\030\203" +
    "\057\uff51\001\002\000\030\006\uff8e\010\uff8e\012\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\020\uff8e\022\uff8e\023\uff8e\063\uff8e" +
    "\064\uff8e\001\002\000\004\054\355\001\002\000\006\054" +
    "\347\060\350\001\002\000\010\003\352\023\150\060\uff7c" +
    "\001\002\000\030\006\uff8f\010\uff8f\012\uff8f\014\uff8f\015" +
    "\uff8f\016\uff8f\020\uff8f\022\uff8f\023\uff8f\063\uff8f\064\uff8f" +
    "\001\002\000\004\060\354\001\002\000\004\060\353\001" +
    "\002\000\030\006\uff90\010\uff90\012\uff90\014\uff90\015\uff90" +
    "\016\uff90\020\uff90\022\uff90\023\uff90\063\uff90\064\uff90\001" +
    "\002\000\030\006\uff93\010\uff93\012\uff93\014\uff93\015\uff93" +
    "\016\uff93\020\uff93\022\uff93\023\uff93\063\uff93\064\uff93\001" +
    "\002\000\010\003\357\023\150\060\uff7c\001\002\000\004" +
    "\060\361\001\002\000\004\060\360\001\002\000\030\006" +
    "\uff92\010\uff92\012\uff92\014\uff92\015\uff92\016\uff92\020\uff92" +
    "\022\uff92\023\uff92\063\uff92\064\uff92\001\002\000\030\006" +
    "\uff96\010\uff96\012\uff96\014\uff96\015\uff96\016\uff96\020\uff96" +
    "\022\uff96\023\uff96\063\uff96\064\uff96\001\002\000\022\003" +
    "\uff33\013\uff33\023\uff33\024\uff33\025\uff33\026\uff33\030\uff33" +
    "\057\uff33\001\002\000\022\003\uff35\013\uff35\023\uff35\024" +
    "\uff35\025\uff35\026\uff35\030\uff35\057\uff35\001\002\000\022" +
    "\003\uff34\013\uff34\023\uff34\024\uff34\025\uff34\026\uff34\030" +
    "\uff34\057\uff34\001\002\000\020\013\uff6d\023\uff6d\024\uff6d" +
    "\025\uff6d\026\uff6d\030\uff6d\057\uff6d\001\002\000\006\054" +
    "\uff72\060\uff72\001\002\000\006\054\uff71\060\uff71\001\002" +
    "\000\006\054\uff73\060\uff73\001\002\000\020\013\uff51\023" +
    "\uff51\024\uff51\025\uff51\026\uff51\030\203\057\uff51\001\002" +
    "\000\006\054\uff6c\060\uff6c\001\002\000\020\013\uff51\023" +
    "\uff51\024\uff51\025\uff51\026\uff51\030\203\057\uff51\001\002" +
    "\000\006\055\375\060\uff7f\001\002\000\004\024\u0101\001" +
    "\002\000\004\060\377\001\002\000\004\054\u0100\001\002" +
    "\000\030\006\uff89\010\uff89\012\uff89\014\uff89\015\uff89\016" +
    "\uff89\020\uff89\022\uff89\023\uff89\063\uff89\064\uff89\001\002" +
    "\000\004\060\uff80\001\002\000\030\006\uff8d\010\uff8d\012" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\022\uff8d\023\uff8d" +
    "\063\uff8d\064\uff8d\001\002\000\022\003\u0105\013\uff51\023" +
    "\uff51\024\uff51\025\uff51\026\uff51\030\203\057\uff51\001\002" +
    "\000\024\006\uff9d\012\uff9d\014\uff9d\015\uff9d\016\uff9d\020" +
    "\uff9d\022\uff9d\023\uff9d\063\uff9d\001\002\000\004\060\u0108" +
    "\001\002\000\006\043\215\060\u0107\001\002\000\024\006" +
    "\uff5e\012\uff5e\014\uff5e\015\uff5e\016\uff5e\020\uff5e\022\uff5e" +
    "\023\uff5e\063\uff5e\001\002\000\024\006\uff5d\012\uff5d\014" +
    "\uff5d\015\uff5d\016\uff5d\020\uff5d\022\uff5d\023\uff5d\063\uff5d" +
    "\001\002\000\024\006\154\012\153\014\156\015\146\016" +
    "\152\020\162\022\147\023\150\063\165\001\002\000\030" +
    "\006\uff9c\010\uff9c\012\uff9c\014\uff9c\015\uff9c\016\uff9c\020" +
    "\uff9c\022\uff9c\023\uff9c\063\uff9c\064\uff9c\001\002\000\030" +
    "\006\uff86\010\u010c\012\uff86\014\uff86\015\uff86\016\uff86\020" +
    "\uff86\022\uff86\023\uff86\063\uff86\064\uff86\001\002\000\024" +
    "\006\154\012\153\014\156\015\146\016\152\020\162\022" +
    "\147\023\150\063\165\001\002\000\030\006\uff9b\010\uff9b" +
    "\012\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\022\uff9b\023" +
    "\uff9b\063\uff9b\064\uff9b\001\002\000\030\006\uff87\010\uff87" +
    "\012\uff87\014\uff87\015\uff87\016\uff87\020\uff87\022\uff87\023" +
    "\uff87\063\uff87\064\uff87\001\002\000\004\054\uff85\001\002" +
    "\000\004\054\u0111\001\002\000\030\006\uff8b\010\uff8b\012" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\020\uff8b\022\uff8b\023\uff8b" +
    "\063\uff8b\064\uff8b\001\002\000\030\006\uff77\010\uff77\012" +
    "\uff77\014\uff77\015\uff77\016\uff77\020\uff77\022\uff77\023\uff77" +
    "\063\uff77\064\uff77\001\002\000\072\027\uff3b\030\uff3b\031" +
    "\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b" +
    "\040\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b\045\uff3b\046" +
    "\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b" +
    "\055\uff3b\056\u0118\057\uff3b\060\uff3b\061\u0117\062\uff3b\001" +
    "\002\000\066\027\uff3d\030\uff3d\031\uff3d\032\uff3d\033\uff3d" +
    "\034\uff3d\035\uff3d\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042" +
    "\uff3d\043\uff3d\044\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d" +
    "\051\uff3d\052\uff3d\053\uff3d\054\uff3d\055\uff3d\057\uff3d\060" +
    "\uff3d\062\uff3d\001\002\000\072\027\uff3c\030\uff3c\031\uff3c" +
    "\032\uff3c\033\uff3c\034\uff3c\035\uff3c\036\uff3c\037\uff3c\040" +
    "\uff3c\041\uff3c\042\uff3c\043\uff3c\044\uff3c\045\uff3c\046\uff3c" +
    "\047\uff3c\050\uff3c\051\uff3c\052\uff3c\053\uff3c\054\uff3c\055" +
    "\uff3c\056\u0118\057\uff3c\060\uff3c\061\u0117\062\uff3c\001\002" +
    "\000\072\027\uff39\030\uff39\031\uff39\032\uff39\033\uff39\034" +
    "\uff39\035\uff39\036\uff39\037\uff39\040\uff39\041\uff39\042\uff39" +
    "\043\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050\uff39\051" +
    "\uff39\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39\057\uff39" +
    "\060\uff39\061\uff39\062\uff39\001\002\000\022\003\u011a\013" +
    "\uff51\023\uff51\024\uff51\025\uff51\026\uff51\030\203\057\uff51" +
    "\001\002\000\004\023\u0119\001\002\000\072\027\uff38\030" +
    "\uff38\031\uff38\032\uff38\033\uff38\034\uff38\035\uff38\036\uff38" +
    "\037\uff38\040\uff38\041\uff38\042\uff38\043\uff38\044\uff38\045" +
    "\uff38\046\uff38\047\uff38\050\uff38\051\uff38\052\uff38\053\uff38" +
    "\054\uff38\055\uff38\056\uff38\057\uff38\060\uff38\061\uff38\062" +
    "\uff38\001\002\000\004\062\u011d\001\002\000\004\062\u011c" +
    "\001\002\000\072\027\uff37\030\uff37\031\uff37\032\uff37\033" +
    "\uff37\034\uff37\035\uff37\036\uff37\037\uff37\040\uff37\041\uff37" +
    "\042\uff37\043\uff37\044\uff37\045\uff37\046\uff37\047\uff37\050" +
    "\uff37\051\uff37\052\uff37\053\uff37\054\uff37\055\uff37\056\uff37" +
    "\057\uff37\060\uff37\061\uff37\062\uff37\001\002\000\072\027" +
    "\uff36\030\uff36\031\uff36\032\uff36\033\uff36\034\uff36\035\uff36" +
    "\036\uff36\037\uff36\040\uff36\041\uff36\042\uff36\043\uff36\044" +
    "\uff36\045\uff36\046\uff36\047\uff36\050\uff36\051\uff36\052\uff36" +
    "\053\uff36\054\uff36\055\uff36\056\uff36\057\uff36\060\uff36\061" +
    "\uff36\062\uff36\001\002\000\072\027\uff3a\030\uff3a\031\uff3a" +
    "\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040" +
    "\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a" +
    "\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054\uff3a\055" +
    "\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a\001\002" +
    "\000\030\006\uff8c\010\uff8c\012\uff8c\014\uff8c\015\uff8c\016" +
    "\uff8c\020\uff8c\022\uff8c\023\uff8c\063\uff8c\064\uff8c\001\002" +
    "\000\004\023\150\001\002\000\004\060\u0122\001\002\000" +
    "\004\054\u0123\001\002\000\030\006\uff8a\010\uff8a\012\uff8a" +
    "\014\uff8a\015\uff8a\016\uff8a\020\uff8a\022\uff8a\023\uff8a\063" +
    "\uff8a\064\uff8a\001\002\000\012\005\uffc1\017\uffc1\023\uffc1" +
    "\064\uffc1\001\002\000\022\003\uff6b\013\uff6b\023\uff6b\024" +
    "\uff6b\025\uff6b\026\uff6b\030\uff6b\057\uff6b\001\002\000\022" +
    "\003\u0127\013\uff51\023\uff51\024\uff51\025\uff51\026\uff51\030" +
    "\203\057\uff51\001\002\000\004\054\u012b\001\002\000\004" +
    "\054\u012a\001\002\000\030\006\uff6a\010\uff6a\012\uff6a\014" +
    "\uff6a\015\uff6a\016\uff6a\020\uff6a\022\uff6a\023\uff6a\063\uff6a" +
    "\064\uff6a\001\002\000\030\006\uff68\010\uff68\012\uff68\014" +
    "\uff68\015\uff68\016\uff68\020\uff68\022\uff68\023\uff68\063\uff68" +
    "\064\uff68\001\002\000\030\006\uff67\010\uff67\012\uff67\014" +
    "\uff67\015\uff67\016\uff67\020\uff67\022\uff67\023\uff67\063\uff67" +
    "\064\uff67\001\002\000\010\003\uffb2\023\uffb2\063\uffb2\001" +
    "\002\000\026\006\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\020\uffaf\022\uffaf\023\uffaf\063\uffaf\064\uffaf\001\002\000" +
    "\026\006\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8" +
    "\022\uffb8\023\uffb8\063\uffb8\064\uffb8\001\002\000\010\003" +
    "\uffb6\023\uffb6\063\u0130\001\002\000\026\006\uffae\012\uffae" +
    "\014\uffae\015\uffae\016\uffae\020\uffae\022\uffae\023\uffae\063" +
    "\uffae\064\uffae\001\002\000\004\023\063\001\002\000\006" +
    "\054\uffb0\055\uffb0\001\002\000\006\054\u0135\055\u0134\001" +
    "\002\000\004\023\063\001\002\000\010\003\uffb3\023\uffb3" +
    "\063\uffb3\001\002\000\006\054\uffb1\055\uffb1\001\002\000" +
    "\006\003\uffa5\023\uffa5\001\002\000\010\003\uffa3\023\uffa3" +
    "\063\uffa3\001\002\000\004\023\063\001\002\000\006\055" +
    "\uffa0\060\uffa0\001\002\000\012\005\uffea\017\uffea\023\uffea" +
    "\064\uffea\001\002\000\004\064\uffc9\001\002\000\004\063" +
    "\uffd3\001\002\000\012\007\ufffb\011\ufffb\023\ufffb\063\ufffb" +
    "\001\002\000\012\005\100\017\uffbf\023\uffbf\064\uffeb\001" +
    "\002\000\004\064\u0141\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\u0144\023\063\001\002\000\006\054\u014e\055" +
    "\u014d\001\002\000\006\054\u014c\055\u014b\001\002\000\006" +
    "\003\uffef\023\uffef\001\002\000\012\007\ufff5\011\ufff5\023" +
    "\ufff5\063\ufff5\001\002\000\006\003\u0144\023\063\001\002" +
    "\000\012\007\ufff3\011\ufff3\023\ufff3\063\ufff3\001\002\000" +
    "\006\003\ufff0\023\ufff0\001\002\000\012\007\ufff4\011\ufff4" +
    "\023\ufff4\063\ufff4\001\002\000\006\003\uffed\023\uffed\001" +
    "\002\000\012\007\ufff1\011\ufff1\023\ufff1\063\ufff1\001\002" +
    "\000\006\003\uffee\023\uffee\001\002\000\012\007\ufff2\011" +
    "\ufff2\023\ufff2\063\ufff2\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\006\002\003\140\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\141\007" +
    "\001\001\000\020\003\011\004\016\005\015\006\013\011" +
    "\017\026\014\056\010\001\001\000\004\142\u0141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\u013d\006\013" +
    "\011\017\026\014\056\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\022\001\001\000\004\143\023" +
    "\001\001\000\006\012\024\013\026\001\001\000\004\144" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\032\015\031\016\030\017\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\145\044\001\001\000\004\027" +
    "\046\001\001\000\004\056\u013c\001\001\000\004\146\047" +
    "\001\001\000\002\001\001\000\004\147\051\001\001\000" +
    "\012\030\052\031\054\032\055\056\053\001\001\000\004" +
    "\150\071\001\001\000\004\152\057\001\001\000\006\032" +
    "\056\056\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\060\033\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\073" +
    "\001\001\000\012\007\076\010\100\035\101\036\102\001" +
    "\001\000\004\151\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\u013a\036\102\001\001\000\002\001\001\000\004\153\103" +
    "\001\001\000\006\037\106\056\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\154\107\001\001\000\002" +
    "\001\001\000\004\155\111\001\001\000\002\001\001\000" +
    "\004\156\113\001\001\000\020\050\124\051\117\052\120" +
    "\053\121\054\123\055\116\056\114\001\001\000\004\162" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\157\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\051\117\053\125" +
    "\055\126\056\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\040\141" +
    "\041\135\042\133\043\137\045\136\056\132\001\001\000" +
    "\004\161\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\042\u012e\045" +
    "\u012d\056\132\001\001\000\002\001\001\000\004\160\142" +
    "\001\001\000\024\046\144\047\163\057\160\064\150\072" +
    "\154\100\162\101\157\102\156\126\143\001\001\000\012" +
    "\103\367\132\u0124\135\363\137\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\174\u0112" +
    "\001\001\000\002\001\001\000\010\061\u010f\114\u010e\115" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\064\172\076\170\077\174" +
    "\101\157\102\156\126\171\001\001\000\002\001\001\000" +
    "\020\057\167\064\150\072\154\100\162\101\157\102\156" +
    "\126\143\001\001\000\024\046\165\047\163\057\160\064" +
    "\150\072\154\100\162\101\157\102\156\126\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\103\367\132\364\135\363\137\361" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\064\172\076\170\077\176\101\157\102\156" +
    "\126\171\001\001\000\002\001\001\000\004\165\200\001" +
    "\001\000\022\074\211\106\205\107\212\110\213\111\201" +
    "\112\207\114\203\115\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\173\313\001\001\000\032\014\032" +
    "\015\031\016\030\017\241\102\243\116\234\117\236\120" +
    "\245\121\240\122\242\123\235\126\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\166\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\110\215\111\201\112\207\114\203\115" +
    "\204\001\001\000\002\001\001\000\016\064\221\075\223" +
    "\076\220\101\157\102\156\126\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\167\224\001\001\000\020\057\225\064\150\072" +
    "\154\100\162\101\157\102\156\126\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\134\273\135" +
    "\272\001\001\000\006\114\265\115\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\136\261\137\254\001" +
    "\001\000\002\001\001\000\004\056\246\001\001\000\002" +
    "\001\001\000\004\125\247\001\001\000\002\001\001\000" +
    "\006\114\251\115\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\032\015\031\016" +
    "\030\017\241\102\243\121\264\122\242\123\235\126\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\032\015\031\016\030" +
    "\017\241\102\243\123\263\126\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\014\032\015\031\016\030\017\241" +
    "\102\243\116\276\117\236\120\245\121\240\122\242\123" +
    "\235\126\233\001\001\000\026\014\032\015\031\016\030" +
    "\017\241\102\243\120\275\121\240\122\242\123\235\126" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\065\300\066\301\114\302\115\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\172\303" +
    "\001\001\000\010\067\306\070\305\071\307\001\001\000" +
    "\006\114\311\115\204\001\001\000\004\071\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\113\315\133\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\114\324\115\204\001\001\000" +
    "\002\001\001\000\010\112\326\114\203\115\204\001\001" +
    "\000\002\001\001\000\020\106\330\107\212\110\213\111" +
    "\201\112\207\114\203\115\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\064\172\076\170\077\333\101" +
    "\157\102\156\126\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\106\344" +
    "\107\212\110\213\111\201\112\207\114\203\115\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\064\172\076\170\077\350\101\157\102\156\126" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\064" +
    "\172\076\170\077\355\101\157\102\156\126\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\170\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\114\371\115\204" +
    "\001\001\000\002\001\001\000\006\114\373\115\204\001" +
    "\001\000\004\063\375\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\062\u0103\107\u0105\110\213" +
    "\111\201\112\207\114\203\115\204\001\001\000\004\163" +
    "\u0108\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\057\u0109\064\150\072" +
    "\154\100\162\101\157\102\156\126\143\001\001\000\004" +
    "\164\u010a\001\001\000\004\060\u010c\001\001\000\020\057" +
    "\u010d\064\150\072\154\100\162\101\157\102\156\126\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\127\u0113\130\u0114\131\u0115\001\001\000\002\001" +
    "\001\000\004\131\u011d\001\001\000\002\001\001\000\006" +
    "\114\u011a\115\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\126\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\171\u0125\001" +
    "\001\000\010\104\u0128\114\u0127\115\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\u0131\044\u0132\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0139\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\u013f\010\100\035\101\036\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\u0142\021\u0145\022\u0146" +
    "\023\u0147\024\u0144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\u0142" +
    "\023\u0149\024\u0148\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    Tab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null)
        log.debug(s.toString() + " " + s.value.toString());
    return s;

    }



    public static class DumpUpgradeSymbolTableVisitor extends SymbolTableVisitor
    {
        protected StringBuilder output = new StringBuilder();
        protected final String indent = "   ";
        protected StringBuilder currentIndent = new StringBuilder();

        protected void nextIndentationLevel() {
            currentIndent.append(indent);
        }

        protected void previousIndentationLevel() {
            if (currentIndent.length() > 0)
                currentIndent.setLength(currentIndent.length()-indent.length());
        }


        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitObjNode(symboltable.Obj)
         */
        @Override
        public void visitObjNode(Obj objToVisit) {
            //output.append("[");
            switch (objToVisit.getKind()) {
            case Obj.Con:  output.append("Con "); break;
            case Obj.Var:  output.append("Var "); break;
            case Obj.Type: output.append("Type "); break;
            case Obj.Meth: output.append("Meth "); break;
            case Obj.Fld:  output.append("Fld "); break;
            case Obj.Prog: output.append("Prog "); break;
            }

            output.append(objToVisit.getName());
            output.append(": ");

            if ( (objToVisit.getKind() == Obj.Meth) && (objToVisit.getType().getKind() == Struct.Class))
            {
                output.append("Class ");
                output.append(objToVisit.getType());
                output.append(", ");
                output.append("Adr:" + objToVisit.getAdr());
                output.append(", ");
                output.append("Level:" + objToVisit.getLevel() + " ");
            }
            else
            {
                objToVisit.getType().accept(this);
                output.append(", ");
                output.append("Adr:" + objToVisit.getAdr());
                output.append(", ");
                output.append("Level:" + objToVisit.getLevel() + " ");
            }

            if (objToVisit.getKind() == Obj.Prog || objToVisit.getKind() == Obj.Meth) {
                output.append("\n");
                nextIndentationLevel();
            }


            for (Obj o : objToVisit.getLocalSymbols()) {
                output.append(currentIndent.toString());
                if ((objToVisit.getKind() == Obj.Meth) &&(o.getType().getKind() == Struct.Class))
                {
                    output.append("Var ");
                    output.append(o.getName());
                    output.append(": ");
                    output.append("Class ");
                    output.append(o.getType());
                    output.append(", ");
                    output.append("Adr:" + o.getAdr());
                    output.append(", ");
                    output.append("Level:" + o.getLevel() + " ");
                }
                else
                {
                    o.accept(this);
                }
                output.append("\n");
            }

            if (objToVisit.getKind() == Obj.Prog || objToVisit.getKind() == Obj.Meth)
                previousIndentationLevel();

            //output.append("]");

        }

        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitScopeNode(symboltable.Scope)
         */
        @Override
        public void visitScopeNode(Scope scope) {
            for (Obj o : scope.values()) {
                o.accept(this);
                output.append("\n");
            }
        }

        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitStructNode(symboltable.Struct)
         */
        @Override
        public void visitStructNode(Struct structToVisit) {
            switch (structToVisit.getKind()) {
            case Struct.None:
                output.append("notype");
                break;
            case Struct.Int:
                output.append("int");
                break;
            case Struct.Char:
                output.append("char");
                break;
            case Struct.Bool:
                output.append("bool");
                break;
            case Struct.Array:
                output.append("Arr of ");

                switch (structToVisit.getElemType().getKind()) {
                case Struct.None:
                    output.append("notype");
                    break;
                case Struct.Int:
                    output.append("int");
                    break;
                case Struct.Char:
                    output.append("char");
                    break;
                case Struct.Class:
                    output.append("Class");
                    break;
                case Struct.Bool:
                  output.append("bool");
                    break;
                }
                break;
            case Struct.Class:
                output.append("Class [\n");
                nextIndentationLevel();
                for (Obj obj : structToVisit.getMembers()) {
                    output.append(currentIndent.toString());
                    obj.accept(this);
                    if (obj.getKind() == Obj.Fld)
                    {
                        output.append("\n");
                    }
                }
                previousIndentationLevel();
                output.append(currentIndent.toString());
                output.append("]");
                break;
            }

        }

        public String getOutput() {
            StringBuilder tmp = output;
            output = new StringBuilder("");
            return tmp.toString();
        }

    }

    static class TabExt
    {
        static Struct boolType = new Struct(Struct.Bool);
        static SymbolTableVisitor symbolTableVisitor = new DumpUpgradeSymbolTableVisitor();
        static Obj programObj = null;
        static Obj curMethod = null;
        static Obj curClass = null;
        static boolean doesMainExist = false;
        static int staticDataCnt = 0;
    }

    public static class ObjResultWrapper {
        Obj obj;
        boolean isRightValue;
        boolean isLeftValue;
        boolean semanticError = false;
        boolean syntaxError = false;
        int relOp;
        boolean isVirtual = false;

        public ObjResultWrapper() {}

        public ObjResultWrapper(Obj obj, boolean isRightValue) {
            this.obj = obj;
            this.isRightValue = isRightValue;
            this.isLeftValue = !isRightValue;
        }

        public Obj getObj() {
            return obj;
        }
        public void setObj(Obj obj) {
            this.obj = obj;
        }

        public void setRightValue(boolean isRightValue) {
            this.isRightValue = isRightValue;
            this.isLeftValue = !isRightValue;
        }

        public void setLeftValue(boolean isLeftValue) {
            this.isLeftValue = isLeftValue;
            this.isRightValue = !isLeftValue;
        }

        public boolean isLeftValue() {
            return isLeftValue;
        }

        public boolean isSemanticError() {
            return semanticError;
        }

        public boolean isSyntaxError()
        {
            return syntaxError;
        }

        public ObjResultWrapper setSemanticError(boolean semanticError) {
            this.semanticError = semanticError;
            return this;
        }

        public ObjResultWrapper setSyntaxError(boolean syntaxError)
        {
            this.syntaxError = syntaxError;
            return this;
        }

        public boolean isError()
        {
            return (syntaxError || semanticError);
        }

        public boolean  isField()
        {
            return obj.getKind() == Obj.Fld && isLeftValue;
        }

        public boolean isClassType()
        {
            return (obj.getKind() == Obj.Type) && (obj.getType().getKind() == Struct.Class);
        }

        public boolean isArrayElement()
        {
            return obj.getKind() == Obj.Elem && isLeftValue;
        }

        public boolean isArray()
        {
            return (isLeftValue &&  (obj.getType().getKind() == Struct.Array) );
        }

        public boolean isClass()
        {
            return (isLeftValue && (obj.getType().getKind() == Struct.Class));
        }


        public boolean hasAdditionalParsOnStack()
        {
            return isArrayElement() || isField();
        }

        public boolean loadable()
        {
            int kind = obj.getKind();
            return (kind == Obj.Con) || (kind == Obj.Var) || (kind == Obj.Fld) || (kind == Obj.Elem);
        }

        public void generateRightValue()
        {
            if (isArrayElement())
            {
                // a i a[i]
                Code.put(Code.dup_x2);
                // a[i] a i a[i]
                Code.put(Code.pop);
                // a[i] a i
                Code.put(Code.pop);
                // a[i] a
                Code.put(Code.pop);
                // a[i]
                setRightValue(true);
            }
            else if (isField())
            {
                // x x.i
                Code.put(Code.dup_x1);
                // x.i x x.i
                Code.put(Code.pop);
                // x.i x
                Code.put(Code.pop);
                // x.i
                setRightValue(true);
            }
        }

        public boolean isVirtual()
        {
            return isVirtual;
        }

        public void setVirtual(boolean isVirtual)
        {
            this.isVirtual = isVirtual;
        }

        public void setRelOp(int relOp)
        {
            this.relOp = relOp;
        }

        public int getRelOp()
        {
            return relOp;
        }

    }


    // U slucaju greske.
    //
     @Override
    protected int error_sync_size() {
        // TODO Auto-generated method stubTab
        return 1;
    }

    static class ParserCnt {
        // NIVO A
        static int globalVarDefCnt = 0;
        static int localVarDefMainCnt = 0;
        static int globalConstDefCnt = 0;
        static int globalArrayDeclCnt = 0;

        // NIVO B
        static int globalAndStaticMethodCnt = 0;
        //static int l

        static boolean inVarDeclGlobalScope = false;
        static boolean inMethodDeclGlobalScope = false;
        static boolean inMethodEntryGlobalScope = false;
    }

    boolean errorDetected = false;
    boolean syntaxError = false;
    boolean semanticError = false;
    String fileName = "test/generator/program.obj";


    public void setFileName(String fileName){
        this.fileName = fileName;
    }

    Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    // MJParser greska.
    //
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    // Overrideovana MJParser funkcija.
    //
    public void syntax_error(Symbol cur_token) {
        syntaxError = true;
        report_error("\nSintaksna greska", cur_token);
    }

    public void semantic_error(String msg, Symbol sym)
    {
        semanticError = true;
        report_error("\nSemnaticka greska : " + msg, sym);
    }

    public void semantic_error(String msg)
    {
        semantic_error(msg, null);
    }

    public void semantic_error(String msg, int line)
    {
        semantic_error(msg + "Linija:" + line);
    }

    // Overrideovana MJParser funkcija.
    //
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    // Sa vezbi funkcija.
    //
    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
        {
            Symbol symbol = (Symbol)info;
            msg.append(symbol.toString()).append (" na liniji ").append(symbol.left);
        }
        log.info(msg.toString());
    }


    boolean find_double_and_report_search(String name, int line, String additionalMessage)
    {
        Scope currentScope = Tab.currentScope;

        Obj objDoubleDef = currentScope.findSymbol(name);
        // Nadjen je duplikat u okruzujucem opsegu.
        //
        if (objDoubleDef != null)
        {
            additionalMessage += " simbol " + name +  " vec postoji.";
            semantic_error(additionalMessage, line);
            return true;
        }
        else
        {
            return false;
        }
    }

    boolean check_type_and_report(Obj obj, Struct type, int line, String additionalMessage)
    {
        if (!obj.getType().equals(type) && ( additionalMessage != null) ){
            semantic_error(additionalMessage + ". Tipovi nisu kompatibilni.", line);
            return false;
        }
        return true;
    }

    ObjResultWrapper find_for_use_and_report(String name, int line, String additionalMessage)
    {
        ObjResultWrapper result = null;
        Obj obj = Tab.find(name);
        result = new ObjResultWrapper(obj, obj.getKind() == Obj.Con);
        if (obj == Tab.noObj)
        {
            semantic_error(additionalMessage + " Nije definisan u okruzujucem opsegu.", line);
            result.setSemanticError(true);
        }
        else
        {
            // TODO : info za koriscenje objekta
        }

        return result;
    }



    void pushOnCodeStack(LinkedList<LinkedList<Byte>> codeStack, int beginAddress)
    {
        // Oprezno, mozda je jos neophodno azurirati!!!
        //
        LinkedList<Byte> listOfCode = new LinkedList<Byte>();

        for (int idx = beginAddress; idx < Code.pc; idx ++)
        {
            listOfCode.addLast(Code.buf[idx]);
        }
        codeStack.addLast(listOfCode);
        Code.pc = beginAddress;
    }

    void popFromCodeStack(LinkedList<LinkedList<Byte>> codeStack)
    {
        LinkedList<Byte> listOfCode = codeStack.removeLast();
        for (int idx = 0; idx < listOfCode.size(); idx ++)
        {
            Code.put(listOfCode.get(idx));
        }
    }

    void updateAdresses(LinkedList<LinkedList<Integer>> list)
    {
        LinkedList<Integer> listOfJumpAdresses = list.removeLast();

        for (int idx = 0; idx < listOfJumpAdresses.size(); idx ++)
        {
            Code.fixup(listOfJumpAdresses.get(idx));
        }
    }

    void putIntInStaticData(int val)
    {
        Code.loadConst(val);
        Code.put(Code.putstatic);
        Code.put2(TabExt.staticDataCnt++);
    }

    boolean isMethodStatic(Obj obj)
    {
        return obj.getFpPos() != 0;
    }

    void setMethodStatic(Obj obj)
    {
        obj.setFpPos(1);
    }

    void initVirtualFunctionTable(Obj objType, LinkedList<Integer> listVFTAdresses)
    {
        Struct type = objType.getType();
        Collection<Obj> symbols = type.getMembers();
        if (listVFTAdresses.size() > 0)
        {
            Code.fixup(listVFTAdresses.getLast());
        }

        objType.setAdr(TabExt.staticDataCnt);
        for (Obj obj : symbols)
        {
            if ( (obj.getKind() == Obj.Meth) && !isMethodStatic(obj))
            {
                String name = obj.getName();
                for (int idx = 0; idx < name.length(); idx ++)
                {
                    putIntInStaticData((int)name.charAt(idx));
                }
                putIntInStaticData(-1);
                putIntInStaticData(obj.getAdr());
            }
        }
        putIntInStaticData(-2);

        Code.putJump(0);
        listVFTAdresses.addLast(Code.pc - 2);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MJParser$actions {


    final String METHOD_ENTRY_NAME = "main";
    final String VFT_POINTER_NAME = "_vftPointer";
    final int OP_ASSIGN_CODE = 0;
    final int CHAR_SIZE = 1;
    final int INT_SIZE = 4;
    ObjResultWrapper curConstType = null;
    ObjResultWrapper curVarType = null ;
    ObjResultWrapper curLocalType = null;
    ObjResultWrapper curFormType = null;
    ObjResultWrapper curFieldType = null;
    ObjResultWrapper curObjWrappFieldOrElem = null;
    ObjResultWrapper curObjWrapperClass = null;
    LinkedList<ObjResultWrapper> listCurObjWrapperFieldOrElem = new LinkedList<ObjResultWrapper>();
    LinkedList<Integer> listAdrIfConditionTrue = new LinkedList<Integer>();
    LinkedList<Integer> listAdrIfConditionFalse = new LinkedList<Integer>();

    LinkedList<Integer> listAdrForConditionFalse  = new LinkedList<Integer>();
    LinkedList<Integer> listAdrForCondition = new LinkedList<Integer>();
    LinkedList<LinkedList<Byte>> listSavedCode = new LinkedList<LinkedList<Byte>>();
    LinkedList<LinkedList<Integer>> listOfListOfBreaksInFor = new LinkedList<LinkedList<Integer>>();
    LinkedList<LinkedList<Integer>> listOfListOfContinuesInFor = new LinkedList<LinkedList<Integer>>();
    LinkedList<Integer> listVFTAdresses = new LinkedList<Integer>();
    Integer forLastDesigantorBeginAddress = null;


    boolean globalVar = false;
    boolean localVar = false;
    boolean formVar = false;
    boolean fieldVar = false;
    boolean isInClass = false;
    boolean addThis = false;
    int formParCnt = 0;


  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action_part00000000(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;

        parser.report_info("Krece da prepoznaje globalne deklaracije", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",94, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;


        Tab.insert(Obj.Type, "bool", TabExt.boolType);

        Obj eolObj = Tab.find("eol");
        eolObj.setAdr((int)'\n');

        Obj chrObj = Tab.find("chr");
        chrObj.setAdr(Code.pc);
        Code.put(Code.enter);
        Code.put(1);
        Code.put(1);
        // Read variable from procedure stack and leave it as return value.
        Code.put(Code.load_n);
        Code.put(Code.exit);
        Code.put(Code.return_);

        Obj ordObj = Tab.find("ord");
        ordObj.setAdr(Code.pc);
        Code.put(Code.enter);
        Code.put(1);
        Code.put(1);
        Code.put(Code.load_n);
        Code.put(Code.exit);
        Code.put(Code.return_);

        Obj lenObj = Tab.find("len");
        lenObj.setAdr(Code.pc);
        Code.put(Code.enter);
        Code.put(1);
        Code.put(1);
        Code.put(Code.load_n);
        Code.put(Code.arraylength);
        Code.put(Code.exit);
        Code.put(Code.return_);


        TabExt.programObj = Tab.insert(Obj.Prog, programName, Tab.noType);

        Tab.openScope();
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",95, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= NT$0 PROGRAM IDENT NT$1 GlobalDeclListEpsilon BRACE_LEFT MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		

        // TODO update with virtual table.
        //
        Code.dataSize = TabExt.staticDataCnt;
        Tab.chainLocalSymbols(TabExt.programObj);
        Tab.closeScope();

        if (!TabExt.doesMainExist)
        {
            semantic_error("Ne postoji globalna main funkcija");
        }

        parser.report_info("****************** NIVO A***********************", null);
        parser.report_info("Broj definicija globalnih promenljivih " + ParserCnt.globalVarDefCnt, null);
        parser.report_info("Broj definicija lokalnih promenljivih u main funkciji " + ParserCnt.localVarDefMainCnt, null);
        parser.report_info("Broj definicija globalnih konstanti " + ParserCnt.globalConstDefCnt, null);
        parser.report_info("Broj deklaracija globalnih nizova " + ParserCnt.globalArrayDeclCnt, null);
        parser.report_info("******************* NIVO B**********************", null);
        parser.report_info("Broj definicija globalnih i statickih funkcija unutrasnjih klasa " + ParserCnt.globalAndStaticMethodCnt, null);
        parser.report_info("USPESNO PREPOZNAVANJE", null);
        Tab.dump(TabExt.symbolTableVisitor);

        if (errorDetected)  {
            parser.report_error("Neuspesno parsiranje!!!", null);
        }
        else {
            parser.report_info("Uspesno parsiranje!!!", null);
            File f = new File(fileName);
            if (f.exists())
            {
                f.delete();
            }
            f = new File(fileName);
            Code.write(new FileOutputStream(f));

        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalDeclListEpsilon ::= GlobalDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclListEpsilon",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclListEpsilon",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDeclList ::= GlobalDeclList GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDeclList ::= GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= ClassDecl 
            {
              Object RESULT =null;
		
        parser.log.debug("Prepoznata klasa", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper varType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curVarType = varType;
        globalVar = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",96, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalVarDecl ::= Type NT$2 GlobalVarExprList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper varType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
        globalVar = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobalVarExprList ::= GlobalVarExprCommaList VarExprOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GlobalVarExprList ::= VarExprOrErrorSemi 
            {
              Object RESULT =null;
		int exprOrErrorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprOrErrorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprOrError = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = exprOrError;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarExprOrErrorSemi ::= VarExpr SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper t = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT = (new ObjResultWrapper());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorSemi",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarExprOrErrorSemi ::= error SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT = (new ObjResultWrapper()).setSyntaxError(true);

        parser.report_error("Uspesan oporavak od greske deklaracije globalne promenljive,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorSemi",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarExprCommaList ::= GlobalVarExprCommaList VarExprOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprCommaList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarExprCommaList ::= VarExprOrErrorComma 
            {
              Object RESULT =null;
		int exprOrErrorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprOrErrorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprOrError = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = exprOrError;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprCommaList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarExprOrErrorComma ::= VarExpr COMMA 
            {
              ObjResultWrapper RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper t = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT  = t;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorComma",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarExprOrErrorComma ::= error COMMA 
            {
              ObjResultWrapper RESULT =null;
		
        RESULT = (new ObjResultWrapper()).setSyntaxError(true);
        parser.report_error("Uspesan oporavak od greske prilikom deklaracije globalne promenljiva COMMA je resila stvar", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorComma",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MethodDeclListEpsilon ::= MethodDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListEpsilon",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListEpsilon",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDeclList ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curConstType = type;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",97, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;


    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",98, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ConstDecl ::= CONST Type NT$3 ConstExprList NT$4 SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ConstExprList ::= ConstExprList COMMA ConstExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExprList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ConstExprList ::= ConstExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExprList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ConstExpr ::= IDENT OP_ASSIGN ConstValue 
            {
              Object RESULT =null;
		int nameOfConstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfConstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfConst = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int numObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj numObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // Da li se konstanta slaze po tipu sa deklaracijom.
        //
        if (!curConstType.isSemanticError()
            &&(check_type_and_report(numObj, curConstType.getObj().getType(), numObj.getLevel(), " poredjenje tipova konstanti")))
        {
            // Da nema slucajno duplikata.
            //
            if (!find_double_and_report_search(nameOfConst, nameOfConstleft, "Konstanta"))
            {
                Obj constObj = Tab.insert(Obj.Con, nameOfConst, curConstType.getObj().getType());
                constObj.setAdr(numObj.getAdr());
            }

        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExpr",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConstValue ::= ConstNum 
            {
              Obj RESULT =null;
		int constNumleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constNumright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constNum = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constNum;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ConstValue ::= ConstBool 
            {
              Obj RESULT =null;
		int constBoolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constBoolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constBool = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constBool;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ConstValue ::= ConstChar 
            {
              Obj RESULT =null;
		int constCharleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constCharright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constChar = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constChar;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstNum ::= CONST_NUM 
            {
              Obj RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, number.toString(), Tab.intType, number.intValue(), numberleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstNum",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ConstBool ::= CONST_BOOL 
            {
              Obj RESULT =null;
		int boolStrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolStrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String boolStr = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, "", TabExt.boolType, Boolean.valueOf(boolStr) ? 1 : 0, boolStrleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstBool",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConstChar ::= CONST_CHAR 
            {
              Obj RESULT =null;
		int charStrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int charStrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String charStr = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            char c = charStr.charAt(1);
            RESULT = new Obj(Obj.Con, "", Tab.charType,
            c, charStrleft);

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstChar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarExpr ::= IDENT BracketEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int nameOfVarleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameOfVarright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String nameOfVar = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        {
            Struct typeVar = null;
            String message = "";
            Obj varObj = null;
            int objType = Obj.Var;


            if (globalVar)
            {
                message = "Definicija globalne varijable";
                if (!curVarType.isSemanticError())
                {
                    typeVar = curVarType.getObj().getType();
                }

            }
            else if (localVar)
            {
                message = "Definicija lokalne varijable";
                if (!curLocalType.isSemanticError())
                {
                    typeVar = curLocalType.getObj().getType();
                }
            }
            else if (formVar)
            {
                message = "Definicija formalnog parametra";
                if (!curFormType.isSemanticError())
                {
                    typeVar = curFormType.getObj().getType();
                }
            }
            else if (fieldVar)
            {
                message = "Definicija polja klase";
                if (!curFieldType.isSemanticError())
                {
                    typeVar = curFieldType.getObj().getType();
                    objType = Obj.Fld;
                }
            }

            if (isArray)
            {
                if (typeVar != null)
                {
                    typeVar = new Struct (Struct.Array, typeVar);
                }
            }

            if (!find_double_and_report_search(nameOfVar, nameOfVarleft, message)
                && (typeVar != null) )
            {

                varObj = Tab.insert(objType, nameOfVar, typeVar);
                if (formVar)
                {
                    varObj.setAdr(Tab.currentScope().getnVars() - 1);
                    // TODO : think about formPar
                    //
                }
                else if (globalVar)
                {
                    varObj.setAdr(TabExt.staticDataCnt++);
                }
            }
            else
            {
                RESULT = (new ObjResultWrapper()).setSemanticError(true);
            }
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExpr",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BracketEpsilon ::= BRACKET_LEFT BRACKET_RIGHT 
            {
              Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketEpsilon",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BracketEpsilon ::= 
            {
              Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketEpsilon",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              Object RESULT =null;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        isInClass = true;
        // TODO : add double check
        if (find_double_and_report_search(nameOfClass, nameOfClassleft, "Ime je vec deklarisano u okruzujucem opsegu"))
        {
            // TODO : test
            curObjWrapperClass = (new ObjResultWrapper()).setSemanticError(true);
            curObjWrapperClass.setSemanticError(true);
        }
        else
        {
            Obj obj = Tab.insert(Obj.Type, nameOfClass, new Struct(Struct.Class));
            curObjWrapperClass = new ObjResultWrapper(obj, false);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",99, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

        // TODO extending
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",100, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

        // TODO : add check for existance.
        //
        Tab.openScope();
        //initVirtualFunctionTablePointer();
        Tab.insert(Obj.Fld, VFT_POINTER_NAME, Tab.intType);

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",101, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;


        // TODO : add check of semantic error.
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",102, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

        // TODO : check of semantic error


    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",103, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ClassDecl ::= CLASS IDENT NT$5 ExtendsTypeEpsilon NT$6 BRACE_LEFT NT$7 FieldDeclListEpsilon NT$8 BraceMethodDeclListEpsilonEpsilon NT$9 BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		
        Tab.chainLocalSymbols(curObjWrapperClass.getObj().getType());
        Tab.closeScope();
        Tab.insert(Obj.Type, curObjWrapperClass.getObj().getName(), curObjWrapperClass.getObj().getType());

        if (listVFTAdresses.size() == 0)
        {
            Code.mainPc = Code.pc;
        }
        initVirtualFunctionTable(curObjWrapperClass.getObj(), listVFTAdresses);

        isInClass = false;
        parser.log.debug("Prepoznata klasa", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExtendsTypeEpsilon ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsTypeEpsilon",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExtendsTypeEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsTypeEpsilon",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FieldDeclListEpsilon ::= FieldDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilon",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FieldDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilon",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FieldDeclList ::= FieldDeclList FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FieldDeclList ::= FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$10 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curFieldType = type;
        fieldVar = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",104, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FieldDecl ::= Type NT$10 FieldExprList SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
        fieldVar = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FieldExprList ::= FieldExprList COMMA VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldExprList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FieldExprList ::= VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldExprList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BraceMethodDeclListEpsilonEpsilon ::= BRACE_LEFT MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceMethodDeclListEpsilonEpsilon",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BraceMethodDeclListEpsilonEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceMethodDeclListEpsilonEpsilon",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$11 ::= 
            {
              Object RESULT =null;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (!isInClass)
            {
                // TODO add semantic error for static in global function
            }
            else
            {
                if (!isStatic)
                {
                    addThis = true;
                }
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",105, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            parser.log.debug("Prepoznat povratni tip", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",106, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            String message = "Metoda";
            if (!find_double_and_report_search(nameOfMethod, nameOfMethodleft, message))
            {
                TabExt.curMethod  = Tab.insert(Obj.Meth, nameOfMethod, retType.getObj().getType());
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",107, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

            Tab.openScope();
            if (addThis)
            {
                Obj varObj = Tab.insert(Obj.Var, "this", curObjWrapperClass.getObj().getType());
                varObj.setAdr(0);
                addThis = false;

            }
            else
            {
                setMethodStatic(TabExt.curMethod);
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",108, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

            if (null != TabExt.curMethod)
            {
                // Postavi broj formalnih parametara.
                //
                TabExt.curMethod.setLevel(Tab.currentScope().getnVars());
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$15",109, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

            if (null != TabExt.curMethod)
            {
                Tab.chainLocalSymbols(TabExt.curMethod);
            }
            // TODO : Sumnjivo mi ovo nesto, mozda ranije treba (da bi se spremio stek)
            //
            TabExt.curMethod.setAdr(Code.pc);
            if (nameOfMethod.equals(METHOD_ENTRY_NAME))
            {
                TabExt.doesMainExist = true;
                if (listVFTAdresses.size() == 0)
                {
                    Code.mainPc = TabExt.curMethod.getAdr();
                }
                else
                {
                    Code.fixup(listVFTAdresses.getLast());
                }

            }

            Code.put(Code.enter);
            Code.put(TabExt.curMethod.getLevel());
            Code.put(Tab.currentScope().getnVars());

            parser.log.debug("Zavrseno prepoznavanje deklaracija lokalnih promen", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$16",110, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MethodDecl ::= StaticEpsilon NT$11 ReturnType NT$12 IDENT NT$13 PAR_LEFT NT$14 FormParsEpsilonParRight NT$15 LocalVarDeclListBraceLeftEpsilon NT$16 StatementListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).right;
		Boolean isStatic = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		ObjResultWrapper retType = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		
            // Dealocira se stek.
            //
            if (retType.getObj().getType() == Tab.noType)
            {
                Code.put(Code.exit);
                Code.put(Code.return_);
            }
            else
            {
                // Error in case of no return.
                //
                Code.put(Code.trap);
                Code.put(1);
            }

            Tab.closeScope();
            parser.log.debug("Prepoznat METHOD", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StaticEpsilon ::= STATIC 
            {
              Boolean RESULT =null;
		
                RESULT = new Boolean(true);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticEpsilon",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StaticEpsilon ::= 
            {
              Boolean RESULT =null;
		
                RESULT = new Boolean(false);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticEpsilon",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReturnType ::= Type 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = type;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ReturnType ::= VOID 
            {
              ObjResultWrapper RESULT =null;
		
                RESULT = new ObjResultWrapper(new Obj(Obj.Type, "", Tab.noType), false);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FormParsEpsilonParRight ::= FormParsParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsEpsilonParRight",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FormParsEpsilonParRight ::= PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsEpsilonParRight",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LocalVarDeclListBraceLeftEpsilon ::= LocalVarDeclListBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeftEpsilon",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LocalVarDeclListBraceLeftEpsilon ::= BRACE_LEFT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeftEpsilon",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LocalVarDeclListBraceLeft ::= LocalVarDeclListOrErrorSemi LocalVarDeclOrErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeft",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LocalVarDeclListBraceLeft ::= LocalVarDeclOrErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeft",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LocalVarDeclListOrErrorSemi ::= LocalVarDeclListOrErrorSemi LocalVarDeclOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListOrErrorSemi",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LocalVarDeclListOrErrorSemi ::= LocalVarDeclOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListOrErrorSemi",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$17 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

                curLocalType =  type;
                localVar = true;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$17",111, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LocalVarDeclOrErrorSemi ::= Type NT$17 LocalVarExprList SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
                localVar = false;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorSemi",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LocalVarDeclOrErrorSemi ::= error SEMI_COLUMN 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
              parser.report_error("Uspesan oporavak od greske deklaracije lokalne promenljive,  SEMI_COLUMN je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorSemi",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LocalVarExprList ::= LocalVarExprList COMMA VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarExprList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LocalVarExprList ::= VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarExprList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LocalVarDeclOrErrorBraceLeft ::= error BRACE_LEFT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije lokalne promenljive,  BRACE_LEFT je resila stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorBraceLeft",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LocalVarDeclOrErrorBraceLeft ::= LocalVarDeclOrErrorSemi BRACE_LEFT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorBraceLeft",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StatementListEpsilon ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListEpsilon",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StatementListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListEpsilon",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FormParsParRight ::= FormPars FormParOrErrorParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsParRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FormParsParRight ::= FormParOrErrorParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsParRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FormPars ::= FormPars FormParOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FormPars ::= FormParOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FormParOrErrorComma ::= FormPar COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorComma",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FormParOrErrorComma ::= error COMMA 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije formalnog parametra lokalne funkcije,  COMMA je resila stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorComma",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FormParOrErrorParRight ::= FormPar PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorParRight",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FormParOrErrorParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije formalnog parametra lokalne funkcije,  PAR_RIGHT je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorParRight",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$18 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

                curFormType = type;
                formVar = true;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$18",112, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FormPar ::= Type NT$18 VarExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
                formVar = false;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Type ::= IDENT 
            {
              ObjResultWrapper RESULT =null;
		int nameOfTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfType = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Obj obj = Tab.find(nameOfType);
            if (obj.getKind() != Obj.Type)
            {
                obj = new Obj(Obj.Type, "", Tab.noType);
                semantic_error("Nije definisan tip:" + nameOfType+" ", nameOfTypeleft);
                RESULT = (new ObjResultWrapper(obj, false)).setSemanticError(true);
            }
            else
            {
                RESULT = (new ObjResultWrapper(obj, false));
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Statement ::= DesignatorStatementOrAssignErrorSemi 
            {
              Object RESULT =null;
		
            parser.log.debug("Prepoznata STATEMENT", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$19 ::= 
            {
              Object RESULT =null;

            // FALSE.
            //
            Code.put(Code.const_n);
            Code.putFalseJump(Code.ne, 0);
            int adrConditionFalse = Code.pc - 2;
            listAdrIfConditionFalse.addLast(adrConditionFalse);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$19",113, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;


            Code.putJump(0);
            Code.fixup(listAdrIfConditionFalse.removeLast());
            int adrConditionTrue = Code.pc - 2;
            listAdrIfConditionTrue.addLast(adrConditionTrue);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$20",114, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Statement ::= IF PAR_LEFT IfConditionParRight NT$19 Statement NT$20 ElseStatementEpsilon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		

            Code.fixup(listAdrIfConditionTrue.removeLast());
            parser.log.debug("Prepoznat IF", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$21 ::= 
            {
              Object RESULT =null;

            listAdrForCondition.addLast(Code.pc);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$21",115, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

            Code.put(Code.const_n);
            Code.putFalseJump(Code.ne, 0);
            int adrConditionFalse = Code.pc - 2;
            listAdrForConditionFalse.addLast(adrConditionFalse);


            forLastDesigantorBeginAddress = Code.pc;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$22",116, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

            pushOnCodeStack(listSavedCode, forLastDesigantorBeginAddress);
            listOfListOfContinuesInFor.addLast(new LinkedList<Integer>());
            listOfListOfBreaksInFor.addLast(new LinkedList<Integer>());
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$23",117, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Statement ::= FOR PAR_LEFT DesignatorStatementOrAssign SEMI_COLUMN NT$21 ForConditionSemi NT$22 DesignatorStatementOrAssignOrErrorParRight NT$23 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            updateAdresses(listOfListOfContinuesInFor);
            popFromCodeStack(listSavedCode);

            int adrCondition = listAdrForCondition.removeLast();
            Code.putJump(adrCondition);

            updateAdresses(listOfListOfBreaksInFor);
            Code.fixup(listAdrForConditionFalse.removeLast());
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Statement ::= FOR error SEMI_COLUMN ForCondition SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN error SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN ForCondition SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Statement ::= FOR error SEMI_COLUMN error SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Statement ::= FOR error SEMI_COLUMN ForCondition SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Statement ::= FOR error SEMI_COLUMN error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Statement ::= FOR error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Statement ::= FOR error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Statement ::= BREAK SEMI_COLUMN 
            {
              Object RESULT =null;
		
            // Ne mora 0. Moze sta god.
            //
            Code.putJump(0);
            int adr = Code.pc - 2;
            listOfListOfBreaksInFor.getLast().addLast(adr);
            parser.log.debug("Prepoznat BREAK", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Statement ::= CONTINUE SEMI_COLUMN 
            {
              Object RESULT =null;
		
            Code.putJump(0);
            int adr = Code.pc - 2;
            listOfListOfContinuesInFor.getLast().addLast(adr);
            parser.log.debug("Prepoznat CONTINUE", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Statement ::= RETURN ExprEpsilon SEMI_COLUMN 
            {
              Object RESULT =null;
		
            // TODO : return check semantic.
            // Should exist, are types ok...
            //
            Code.put(Code.exit);
            Code.put(Code.return_);

            parser.log.debug("Prepoznat RETURN", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Statement ::= READ PAR_LEFT Designator PAR_RIGHT SEMI_COLUMN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper des = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
            if (des.isLeftValue() &&
                (des.getObj().getType().equals(Tab.intType)
                || (des.getObj().getType().equals(Tab.charType))
                || (des.getObj().getType().equals(TabExt.boolType))))
            {
                Code.put(Code.pop);
                if (des.getObj().getType().equals(Tab.charType))
                {
                    Code.put(Code.bread);
                }
                else
                {
                    Code.put(Code.read);
                }
                Code.store(des.getObj());
            }
            else
            {

            }
            parser.log.debug("Prepoznat READ", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Statement ::= PRINT PAR_LEFT Expr CommaConstNumEpsilon PAR_RIGHT SEMI_COLUMN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int numObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj numObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
            Struct typeExpr = expr.getObj().getType();
            if (typeExpr.equals(TabExt.boolType)
                || typeExpr.equals(Tab.intType)
                || typeExpr.equals(Tab.charType))
                {
                    // Da li ima dodatnog parametra.
                    //
                    if (!numObj.getType().equals(Tab.noType))
                    {
                        Code.load(numObj);
                    }
                    else
                    {
                        Code.loadConst(0);
                    }
                    if (typeExpr.equals(Tab.charType))
                    {
                        Code.put(Code.bprint);
                    }
                    else
                    {
                        Code.put(Code.print);
                    }

                    if (expr.isArrayElement())
                    {
                        Code.put(Code.pop);
                        Code.put(Code.pop);
                    }
                    else if (expr.isField())
                    {
                        Code.put(Code.pop);
                    }
                }
                else
                {
                    expr.setSemanticError(true);
                }
            RESULT = expr;
            parser.log.debug("Prepoznat PRINT");
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Statement ::= BRACE_LEFT StatementListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
		
            parser.log.debug("Prepoznat BLOK", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ElseStatementEpsilon ::= ELSE Statement 
            {
              Object RESULT =null;
		
            parser.log.debug("Prepoznat ELSE", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatementEpsilon",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ElseStatementEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatementEpsilon",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExprEpsilon ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEpsilon",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ExprEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEpsilon",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ForConditionSemi ::= ForCondition SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ForConditionSemi ::= SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ForConditionSemi ::= error SEMI_COLUMN 
            {
              Object RESULT =null;
		
              parser.report_error("Uspesan oporavak od greske kod uslova u for-u,  SEMI_COLUMN je resio stvar" , null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CommaConstNumEpsilon ::= COMMA CONST_NUM 
            {
              Obj RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, number.toString(), Tab.intType, number.intValue(), numberleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaConstNumEpsilon",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CommaConstNumEpsilon ::= 
            {
              Obj RESULT =null;
		
            RESULT = new Obj(Obj.Con, "", Tab.noType);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaConstNumEpsilon",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DesignatorStatementOrAssign ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DesignatorStatementOrAssign ::= AssingmentStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DesignatorStatementOrAssign ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DesignatorStatementOrAssignOrErrorParRight ::= DesignatorStatement PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DesignatorStatementOrAssignOrErrorParRight ::= AssingmentStatement PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DesignatorStatementOrAssignOrErrorParRight ::= PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DesignatorStatementOrAssignOrErrorParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske kod inkrementatorra u for-u,  PAR_RIGHT je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DesignatorStatementOrAssignErrorSemi ::= DesignatorStatement SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignErrorSemi",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DesignatorStatementOrAssignErrorSemi ::= AssingmentStatementOrErrorSemi 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignErrorSemi",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DesignatorStatement ::= DesignatorIncOrDec 
            {
              Object RESULT =null;
		int incOrDecleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int incOrDecright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper incOrDec = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = incOrDec;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DesignatorStatement ::= DesignatorFuncCall 
            {
              Object RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper funcCall = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (funcCall.getObj().getType() != Tab.noType)
            {
                Code.put(Code.pop);
            }
            RESULT = funcCall;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DesignatorIncOrDec ::= Designator IncOrDec 
            {
              ObjResultWrapper RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper designator = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

            if (!designator.isSemanticError() &&
                designator.isLeftValue() && designator.getObj().getType().equals(Tab.intType))
                {
                    // right value is not needed
                    // because a i a[i] is good because there is no inc
                    Code.loadConst(1);
                    Code.put(op);
                    Code.store(designator.getObj());
                    designator.setRightValue(true);
                }
                else
                {
                    RESULT = designator.setSemanticError(true);
                }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorIncOrDec",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // IncOrDec ::= OP_INC 
            {
              Integer RESULT =null;
		
        RESULT = Code.add;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncOrDec",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // IncOrDec ::= OP_DEC 
            {
              Integer RESULT =null;
		
        RESULT = Code.sub;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncOrDec",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DesignatorFuncCall ::= Designator PAR_LEFT ActParsEpsilon PAR_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
            if (func.isVirtual())
            {
                String funcName = func.getObj().getName();
                // VFT_POINTER
                Code.put(Code.getfield);
                Code.put2(0);
                Code.put(Code.invokevirtual);
                for (int idx = 0; idx < funcName.length(); idx ++)
                {
                    Code.put4((int)funcName.charAt(idx));
                }
                Code.put4(-1);

            }
            else
            {
                Code.put(Code.call);
                // Because Code.call is put then pc  = pc + 1.
                //
                int adr = func.getObj().getAdr() - Code.pc + 1;
                Code.put2(adr);
            }
            RESULT = func;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorFuncCall",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ActParsEpsilon ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsEpsilon",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ActParsEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsEpsilon",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$24 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (dest.isSemanticError() || !dest.isLeftValue())
            {
                RESULT = dest.setSemanticError(true);
            }
            else
            {
                if (dest.hasAdditionalParsOnStack() && op == OP_ASSIGN_CODE)
                {
                    // a i a[i]
                    Code.put(Code.pop);
                    // a i
                }
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$24",118, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // AssingmentStatement ::= Designator Assignop NT$24 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // Check error.
            //
            if (!dest.isSemanticError() && dest.isLeftValue() &&
                !expr.isSemanticError())
            {
                expr.generateRightValue();
                /*
                if (expr.isArrayElement())
                {
                        // a i a[i]
                    Code.put(Code.dup_x2);
                    // a[i] a i a[i]
                    Code.put(Code.pop);
                    // a[i] a i
                    Code.put(Code.pop);
                    // a[i] a
                    Code.put(Code.pop);
                    // a[i]
                }
                */

                if (op != OP_ASSIGN_CODE)
                {
                    // Vrednost na steku nije duplirana jer
                    // treba samo da se koristi za izracunavanje
                    // Nista za dalje vrednosti.
                    Code.put(op);
                }
                Code.store(dest.getObj());
                if ( (op == OP_ASSIGN_CODE)
                    && !dest.hasAdditionalParsOnStack())
                {
                    Code.put(Code.pop);
                }
            }
            else
            {
                RESULT = dest.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssingmentStatement",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$25 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (dest.isSemanticError() || !dest.isLeftValue())
            {
                RESULT = dest.setSemanticError(true);
            }
            else
            {
                if ( dest.hasAdditionalParsOnStack() && op == OP_ASSIGN_CODE)
                {
                    // a i a[i]
                    // c c.x
                    Code.put(Code.pop);
                    // a i
                    // c
                }
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$25",119, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // AssingmentStatementOrErrorSemi ::= Designator Assignop NT$25 ExpOrErrorSemi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // Check error.
            //
            if (!dest.isSemanticError() && dest.isLeftValue() &&
                (expr != null) &&!expr.isSemanticError())
            {
                expr.generateRightValue();

                if (op != OP_ASSIGN_CODE)
                {
                    // Vrednost na steku nije duplirana jer
                    // treba samo da se koristi za izracunavanje
                    // Nista za dalje vrednosti.
                    Code.put(op);
                }
                Code.store(dest.getObj());
                if ( (op == OP_ASSIGN_CODE)
                    && !dest.hasAdditionalParsOnStack())
                {
                    Code.put(Code.pop);
                }
            }
            else
            {
                RESULT = dest.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssingmentStatementOrErrorSemi",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // AssignOpExpOrErrorSemi ::= ExpOrErrorSemi 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOpExpOrErrorSemi",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ExpOrErrorSemi ::= Expr SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpOrErrorSemi",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ExpOrErrorSemi ::= error SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		

            parser.report_error("Uspesan oporavak od greske dodele promenljive,  SEMI_COLUMN je resio stvar", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpOrErrorSemi",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$26 ::= 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            expr.generateRightValue();
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$26",120, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ActPars ::= Expr NT$26 CommaExprListEpsilon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CommaExprListEpsilon ::= CommaExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprListEpsilon",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CommaExprListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprListEpsilon",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CommaExprList ::= CommaExprList CommaExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CommaExprList ::= CommaExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CommaExpr ::= COMMA Expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            expr.generateRightValue();
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExpr",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ForCondition ::= OpOrCondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // IfConditionParRight ::= OpOrCondTermList PAR_RIGHT 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper cond = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                RESULT = cond;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfConditionParRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // IfConditionParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                parser.report_error("Uspesan oporavak od greske prilikom definisanja uslova za if PAR_RIGHT je resila stvar", null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfConditionParRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OpOrCondTermList ::= OpOrCondTermList OP_OR CondTerm 
            {
              ObjResultWrapper RESULT =null;
		
            Code.put(Code.add);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpOrCondTermList",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OpOrCondTermList ::= CondTerm 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpOrCondTermList",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CondTerm ::= OpAndCondFactList 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OpAndCondFactList ::= OpAndCondFactList OP_AND CondFact 
            {
              ObjResultWrapper RESULT =null;
		int leftFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFact = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rightFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFact = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Code.put(Code.mul);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpAndCondFactList",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OpAndCondFactList ::= CondFact 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpAndCondFactList",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$27 ::= 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (!expr.isSemanticError())
            {
                expr.generateRightValue();
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$27",121, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CondFact ::= Expr NT$27 RelOpExprOrEpsilon 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int compareRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int compareRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper compareRight = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            //
            if (!expr.isSemanticError()
                && ( (null == compareRight) || (!compareRight.isSemanticError())))
            {
                if (null == compareRight)
                {
                    if (!expr.getObj().getType().equals(TabExt.boolType))
                    {
                        RESULT = expr.setSemanticError(true);
                    }
                }
                else
                {
                    // TODO: add checks for type compatiblility.
                    //
                    // JCONDFALSE.
                    //
                    Code.putFalseJump(compareRight.getRelOp(), 0);
                    int adrFromWhereToJumpFalse = Code.pc - 2;
                    // TRUE.
                    //
                    Code.put(Code.const_1);
                    Code.putJump(0);
                    int adrFromWhereToJumpTrue = Code.pc - 2;

                    Code.fixup(adrFromWhereToJumpFalse);
                    // False.
                    //
                    Code.put(Code.const_n);
                    // JMP over this
                    Code.fixup(adrFromWhereToJumpTrue);
                }
                RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", TabExt.boolType), true);
            }
            else
            {
                RESULT = expr;
            }


        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // RelOpExprOrEpsilon ::= Relop Expr 
            {
              ObjResultWrapper RESULT =null;
		int relOpleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int relOpright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer relOp = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!expr.isSemanticError())
            {
                expr.generateRightValue();
                expr.setRelOp(relOp);
            }
            RESULT = expr;

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprOrEpsilon",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // RelOpExprOrEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprOrEpsilon",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Expr ::= OpSubEpsilon AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int isNegativeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int isNegativeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Boolean isNegative = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (isNegative)
        {
            if (!term.isSemanticError()
            && check_type_and_report(term.getObj(), Tab.intType, termleft, " Kad se - nalazi ispred nekog izraza, on mora biti int."))
            {
                Code.put(Code.neg);
                term.generateRightValue();
                RESULT = term;
            }
            else
            {
                RESULT = term.setSemanticError(true);
            }
        }
        else
        {
            RESULT = term;
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OpSubEpsilon ::= OP_SUB 
            {
              Boolean RESULT =null;
		
            RESULT = true;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpSubEpsilon",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OpSubEpsilon ::= 
            {
              Boolean RESULT =null;
		
            RESULT = false;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpSubEpsilon",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // AddopRightTerm ::= AddopLeftTerm AddopRight AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int leftTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
    // Treba dodati provere za polja i sve ostale gluposti
    //
       if (!leftTerm.isSemanticError()
        && !rightTerm.isSemanticError()
        && check_type_and_report(leftTerm.getObj(), Tab.intType, rightTermleft, " Levi sabirak / umanjenik mora biti tipa int.")
        && check_type_and_report(rightTerm.getObj(), Tab.intType, rightTermleft, " Desni sabirak / umanjilac mora biti tipa int."))
        {
            if (leftTerm.isLeftValue())
            {
                rightTerm.generateRightValue();
                Code.put(op);
                if (leftTerm.isArrayElement())
                {
                    // a i sum
                    Code.put(Code.dup_x2);
                    // sum a i sum
                }
                else if (leftTerm.isField())
                {
                    // c sum
                    Code.put(Code.dup_x1);
                    // sum c sum
                }
                else
                {
                    Code.put(Code.dup);
                }
                // sum
                Code.store(leftTerm.getObj());

                leftTerm.setRightValue(true);
                RESULT = leftTerm;
            }
            else
            {
                semantic_error("Kod += -= leva strana treba da bude lvalue");
                RESULT = leftTerm.setSemanticError(true);
            }
        }
        else
        {
            RESULT = leftTerm.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRightTerm",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // AddopRightTerm ::= AddopLeftTerm 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = type;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRightTerm",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AddopLeftTerm ::= AddopLeftTerm AddopLeft Term 
            {
              ObjResultWrapper RESULT =null;
		int leftTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (check_type_and_report(leftTerm.getObj(), Tab.intType, leftTermleft, " Tip levog sabirka/umanjenika u zbiru/proizvodu mora da bude int")
            &&
            check_type_and_report(rightTerm.getObj(), Tab.intType, rightTermleft, " Tip desnog sabirka/umanjioca u zbiru/razlici mora biti int"))
            {
                rightTerm.generateRightValue();
                Code.put(op);
                leftTerm.generateRightValue();
                RESULT = new ObjResultWrapper(new Obj(Obj.Con,"",Tab.intType), true);
        }
        else
        {
            RESULT = leftTerm.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeftTerm",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // AddopLeftTerm ::= Term 
            {
              ObjResultWrapper RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = term;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeftTerm",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Term ::= MullopRightFactor 
            {
              ObjResultWrapper RESULT =null;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = rightFactor;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // MullopRightFactor ::= MulopLeftFactor MulopRight MullopRightFactor 
            {
              ObjResultWrapper RESULT =null;
		int leftFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // TODO: Treba dodati provere za polja i sve ostale gluposti
            //
            if (!leftFactor.isSemanticError()
            && !rightFactor.isSemanticError()
            && check_type_and_report(leftFactor.getObj(), Tab.intType, leftFactorleft, " Levi cinilac / deljenik mora biti tipa int.")
            && check_type_and_report(rightFactor.getObj(), Tab.intType, rightFactorleft, " Desni cinilac / delilac mora biti tipa int."))
            {
                if (leftFactor.isLeftValue())
                {
                    rightFactor.generateRightValue();
                    Code.put(op);
                    if (leftFactor.isArrayElement())
                    {
                        Code.put(Code.dup_x2);
                    }
                    else if (leftFactor.isField())
                    {
                        Code.put(Code.dup_x1);
                    }
                    else
                    {
                        Code.put(Code.dup);
                    }

                    Code.store(leftFactor.getObj());
                    leftFactor.setRightValue(true);
                    RESULT = leftFactor;
                }
                else
                {
                    semantic_error("Kod /= *= %= leva strana treba da bude lvalue");
                    RESULT = leftFactor.setSemanticError(true);
                }
            }
            else
            {
                RESULT = leftFactor.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MullopRightFactor",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // MullopRightFactor ::= MulopLeftFactor 
            {
              ObjResultWrapper RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper factor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = factor;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MullopRightFactor",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // MulopLeftFactor ::= MulopLeftFactor MulopLeft Factor 
            {
              ObjResultWrapper RESULT =null;
		int leftFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (check_type_and_report(leftFactor.getObj(), Tab.intType, leftFactorleft, " Tip levog cinioca/deljenika u proizvodu mora da bude int")
            &&
                check_type_and_report(rightFactor.getObj(), Tab.intType, rightFactorleft, " Tip desnog cinioca/delioca mora biti int"))
            {
                rightFactor.generateRightValue();
                Code.put(op);
                leftFactor.generateRightValue();
                RESULT = new ObjResultWrapper(new Obj(Obj.Con,"",Tab.intType), true);
            }
            else
            {
                RESULT = leftFactor.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeftFactor",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // MulopLeftFactor ::= Factor 
            {
              ObjResultWrapper RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper factor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = factor;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeftFactor",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Factor ::= DesignatorFuncCall 
            {
              ObjResultWrapper RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = func;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Factor ::= Designator 
            {
              ObjResultWrapper RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper designator = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = designator;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Factor ::= ConstValue 
            {
              ObjResultWrapper RESULT =null;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Code.load(constValue);
            RESULT = new ObjResultWrapper(constValue, true/*isRightValue*/);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Factor ::= NEW Type BracketExprEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprWrapleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprWrapright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprWrap = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (null != exprWrap)
            {
                if (!exprWrap.isSemanticError()
                    && !type.isSemanticError()
                    && check_type_and_report(exprWrap.getObj(),
                                          Tab.intType,
                                         exprWrapleft,
                                         "Tip izraza kod NEW operatora sa nizom mora da bude int"))
                {
                    exprWrap.generateRightValue();
                    Code.put(Code.newarray);
                    // TODO: For classes which are non word alligned,
                    // TODO : add
                    // alloc using char
                    //
                    if (type.getObj().getType().equals(Tab.charType))
                    {
                        Code.put(0);
                    }
                    else
                    {
                        Code.put(1);
                    }
                    Struct struct = new Struct(Struct.Array, type.getObj().getType());
                    RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", struct), true);
                }
                else
                {
                    RESULT = (new ObjResultWrapper()).setSemanticError(true);
                }
            }
            else
            {
                if (!type.isSemanticError()
                && (type.getObj().getKind() == Obj.Type)
                && (type.getObj().getType().getKind() == Struct.Class))
                {
                    Code.put(Code.new_);
                    Code.put2(type.getObj().getType().getNumberOfFields() * INT_SIZE);
                    // adr
                    Code.put(Code.dup);
                    // adr adr
                    Code.loadConst(type.getObj().getAdr());
                    // adr adr val
                    // TODO add check if class is not initialized.
                    //
                    Code.store(type.getObj().getType().getMembersTable().searchKey(VFT_POINTER_NAME));
                    RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", type.getObj().getType()), true);
                }
                else
                {
                    RESULT = (new ObjResultWrapper()).setSemanticError(true);
                }

            }
            // TO DO : Add check of errors.
            //
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Factor ::= PAR_LEFT Expr PAR_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper result = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            RESULT = result;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ParActParsEpsilonEpsilon ::= PAR_LEFT ActParsEpsilon PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ParActParsEpsilonEpsilon",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ParActParsEpsilonEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ParActParsEpsilonEpsilon",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // BracketExprEpsilon ::= BRACKET_LEFT Expr BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                RESULT = expr;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketExprEpsilon",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // BracketExprEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
                RESULT = null;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketExprEpsilon",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$28 ::= 
            {
              ObjResultWrapper RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            // TODO add more checks if is correct.
            curObjWrappFieldOrElem = find_for_use_and_report(name, nameleft, name);


            listCurObjWrapperFieldOrElem.addLast(curObjWrappFieldOrElem);
            if ((!curObjWrappFieldOrElem.isSemanticError())
            && (curObjWrappFieldOrElem.loadable()))
            {
                Code.load(curObjWrappFieldOrElem.getObj());
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$28",122, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Designator ::= IDENT NT$28 DotIdentOrBracketExprListEpsilon 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!curObjWrappFieldOrElem.isSemanticError())
            {
                if(objWrapper == null)
                {

                    ObjResultWrapper objWrap = new ObjResultWrapper(curObjWrappFieldOrElem.getObj(), curObjWrappFieldOrElem.getObj().getKind() == Obj.Con);
                    RESULT = objWrap;
                }
                else if ( (objWrapper != null) && (!objWrapper.isSemanticError()) )
                {
                    RESULT = objWrapper;
                }
            }
            else
            {
                RESULT = curObjWrappFieldOrElem;
            }

            if (!curObjWrappFieldOrElem.isSemanticError())
            {
                listCurObjWrapperFieldOrElem.removeLast();
                if (listCurObjWrapperFieldOrElem.size() != 0)
                {
                    curObjWrappFieldOrElem = listCurObjWrapperFieldOrElem.getLast();
                }
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",84, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // DotIdentOrBracketExprListEpsilon ::= DotIdentOrBracketExprList 
            {
              ObjResultWrapper RESULT =null;
		int objWrapleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrap = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = objWrap;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprListEpsilon",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // DotIdentOrBracketExprListEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprListEpsilon",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // DotIdentOrBracketExprList ::= DotIdentOrBracketExprList DotIdentOrBracketExpr 
            {
              ObjResultWrapper RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper left = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // TODO dodaj proveru da li je levo klasa ili niz (drugo nista ne moze...), i tek onda expandujes to ce ti biti nivo C, do tad ne brini (sledeca nedelja :O )
            if (left.isSemanticError() || objWrapper.isSemanticError())
            {
                RESULT = objWrapper.setSemanticError(true);
            }
            else
            {
                RESULT = objWrapper;
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprList",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // DotIdentOrBracketExprList ::= DotIdentOrBracketExpr 
            {
              ObjResultWrapper RESULT =null;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

            RESULT = objWrapper;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprList",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // DotIdentOrBracketExpr ::= DOT IDENT 
            {
              ObjResultWrapper RESULT =null;
		int memberNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int memberNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String memberName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (!curObjWrappFieldOrElem.isSemanticError())
        {
            if (curObjWrappFieldOrElem.isClassType())
            {
                Obj obj = curObjWrappFieldOrElem.getObj().getType().getMembersTable().searchKey(memberName);
                if ( (obj == null)
                ||
                ((obj.getKind() != Obj.Meth)
                || (!isMethodStatic(obj))) )
                {
                    // TODO ispisi
                    RESULT = curObjWrappFieldOrElem.setSemanticError(true);
                }
                else
                {
                    curObjWrappFieldOrElem = new ObjResultWrapper(obj, true);

                    RESULT = curObjWrappFieldOrElem;
                }
            }
            else if (curObjWrappFieldOrElem.isClass())
            {
                Obj obj = curObjWrappFieldOrElem.getObj().getType().getMembersTable().searchKey(memberName);
                if ( (obj == null) || ((obj.getKind() != Obj.Fld) && (obj.getKind() != Obj.Meth) ) )
                {
                    RESULT = curObjWrappFieldOrElem.setSemanticError(true);
                }
                else
                {
                    if (obj.getKind() == Obj.Fld)
                    {
                        // x
                        Code.put(Code.dup);
                        // x x
                        Code.load(obj);
                        // x x.i

                        curObjWrappFieldOrElem = new ObjResultWrapper(obj, false);
                        RESULT = curObjWrappFieldOrElem;
                    }
                    else
                    {
                        curObjWrappFieldOrElem = new ObjResultWrapper(obj, false);
                        curObjWrappFieldOrElem.setVirtual(true);
                        RESULT = curObjWrappFieldOrElem;
                    }
                }
            }
            else
            {
                RESULT = curObjWrappFieldOrElem.setSemanticError(true);
            }
        }
        else
        {
            RESULT = curObjWrappFieldOrElem.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // DotIdentOrBracketExpr ::= BRACKET_LEFT Expr BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        if (!curObjWrappFieldOrElem.isSemanticError()
        && !expr.isSemanticError()
        && check_type_and_report(expr.getObj(), Tab.intType,
        exprleft, " indeks niza mora bude tipa int")
        )
            if (curObjWrappFieldOrElem.isArray())
            {
                Struct curArrayDotType = curObjWrappFieldOrElem.getObj().getType().getElemType();
                Obj obj = new Obj(Obj.Elem, "", curArrayDotType);
                curObjWrappFieldOrElem.setObj(obj);
                Code.put(Code.dup2);
                Code.load(obj);
                RESULT = new ObjResultWrapper(obj, false /* RVALUE */);
            }
            else
            {
                semantic_error("Kad se koriste [] sa leve strane mora biti niz", exprleft);
                RESULT = curObjWrappFieldOrElem.setSemanticError(true);
            }
        else
        {
            RESULT = curObjWrappFieldOrElem.setSemanticError(true);
        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // DotIdentOrBracketExpr ::= BRACKET_LEFT error BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		
        parser.report_error("Uspesan oporavak od greske kod indeksa niza,  BRACKET_RIGHT je resio stvar" , null);
        // TODO test further.
        //
        RESULT = new ObjResultWrapper().setSyntaxError(true);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Assignop ::= OP_ASSIGN 
            {
              Integer RESULT =null;
		
                RESULT = OP_ASSIGN_CODE;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = op;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = op;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Relop ::= OP_EQ 
            {
              Integer RESULT =null;
		
                RESULT = Code.eq;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Relop ::= OP_NOT_EQ 
            {
              Integer RESULT =null;
		
                RESULT = Code.ne;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Relop ::= OP_GTE 
            {
              Integer RESULT =null;
		
                RESULT = Code.ge;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Relop ::= OP_GREAT 
            {
              Integer RESULT =null;
		
                RESULT = Code.gt;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Relop ::= OP_LESS 
            {
              Integer RESULT =null;
		
                RESULT = Code.lt;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Relop ::= OP_LTE 
            {
              Integer RESULT =null;
		
                RESULT = Code.le;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // AddopLeft ::= OP_ADD 
            {
              Integer RESULT =null;
		
                RESULT = Code.add;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // AddopLeft ::= OP_SUB 
            {
              Integer RESULT =null;
		
                RESULT = Code.sub;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // AddopRight ::= OP_ASSIGN_ADD 
            {
              Integer RESULT =null;
		
                RESULT = Code.add;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // AddopRight ::= OP_ASSIGN_SUB 
            {
              Integer RESULT =null;
		
                RESULT = Code.sub;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // MulopLeft ::= OP_MUL 
            {
              Integer RESULT =null;
		
                RESULT = Code.mul;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // MulopLeft ::= OP_DIV 
            {
              Integer RESULT =null;
		
                RESULT = Code.div;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // MulopLeft ::= OP_MOD 
            {
              Integer RESULT =null;
		
                RESULT = Code.rem;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // MulopRight ::= OP_ASSIGN_MUL 
            {
              Integer RESULT =null;
		
                RESULT = Code.mul;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // MulopRight ::= OP_ASSIGN_DIV 
            {
              Integer RESULT =null;
		
                RESULT = Code.div;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // MulopRight ::= OP_ASSIGN_MOD 
            {
              Integer RESULT =null;
		
                RESULT = Code.rem;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MJParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
              return CUP$MJParser$do_action_part00000000(
                               CUP$MJParser$act_num,
                               CUP$MJParser$parser,
                               CUP$MJParser$stack,
                               CUP$MJParser$top);
    }
}

}
