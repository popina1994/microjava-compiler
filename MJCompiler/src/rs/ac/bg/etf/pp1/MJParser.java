
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import java.io.*;
import java.util.LinkedList;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.*;
import rs.etf.pp1.symboltable.visitors.SymbolTableVisitor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MJParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\327\000\002\140\002\000\002\141\002\000\002\002" +
    "\012\000\002\002\004\000\002\003\003\000\002\003\002" +
    "\000\002\004\004\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\142\002\000\002" +
    "\006\005\000\002\021\004\000\002\021\003\000\002\023" +
    "\004\000\002\023\004\000\002\022\004\000\002\022\003" +
    "\000\002\024\004\000\002\024\004\000\002\007\003\000" +
    "\002\007\002\000\002\010\004\000\002\010\003\000\002" +
    "\143\002\000\002\144\002\000\002\011\010\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\014\003\000" +
    "\002\016\003\000\002\015\003\000\002\020\004\000\002" +
    "\025\004\000\002\025\002\000\002\026\011\000\002\027" +
    "\004\000\002\027\002\000\002\030\003\000\002\030\002" +
    "\000\002\031\004\000\002\031\003\000\002\032\005\000" +
    "\002\033\005\000\002\033\003\000\002\034\005\000\002" +
    "\034\002\000\002\145\002\000\002\146\002\000\002\147" +
    "\002\000\002\150\002\000\002\151\002\000\002\035\017" +
    "\000\002\036\003\000\002\036\002\000\002\037\003\000" +
    "\002\037\003\000\002\052\003\000\002\052\003\000\002" +
    "\040\003\000\002\040\003\000\002\041\004\000\002\041" +
    "\003\000\002\043\004\000\002\043\003\000\002\152\002" +
    "\000\002\042\006\000\002\042\004\000\002\044\005\000" +
    "\002\044\003\000\002\045\004\000\002\045\004\000\002" +
    "\046\003\000\002\046\002\000\002\047\004\000\002\047" +
    "\003\000\002\054\004\000\002\054\003\000\002\050\004" +
    "\000\002\050\003\000\002\053\004\000\002\053\004\000" +
    "\002\055\004\000\002\055\004\000\002\153\002\000\002" +
    "\051\005\000\002\056\003\000\002\057\003\000\002\154" +
    "\002\000\002\155\002\000\002\057\011\000\002\156\002" +
    "\000\002\157\002\000\002\160\002\000\002\057\014\000" +
    "\002\057\011\000\002\057\011\000\002\057\011\000\002" +
    "\057\011\000\002\057\011\000\002\057\011\000\002\057" +
    "\011\000\002\057\007\000\002\057\005\000\002\057\004" +
    "\000\002\057\004\000\002\057\005\000\002\057\007\000" +
    "\002\057\010\000\002\057\005\000\002\060\004\000\002" +
    "\060\002\000\002\061\003\000\002\061\002\000\002\074" +
    "\004\000\002\074\003\000\002\074\004\000\002\063\004" +
    "\000\002\063\002\000\002\077\003\000\002\077\003\000" +
    "\002\077\002\000\002\075\004\000\002\075\004\000\002" +
    "\075\003\000\002\075\004\000\002\072\004\000\002\072" +
    "\003\000\002\064\003\000\002\064\003\000\002\101\004" +
    "\000\002\103\003\000\002\103\003\000\002\102\006\000" +
    "\002\065\003\000\002\065\002\000\002\161\002\000\002" +
    "\076\006\000\002\162\002\000\002\100\006\000\002\105" +
    "\003\000\002\104\004\000\002\104\004\000\002\066\004" +
    "\000\002\067\003\000\002\067\002\000\002\070\004\000" +
    "\002\070\003\000\002\071\004\000\002\106\003\000\002" +
    "\062\004\000\002\062\004\000\002\107\005\000\002\107" +
    "\003\000\002\110\003\000\002\111\005\000\002\111\003" +
    "\000\002\163\002\000\002\112\005\000\002\113\004\000" +
    "\002\113\002\000\002\114\004\000\002\115\003\000\002" +
    "\115\002\000\002\116\005\000\002\116\003\000\002\117" +
    "\005\000\002\117\003\000\002\120\003\000\002\121\005" +
    "\000\002\121\003\000\002\122\005\000\002\122\003\000" +
    "\002\123\003\000\002\123\003\000\002\123\003\000\002" +
    "\123\005\000\002\123\005\000\002\124\005\000\002\124" +
    "\002\000\002\125\005\000\002\125\002\000\002\164\002" +
    "\000\002\126\005\000\002\127\003\000\002\127\002\000" +
    "\002\130\004\000\002\130\003\000\002\131\004\000\002" +
    "\131\005\000\002\131\005\000\002\132\003\000\002\132" +
    "\003\000\002\132\003\000\002\133\003\000\002\133\003" +
    "\000\002\133\003\000\002\133\003\000\002\133\003\000" +
    "\002\133\003\000\002\134\003\000\002\134\003\000\002" +
    "\135\003\000\002\135\003\000\002\136\003\000\002\136" +
    "\003\000\002\136\003\000\002\137\003\000\002\137\003" +
    "\000\002\137\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\004\004\001\001\002\000\004\002\u0148\001" +
    "\002\000\004\004\006\001\002\000\004\023\007\001\002" +
    "\000\012\007\000\011\000\023\000\063\000\001\002\000" +
    "\012\007\021\011\022\023\013\063\ufffc\001\002\000\006" +
    "\003\ufff6\023\ufff6\001\002\000\004\063\u0138\001\002\000" +
    "\066\003\uffa6\023\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\054\uffa6\055\uffa6\060\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\001\002\000\012\007\ufff8\011\ufff8\023\ufff8\063\ufff8" +
    "\001\002\000\012\007\ufff7\011\ufff7\023\ufff7\063\ufff7\001" +
    "\002\000\012\007\ufffa\011\ufffa\023\ufffa\063\ufffa\001\002" +
    "\000\012\007\021\011\022\023\013\063\ufffd\001\002\000" +
    "\012\007\ufff9\011\ufff9\023\ufff9\063\ufff9\001\002\000\004" +
    "\023\044\001\002\000\004\023\013\001\002\000\004\023" +
    "\uffe8\001\002\000\004\023\026\001\002\000\006\054\uffe7" +
    "\055\040\001\002\000\004\044\030\001\002\000\006\054" +
    "\uffe4\055\uffe4\001\002\000\010\024\035\025\037\026\036" +
    "\001\002\000\056\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\054\uffe1\055\uffe1\060\uffe1\062\uffe1\001\002\000\056" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\054\uffe0\055" +
    "\uffe0\060\uffe0\062\uffe0\001\002\000\056\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\054\uffe2\055\uffe2\060\uffe2\062" +
    "\uffe2\001\002\000\006\054\uffe3\055\uffe3\001\002\000\056" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\054\uffdf\055" +
    "\uffdf\060\uffdf\062\uffdf\001\002\000\056\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\054\uffde\055\uffde\060\uffde\062" +
    "\uffde\001\002\000\056\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\054\uffdd\055\uffdd\060\uffdd\062\uffdd\001\002\000" +
    "\004\023\026\001\002\000\004\054\042\001\002\000\012" +
    "\007\uffe6\011\uffe6\023\uffe6\063\uffe6\001\002\000\006\054" +
    "\uffe5\055\uffe5\001\002\000\006\021\045\063\uffd7\001\002" +
    "\000\004\023\013\001\002\000\004\063\047\001\002\000" +
    "\010\023\013\063\uffd5\064\uffd5\001\002\000\004\023\u0124" +
    "\001\002\000\006\063\055\064\uffce\001\002\000\010\023" +
    "\013\063\uffd6\064\uffd6\001\002\000\010\023\uffd3\063\uffd3" +
    "\064\uffd3\001\002\000\010\023\uffd4\063\uffd4\064\uffd4\001" +
    "\002\000\012\005\060\017\uffc6\023\uffc6\064\uffeb\001\002" +
    "\000\004\064\057\001\002\000\012\007\uffd9\011\uffd9\023" +
    "\uffd9\063\uffd9\001\002\000\006\017\uffc7\023\uffc7\001\002" +
    "\000\004\064\u0130\001\002\000\012\005\060\017\uffc6\023" +
    "\uffc6\064\uffec\001\002\000\012\005\uffe9\017\uffe9\023\uffe9" +
    "\064\uffe9\001\002\000\006\017\066\023\013\001\002\000" +
    "\004\023\uffc5\001\002\000\004\023\uffc4\001\002\000\004" +
    "\023\uffcd\001\002\000\004\023\071\001\002\000\004\057" +
    "\uffcc\001\002\000\004\057\073\001\002\000\010\003\uffcb" +
    "\023\uffcb\060\uffcb\001\002\000\010\003\103\023\013\060" +
    "\076\001\002\000\004\023\uffa8\001\002\000\010\003\uffc2" +
    "\023\uffc2\063\uffc2\001\002\000\010\003\uffaf\023\uffaf\063" +
    "\uffaf\001\002\000\006\055\u012b\060\u012c\001\002\000\010" +
    "\003\uffca\023\uffca\063\uffca\001\002\000\006\003\uffad\023" +
    "\uffad\001\002\000\006\055\110\060\111\001\002\000\010" +
    "\003\uffc3\023\uffc3\063\uffc3\001\002\000\006\003\103\023" +
    "\013\001\002\000\006\003\uffae\023\uffae\001\002\000\010" +
    "\003\uffb0\023\uffb0\063\uffb0\001\002\000\006\003\uffab\023" +
    "\uffab\001\002\000\010\003\uffa9\023\uffa9\063\uffa9\001\002" +
    "\000\010\003\121\023\013\063\115\001\002\000\004\023" +
    "\uffbb\001\002\000\010\003\uffbc\023\uffbc\063\u0120\001\002" +
    "\000\026\006\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\020" +
    "\uffc0\022\uffc0\023\uffc0\063\uffc0\064\uffc0\001\002\000\026" +
    "\006\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\022" +
    "\uffc1\023\uffc1\063\uffc1\064\uffc1\001\002\000\026\006\uffbe" +
    "\012\uffbe\014\uffbe\015\uffbe\016\uffbe\020\uffbe\022\uffbe\023" +
    "\uffbe\063\uffbe\064\uffbe\001\002\000\006\003\121\023\013" +
    "\001\002\000\006\054\u011c\063\u011d\001\002\000\026\006" +
    "\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9\022\uffc9" +
    "\023\uffc9\063\uffc9\064\uffc9\001\002\000\026\006\134\012" +
    "\133\014\136\015\126\016\132\020\142\022\127\023\130" +
    "\063\145\064\uffb3\001\002\000\024\044\342\045\252\046" +
    "\250\047\240\050\241\051\234\052\345\053\346\057\260" +
    "\001\002\000\004\064\u0113\001\002\000\004\057\u010f\001" +
    "\002\000\004\054\u010e\001\002\000\072\027\uff46\030\uff46" +
    "\031\uff46\032\uff46\033\uff46\034\uff46\035\uff46\036\uff46\037" +
    "\uff46\040\uff46\041\uff46\042\uff46\043\uff46\044\uff46\045\uff46" +
    "\046\uff46\047\uff46\050\uff46\051\uff46\052\uff46\053\uff46\054" +
    "\uff46\055\uff46\056\uff46\057\uff46\060\uff46\061\uff46\062\uff46" +
    "\001\002\000\004\054\u0101\001\002\000\022\013\uff59\023" +
    "\uff59\024\uff59\025\uff59\026\uff59\030\163\054\uff8b\057\uff59" +
    "\001\002\000\004\057\362\001\002\000\004\054\361\001" +
    "\002\000\030\006\uffa5\010\uffa5\012\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\020\uffa5\022\uffa5\023\uffa5\063\uffa5\064\uffa5\001" +
    "\002\000\004\057\352\001\002\000\006\054\uff7c\060\uff7c" +
    "\001\002\000\006\054\uff7b\060\uff7b\001\002\000\026\006" +
    "\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1\020\uffb1\022\uffb1" +
    "\023\uffb1\063\uffb1\064\uffb1\001\002\000\012\003\154\023" +
    "\130\054\uff83\057\156\001\002\000\030\006\uff7d\010\uff7d" +
    "\012\uff7d\014\uff7d\015\uff7d\016\uff7d\020\uff7d\022\uff7d\023" +
    "\uff7d\063\uff7d\064\uff7d\001\002\000\026\006\134\012\133" +
    "\014\136\015\126\016\132\020\142\022\127\023\130\063" +
    "\145\064\uffb4\001\002\000\026\006\134\012\133\014\136" +
    "\015\126\016\132\020\142\022\127\023\130\063\145\064" +
    "\uffb3\001\002\000\004\064\147\001\002\000\030\006\uff8f" +
    "\010\uff8f\012\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f\022" +
    "\uff8f\023\uff8f\063\uff8f\064\uff8f\001\002\000\026\006\uffb2" +
    "\012\uffb2\014\uffb2\015\uffb2\016\uffb2\020\uffb2\022\uffb2\023" +
    "\uffb2\063\uffb2\064\uffb2\001\002\000\006\054\uff84\060\uff84" +
    "\001\002\000\024\044\342\045\252\046\250\047\240\050" +
    "\241\051\234\052\345\053\346\057\260\001\002\000\006" +
    "\054\uff85\060\uff85\001\002\000\006\054\322\060\323\001" +
    "\002\000\004\054\307\001\002\000\006\023\130\054\uff83" +
    "\001\002\000\004\054\160\001\002\000\024\003\uffa1\013" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\030\uffa1\054\uffa1" +
    "\057\uffa1\001\002\000\024\003\171\013\uff59\023\uff59\024" +
    "\uff59\025\uff59\026\uff59\030\163\054\167\057\uff59\001\002" +
    "\000\012\042\305\043\uff62\054\uff62\060\uff62\001\002\000" +
    "\016\013\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a\057\uff5a" +
    "\001\002\000\026\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040" +
    "\uff5f\041\uff5f\042\uff5f\043\uff5f\054\uff5f\060\uff5f\001\002" +
    "\000\016\013\225\023\130\024\035\025\037\026\036\057" +
    "\220\001\002\000\004\054\213\001\002\000\010\003\uff89" +
    "\023\uff89\060\uff89\001\002\000\012\042\uff60\043\uff60\054" +
    "\uff60\060\uff60\001\002\000\004\054\212\001\002\000\010" +
    "\003\uffa0\023\uffa0\060\uffa0\001\002\000\006\043\175\054" +
    "\uff67\001\002\000\010\043\uff63\054\uff63\060\uff63\001\002" +
    "\000\020\013\uff59\023\uff59\024\uff59\025\uff59\026\uff59\030" +
    "\163\057\uff59\001\002\000\010\043\uff64\054\uff64\060\uff64" +
    "\001\002\000\010\003\203\023\130\060\200\001\002\000" +
    "\024\006\uff80\012\uff80\014\uff80\015\uff80\016\uff80\020\uff80" +
    "\022\uff80\023\uff80\063\uff80\001\002\000\004\060\211\001" +
    "\002\000\004\060\210\001\002\000\004\060\207\001\002" +
    "\000\024\006\uff9f\012\uff9f\014\uff9f\015\uff9f\016\uff9f\020" +
    "\uff9f\022\uff9f\023\uff9f\063\uff9f\001\002\000\024\006\134" +
    "\012\133\014\136\015\126\016\132\020\142\022\127\023" +
    "\130\063\145\001\002\000\030\006\uff9e\010\uff9e\012\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\020\uff9e\022\uff9e\023\uff9e\063" +
    "\uff9e\064\uff9e\001\002\000\024\006\uff7f\012\uff7f\014\uff7f" +
    "\015\uff7f\016\uff7f\020\uff7f\022\uff7f\023\uff7f\063\uff7f\001" +
    "\002\000\024\006\uff82\012\uff82\014\uff82\015\uff82\016\uff82" +
    "\020\uff82\022\uff82\023\uff82\063\uff82\001\002\000\024\006" +
    "\uff81\012\uff81\014\uff81\015\uff81\016\uff81\020\uff81\022\uff81" +
    "\023\uff81\063\uff81\001\002\000\010\003\uff88\023\uff88\060" +
    "\uff88\001\002\000\010\003\uff8a\023\uff8a\060\uff8a\001\002" +
    "\000\060\027\uff4e\030\uff4e\031\uff4e\032\uff4e\033\uff4e\034" +
    "\uff4e\035\uff4e\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e" +
    "\043\uff4e\045\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e\054" +
    "\uff4e\055\uff4e\057\260\060\uff4e\062\uff4e\001\002\000\032" +
    "\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042" +
    "\uff5b\043\uff5b\054\uff5b\055\uff5b\060\uff5b\062\uff5b\001\002" +
    "\000\056\027\uff50\030\uff50\031\uff50\032\uff50\033\uff50\034" +
    "\uff50\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50\042\uff50" +
    "\043\uff50\045\uff50\046\uff50\047\uff50\050\uff50\051\uff50\054" +
    "\uff50\055\uff50\060\uff50\062\uff50\001\002\000\042\027\251" +
    "\030\255\034\uff57\035\uff57\036\uff57\037\uff57\040\uff57\041" +
    "\uff57\042\uff57\043\uff57\045\252\046\250\054\uff57\055\uff57" +
    "\060\uff57\062\uff57\001\002\000\020\013\uff59\023\uff59\024" +
    "\uff59\025\uff59\026\uff59\030\163\057\uff59\001\002\000\042" +
    "\027\uff54\030\uff54\034\uff54\035\uff54\036\uff54\037\uff54\040" +
    "\uff54\041\uff54\042\uff54\043\uff54\045\uff54\046\uff54\054\uff54" +
    "\055\uff54\060\uff54\062\uff54\001\002\000\056\027\uff4d\030" +
    "\uff4d\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d" +
    "\037\uff4d\040\uff4d\041\uff4d\042\uff4d\043\uff4d\045\uff4d\046" +
    "\uff4d\047\uff4d\050\uff4d\051\uff4d\054\uff4d\055\uff4d\060\uff4d" +
    "\062\uff4d\001\002\000\056\027\uff52\030\uff52\031\236\032" +
    "\237\033\243\034\uff52\035\uff52\036\uff52\037\uff52\040\uff52" +
    "\041\uff52\042\uff52\043\uff52\045\uff52\046\uff52\047\240\050" +
    "\241\051\234\054\uff52\055\uff52\060\uff52\062\uff52\001\002" +
    "\000\056\027\uff4f\030\uff4f\031\uff4f\032\uff4f\033\uff4f\034" +
    "\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042\uff4f" +
    "\043\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\054" +
    "\uff4f\055\uff4f\060\uff4f\062\uff4f\001\002\000\004\023\013" +
    "\001\002\000\042\027\uff55\030\uff55\034\uff55\035\uff55\036" +
    "\uff55\037\uff55\040\uff55\041\uff55\042\uff55\043\uff55\045\uff55" +
    "\046\uff55\054\uff55\055\uff55\060\uff55\062\uff55\001\002\000" +
    "\060\027\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034\uff47" +
    "\035\uff47\036\uff47\037\uff47\040\uff47\041\uff47\042\uff47\043" +
    "\uff47\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47\054\uff47" +
    "\055\uff47\060\uff47\061\231\062\uff47\001\002\000\056\027" +
    "\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c" +
    "\036\uff4c\037\uff4c\040\uff4c\041\uff4c\042\uff4c\043\uff4c\045" +
    "\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c\054\uff4c\055\uff4c" +
    "\060\uff4c\062\uff4c\001\002\000\020\013\uff59\023\uff59\024" +
    "\uff59\025\uff59\026\uff59\030\163\057\uff59\001\002\000\004" +
    "\062\233\001\002\000\056\027\uff48\030\uff48\031\uff48\032" +
    "\uff48\033\uff48\034\uff48\035\uff48\036\uff48\037\uff48\040\uff48" +
    "\041\uff48\042\uff48\043\uff48\045\uff48\046\uff48\047\uff48\050" +
    "\uff48\051\uff48\054\uff48\055\uff48\060\uff48\062\uff48\001\002" +
    "\000\022\003\uff2b\013\uff2b\023\uff2b\024\uff2b\025\uff2b\026" +
    "\uff2b\030\uff2b\057\uff2b\001\002\000\016\013\225\023\130" +
    "\024\035\025\037\026\036\057\220\001\002\000\016\013" +
    "\uff30\023\uff30\024\uff30\025\uff30\026\uff30\057\uff30\001\002" +
    "\000\016\013\uff2f\023\uff2f\024\uff2f\025\uff2f\026\uff2f\057" +
    "\uff2f\001\002\000\022\003\uff2d\013\uff2d\023\uff2d\024\uff2d" +
    "\025\uff2d\026\uff2d\030\uff2d\057\uff2d\001\002\000\022\003" +
    "\uff2c\013\uff2c\023\uff2c\024\uff2c\025\uff2c\026\uff2c\030\uff2c" +
    "\057\uff2c\001\002\000\016\013\225\023\130\024\035\025" +
    "\037\026\036\057\220\001\002\000\016\013\uff2e\023\uff2e" +
    "\024\uff2e\025\uff2e\026\uff2e\057\uff2e\001\002\000\056\027" +
    "\uff51\030\uff51\031\uff51\032\uff51\033\uff51\034\uff51\035\uff51" +
    "\036\uff51\037\uff51\040\uff51\041\uff51\042\uff51\043\uff51\045" +
    "\uff51\046\uff51\047\uff51\050\uff51\051\uff51\054\uff51\055\uff51" +
    "\060\uff51\062\uff51\001\002\000\042\027\uff53\030\uff53\034" +
    "\uff53\035\uff53\036\uff53\037\uff53\040\uff53\041\uff53\042\uff53" +
    "\043\uff53\045\uff53\046\uff53\054\uff53\055\uff53\060\uff53\062" +
    "\uff53\001\002\000\004\060\247\001\002\000\056\027\uff4b" +
    "\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036" +
    "\uff4b\037\uff4b\040\uff4b\041\uff4b\042\uff4b\043\uff4b\045\uff4b" +
    "\046\uff4b\047\uff4b\050\uff4b\051\uff4b\054\uff4b\055\uff4b\060" +
    "\uff4b\062\uff4b\001\002\000\022\003\uff31\013\uff31\023\uff31" +
    "\024\uff31\025\uff31\026\uff31\030\uff31\057\uff31\001\002\000" +
    "\016\013\uff34\023\uff34\024\uff34\025\uff34\026\uff34\057\uff34" +
    "\001\002\000\022\003\uff32\013\uff32\023\uff32\024\uff32\025" +
    "\uff32\026\uff32\030\uff32\057\uff32\001\002\000\016\013\225" +
    "\023\130\024\035\025\037\026\036\057\220\001\002\000" +
    "\016\013\225\023\130\024\035\025\037\026\036\057\220" +
    "\001\002\000\016\013\uff33\023\uff33\024\uff33\025\uff33\026" +
    "\uff33\057\uff33\001\002\000\042\027\uff56\030\uff56\034\uff56" +
    "\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043" +
    "\uff56\045\uff56\046\uff56\054\uff56\055\uff56\060\uff56\062\uff56" +
    "\001\002\000\032\034\uff58\035\uff58\036\uff58\037\uff58\040" +
    "\uff58\041\uff58\042\uff58\043\uff58\054\uff58\055\uff58\060\uff58" +
    "\062\uff58\001\002\000\022\013\uff59\023\uff59\024\uff59\025" +
    "\uff59\026\uff59\030\163\057\uff59\060\uff75\001\002\000\004" +
    "\060\272\001\002\000\004\060\uff76\001\002\000\006\055" +
    "\264\060\uff6b\001\002\000\020\013\uff59\023\uff59\024\uff59" +
    "\025\uff59\026\uff59\030\163\057\uff59\001\002\000\006\055" +
    "\264\060\uff6c\001\002\000\004\060\uff6d\001\002\000\006" +
    "\055\uff69\060\uff69\001\002\000\006\055\uff6a\060\uff6a\001" +
    "\002\000\006\055\uff68\060\uff68\001\002\000\056\027\uff77" +
    "\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\045\uff77" +
    "\046\uff77\047\uff77\050\uff77\051\uff77\054\uff77\055\uff77\060" +
    "\uff77\062\uff77\001\002\000\026\034\302\035\276\036\300" +
    "\037\277\040\303\041\274\042\uff5c\043\uff5c\054\uff5c\060" +
    "\uff5c\001\002\000\020\013\uff35\023\uff35\024\uff35\025\uff35" +
    "\026\uff35\030\uff35\057\uff35\001\002\000\012\042\uff5e\043" +
    "\uff5e\054\uff5e\060\uff5e\001\002\000\020\013\uff39\023\uff39" +
    "\024\uff39\025\uff39\026\uff39\030\uff39\057\uff39\001\002\000" +
    "\020\013\uff36\023\uff36\024\uff36\025\uff36\026\uff36\030\uff36" +
    "\057\uff36\001\002\000\020\013\uff37\023\uff37\024\uff37\025" +
    "\uff37\026\uff37\030\uff37\057\uff37\001\002\000\020\013\uff59" +
    "\023\uff59\024\uff59\025\uff59\026\uff59\030\163\057\uff59\001" +
    "\002\000\020\013\uff3a\023\uff3a\024\uff3a\025\uff3a\026\uff3a" +
    "\030\uff3a\057\uff3a\001\002\000\020\013\uff38\023\uff38\024" +
    "\uff38\025\uff38\026\uff38\030\uff38\057\uff38\001\002\000\012" +
    "\042\uff5d\043\uff5d\054\uff5d\060\uff5d\001\002\000\020\013" +
    "\uff59\023\uff59\024\uff59\025\uff59\026\uff59\030\163\057\uff59" +
    "\001\002\000\012\042\uff61\043\uff61\054\uff61\060\uff61\001" +
    "\002\000\022\003\311\013\uff59\023\uff59\024\uff59\025\uff59" +
    "\026\uff59\030\163\057\uff59\001\002\000\004\054\317\001" +
    "\002\000\004\054\312\001\002\000\010\003\314\023\130" +
    "\060\uff83\001\002\000\004\060\316\001\002\000\004\060" +
    "\315\001\002\000\030\006\uff98\010\uff98\012\uff98\014\uff98" +
    "\015\uff98\016\uff98\020\uff98\022\uff98\023\uff98\063\uff98\064" +
    "\uff98\001\002\000\030\006\uff9c\010\uff9c\012\uff9c\014\uff9c" +
    "\015\uff9c\016\uff9c\020\uff9c\022\uff9c\023\uff9c\063\uff9c\064" +
    "\uff9c\001\002\000\004\003\320\001\002\000\004\060\321" +
    "\001\002\000\030\006\uff9b\010\uff9b\012\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\020\uff9b\022\uff9b\023\uff9b\063\uff9b\064\uff9b" +
    "\001\002\000\022\003\325\013\uff59\023\uff59\024\uff59\025" +
    "\uff59\026\uff59\030\163\057\uff59\001\002\000\030\006\uff95" +
    "\010\uff95\012\uff95\014\uff95\015\uff95\016\uff95\020\uff95\022" +
    "\uff95\023\uff95\063\uff95\064\uff95\001\002\000\004\054\334" +
    "\001\002\000\006\054\326\060\327\001\002\000\010\003" +
    "\331\023\130\060\uff83\001\002\000\030\006\uff96\010\uff96" +
    "\012\uff96\014\uff96\015\uff96\016\uff96\020\uff96\022\uff96\023" +
    "\uff96\063\uff96\064\uff96\001\002\000\004\060\333\001\002" +
    "\000\004\060\332\001\002\000\030\006\uff97\010\uff97\012" +
    "\uff97\014\uff97\015\uff97\016\uff97\020\uff97\022\uff97\023\uff97" +
    "\063\uff97\064\uff97\001\002\000\030\006\uff9a\010\uff9a\012" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a\022\uff9a\023\uff9a" +
    "\063\uff9a\064\uff9a\001\002\000\010\003\336\023\130\060" +
    "\uff83\001\002\000\004\060\340\001\002\000\004\060\337" +
    "\001\002\000\030\006\uff99\010\uff99\012\uff99\014\uff99\015" +
    "\uff99\016\uff99\020\uff99\022\uff99\023\uff99\063\uff99\064\uff99" +
    "\001\002\000\030\006\uff9d\010\uff9d\012\uff9d\014\uff9d\015" +
    "\uff9d\016\uff9d\020\uff9d\022\uff9d\023\uff9d\063\uff9d\064\uff9d" +
    "\001\002\000\022\003\uff3b\013\uff3b\023\uff3b\024\uff3b\025" +
    "\uff3b\026\uff3b\030\uff3b\057\uff3b\001\002\000\022\003\uff3d" +
    "\013\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d\030\uff3d\057" +
    "\uff3d\001\002\000\022\003\uff3c\013\uff3c\023\uff3c\024\uff3c" +
    "\025\uff3c\026\uff3c\030\uff3c\057\uff3c\001\002\000\020\013" +
    "\uff74\023\uff74\024\uff74\025\uff74\026\uff74\030\uff74\057\uff74" +
    "\001\002\000\006\054\uff79\060\uff79\001\002\000\006\054" +
    "\uff78\060\uff78\001\002\000\006\054\uff7a\060\uff7a\001\002" +
    "\000\020\013\uff59\023\uff59\024\uff59\025\uff59\026\uff59\030" +
    "\163\057\uff59\001\002\000\006\054\uff73\060\uff73\001\002" +
    "\000\020\013\uff59\023\uff59\024\uff59\025\uff59\026\uff59\030" +
    "\163\057\uff59\001\002\000\006\055\354\060\uff86\001\002" +
    "\000\004\024\360\001\002\000\004\060\356\001\002\000" +
    "\004\054\357\001\002\000\030\006\uff90\010\uff90\012\uff90" +
    "\014\uff90\015\uff90\016\uff90\020\uff90\022\uff90\023\uff90\063" +
    "\uff90\064\uff90\001\002\000\004\060\uff87\001\002\000\030" +
    "\006\uff94\010\uff94\012\uff94\014\uff94\015\uff94\016\uff94\020" +
    "\uff94\022\uff94\023\uff94\063\uff94\064\uff94\001\002\000\022" +
    "\003\364\013\uff59\023\uff59\024\uff59\025\uff59\026\uff59\030" +
    "\163\057\uff59\001\002\000\024\006\uffa4\012\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\020\uffa4\022\uffa4\023\uffa4\063\uffa4\001" +
    "\002\000\004\060\367\001\002\000\006\043\175\060\366" +
    "\001\002\000\024\006\uff66\012\uff66\014\uff66\015\uff66\016" +
    "\uff66\020\uff66\022\uff66\023\uff66\063\uff66\001\002\000\024" +
    "\006\uff65\012\uff65\014\uff65\015\uff65\016\uff65\020\uff65\022" +
    "\uff65\023\uff65\063\uff65\001\002\000\024\006\134\012\133" +
    "\014\136\015\126\016\132\020\142\022\127\023\130\063" +
    "\145\001\002\000\030\006\uffa3\010\uffa3\012\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\020\uffa3\022\uffa3\023\uffa3\063\uffa3\064" +
    "\uffa3\001\002\000\030\006\uff8d\010\373\012\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\020\uff8d\022\uff8d\023\uff8d\063\uff8d\064" +
    "\uff8d\001\002\000\024\006\134\012\133\014\136\015\126" +
    "\016\132\020\142\022\127\023\130\063\145\001\002\000" +
    "\030\006\uffa2\010\uffa2\012\uffa2\014\uffa2\015\uffa2\016\uffa2" +
    "\020\uffa2\022\uffa2\023\uffa2\063\uffa2\064\uffa2\001\002\000" +
    "\030\006\uff8e\010\uff8e\012\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\020\uff8e\022\uff8e\023\uff8e\063\uff8e\064\uff8e\001\002\000" +
    "\004\054\uff8c\001\002\000\004\054\u0100\001\002\000\030" +
    "\006\uff92\010\uff92\012\uff92\014\uff92\015\uff92\016\uff92\020" +
    "\uff92\022\uff92\023\uff92\063\uff92\064\uff92\001\002\000\030" +
    "\006\uff7e\010\uff7e\012\uff7e\014\uff7e\015\uff7e\016\uff7e\020" +
    "\uff7e\022\uff7e\023\uff7e\063\uff7e\064\uff7e\001\002\000\072" +
    "\027\uff43\030\uff43\031\uff43\032\uff43\033\uff43\034\uff43\035" +
    "\uff43\036\uff43\037\uff43\040\uff43\041\uff43\042\uff43\043\uff43" +
    "\044\uff43\045\uff43\046\uff43\047\uff43\050\uff43\051\uff43\052" +
    "\uff43\053\uff43\054\uff43\055\uff43\056\u0107\057\uff43\060\uff43" +
    "\061\u0106\062\uff43\001\002\000\066\027\uff45\030\uff45\031" +
    "\uff45\032\uff45\033\uff45\034\uff45\035\uff45\036\uff45\037\uff45" +
    "\040\uff45\041\uff45\042\uff45\043\uff45\044\uff45\045\uff45\046" +
    "\uff45\047\uff45\050\uff45\051\uff45\052\uff45\053\uff45\054\uff45" +
    "\055\uff45\057\uff45\060\uff45\062\uff45\001\002\000\072\027" +
    "\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44\035\uff44" +
    "\036\uff44\037\uff44\040\uff44\041\uff44\042\uff44\043\uff44\044" +
    "\uff44\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44\052\uff44" +
    "\053\uff44\054\uff44\055\uff44\056\u0107\057\uff44\060\uff44\061" +
    "\u0106\062\uff44\001\002\000\072\027\uff41\030\uff41\031\uff41" +
    "\032\uff41\033\uff41\034\uff41\035\uff41\036\uff41\037\uff41\040" +
    "\uff41\041\uff41\042\uff41\043\uff41\044\uff41\045\uff41\046\uff41" +
    "\047\uff41\050\uff41\051\uff41\052\uff41\053\uff41\054\uff41\055" +
    "\uff41\056\uff41\057\uff41\060\uff41\061\uff41\062\uff41\001\002" +
    "\000\022\003\u0109\013\uff59\023\uff59\024\uff59\025\uff59\026" +
    "\uff59\030\163\057\uff59\001\002\000\004\023\u0108\001\002" +
    "\000\072\027\uff40\030\uff40\031\uff40\032\uff40\033\uff40\034" +
    "\uff40\035\uff40\036\uff40\037\uff40\040\uff40\041\uff40\042\uff40" +
    "\043\uff40\044\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051" +
    "\uff40\052\uff40\053\uff40\054\uff40\055\uff40\056\uff40\057\uff40" +
    "\060\uff40\061\uff40\062\uff40\001\002\000\004\062\u010c\001" +
    "\002\000\004\062\u010b\001\002\000\072\027\uff3f\030\uff3f" +
    "\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037" +
    "\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\044\uff3f\045\uff3f" +
    "\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f\054" +
    "\uff3f\055\uff3f\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062\uff3f" +
    "\001\002\000\072\027\uff3e\030\uff3e\031\uff3e\032\uff3e\033" +
    "\uff3e\034\uff3e\035\uff3e\036\uff3e\037\uff3e\040\uff3e\041\uff3e" +
    "\042\uff3e\043\uff3e\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050" +
    "\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e" +
    "\057\uff3e\060\uff3e\061\uff3e\062\uff3e\001\002\000\072\027" +
    "\uff42\030\uff42\031\uff42\032\uff42\033\uff42\034\uff42\035\uff42" +
    "\036\uff42\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044" +
    "\uff42\045\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42" +
    "\053\uff42\054\uff42\055\uff42\056\uff42\057\uff42\060\uff42\061" +
    "\uff42\062\uff42\001\002\000\030\006\uff93\010\uff93\012\uff93" +
    "\014\uff93\015\uff93\016\uff93\020\uff93\022\uff93\023\uff93\063" +
    "\uff93\064\uff93\001\002\000\004\023\130\001\002\000\004" +
    "\060\u0111\001\002\000\004\054\u0112\001\002\000\030\006" +
    "\uff91\010\uff91\012\uff91\014\uff91\015\uff91\016\uff91\020\uff91" +
    "\022\uff91\023\uff91\063\uff91\064\uff91\001\002\000\012\005" +
    "\uffc8\017\uffc8\023\uffc8\064\uffc8\001\002\000\022\003\uff72" +
    "\013\uff72\023\uff72\024\uff72\025\uff72\026\uff72\030\uff72\057" +
    "\uff72\001\002\000\022\003\u0117\013\uff59\023\uff59\024\uff59" +
    "\025\uff59\026\uff59\030\163\057\uff59\001\002\000\030\006" +
    "\uff71\010\uff71\012\uff71\014\uff71\015\uff71\016\uff71\020\uff71" +
    "\022\uff71\023\uff71\063\uff71\064\uff71\001\002\000\004\054" +
    "\u011b\001\002\000\004\054\u011a\001\002\000\030\006\uff70" +
    "\010\uff70\012\uff70\014\uff70\015\uff70\016\uff70\020\uff70\022" +
    "\uff70\023\uff70\063\uff70\064\uff70\001\002\000\030\006\uff6f" +
    "\010\uff6f\012\uff6f\014\uff6f\015\uff6f\016\uff6f\020\uff6f\022" +
    "\uff6f\023\uff6f\063\uff6f\064\uff6f\001\002\000\030\006\uff6e" +
    "\010\uff6e\012\uff6e\014\uff6e\015\uff6e\016\uff6e\020\uff6e\022" +
    "\uff6e\023\uff6e\063\uff6e\064\uff6e\001\002\000\010\003\uffb9" +
    "\023\uffb9\063\uffb9\001\002\000\026\006\uffb6\012\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\020\uffb6\022\uffb6\023\uffb6\063\uffb6" +
    "\064\uffb6\001\002\000\026\006\uffbf\012\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\020\uffbf\022\uffbf\023\uffbf\063\uffbf\064\uffbf" +
    "\001\002\000\010\003\uffbd\023\uffbd\063\u0120\001\002\000" +
    "\026\006\uffb5\012\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5" +
    "\022\uffb5\023\uffb5\063\uffb5\064\uffb5\001\002\000\004\023" +
    "\u0124\001\002\000\006\054\uffb7\055\uffb7\001\002\000\006" +
    "\054\u0129\055\u0128\001\002\000\012\054\uffda\055\uffda\060" +
    "\uffda\061\u0126\001\002\000\010\054\uffdc\055\uffdc\060\uffdc" +
    "\001\002\000\004\062\u0127\001\002\000\010\054\uffdb\055" +
    "\uffdb\060\uffdb\001\002\000\004\023\u0124\001\002\000\010" +
    "\003\uffba\023\uffba\063\uffba\001\002\000\006\054\uffb8\055" +
    "\uffb8\001\002\000\006\003\uffac\023\uffac\001\002\000\010" +
    "\003\uffaa\023\uffaa\063\uffaa\001\002\000\004\023\u0124\001" +
    "\002\000\006\055\uffa7\060\uffa7\001\002\000\012\005\uffea" +
    "\017\uffea\023\uffea\064\uffea\001\002\000\004\064\uffcf\001" +
    "\002\000\006\054\uffd0\055\uffd0\001\002\000\006\054\u0134" +
    "\055\u0133\001\002\000\004\023\u0124\001\002\000\010\023" +
    "\uffd2\063\uffd2\064\uffd2\001\002\000\006\054\uffd1\055\uffd1" +
    "\001\002\000\004\063\uffd8\001\002\000\012\007\ufffb\011" +
    "\ufffb\023\ufffb\063\ufffb\001\002\000\012\005\060\017\uffc6" +
    "\023\uffc6\064\uffeb\001\002\000\004\064\u013a\001\002\000" +
    "\004\002\uffff\001\002\000\006\003\u013d\023\u0124\001\002" +
    "\000\006\054\u0147\055\u0146\001\002\000\006\054\u0145\055" +
    "\u0144\001\002\000\006\003\uffef\023\uffef\001\002\000\012" +
    "\007\ufff5\011\ufff5\023\ufff5\063\ufff5\001\002\000\006\003" +
    "\u013d\023\u0124\001\002\000\012\007\ufff3\011\ufff3\023\ufff3" +
    "\063\ufff3\001\002\000\006\003\ufff0\023\ufff0\001\002\000" +
    "\012\007\ufff4\011\ufff4\023\ufff4\063\ufff4\001\002\000\006" +
    "\003\uffed\023\uffed\001\002\000\012\007\ufff1\011\ufff1\023" +
    "\ufff1\063\ufff1\001\002\000\006\003\uffee\023\uffee\001\002" +
    "\000\012\007\ufff2\011\ufff2\023\ufff2\063\ufff2\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0146\000\006\002\003\140\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\141\007" +
    "\001\001\000\020\003\011\004\016\005\015\006\013\011" +
    "\017\026\014\056\010\001\001\000\004\142\u013a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\u0136\006\013" +
    "\011\017\026\014\056\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\022\001\001\000\004\143\023" +
    "\001\001\000\006\012\024\013\026\001\001\000\004\144" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\032\015\031\016\030\017\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\045\001\001\000\004\056" +
    "\u0135\001\001\000\002\001\001\000\012\030\050\031\051" +
    "\032\052\056\047\001\001\000\006\020\u0130\033\u0131\001" +
    "\001\000\004\034\055\001\001\000\006\032\053\056\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\060\010\061\035\062\036\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\u012e\036\063\001\001\000\002\001\001\000\006" +
    "\037\066\056\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\145\067\001\001\000\002\001\001\000\004" +
    "\146\071\001\001\000\002\001\001\000\004\147\073\001" +
    "\001\000\020\050\104\051\077\052\100\053\101\054\103" +
    "\055\076\056\074\001\001\000\004\153\u012c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\150\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\051\077\053\105\055\106\056\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\040\121\041\115\042\113" +
    "\043\117\045\116\056\112\001\001\000\004\152\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\042\u011e\045\u011d\056\112\001" +
    "\001\000\002\001\001\000\004\151\122\001\001\000\024" +
    "\046\124\047\143\057\140\064\130\072\134\100\142\101" +
    "\136\102\137\126\123\001\001\000\012\103\346\132\u0113" +
    "\135\342\137\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\164\u0101\001\001\000\002" +
    "\001\001\000\010\061\376\114\375\115\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\064\152\076\150\077\154\101\136\102\137" +
    "\126\151\001\001\000\002\001\001\000\020\057\147\064" +
    "\130\072\134\100\142\101\136\102\137\126\123\001\001" +
    "\000\024\046\145\047\143\057\140\064\130\072\134\100" +
    "\142\101\136\102\137\126\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\103\346\132\343\135\342\137\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\064" +
    "\152\076\150\077\156\101\136\102\137\126\151\001\001" +
    "\000\002\001\001\000\004\156\160\001\001\000\022\074" +
    "\171\106\165\107\172\110\173\111\161\112\167\114\163" +
    "\115\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\163\272\001\001\000\032\014\032\015\031\016\030" +
    "\017\221\102\223\116\214\117\216\120\225\121\220\122" +
    "\222\123\215\126\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\157" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\110\175\111\161\112\167\114\163\115\164\001\001\000" +
    "\002\001\001\000\016\064\201\075\203\076\200\101\136" +
    "\102\137\126\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\160\204" +
    "\001\001\000\020\057\205\064\130\072\134\100\142\101" +
    "\136\102\137\126\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\134\253\135\252\001\001\000" +
    "\006\114\245\115\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\136\241\137\234\001\001\000\002\001" +
    "\001\000\004\056\226\001\001\000\002\001\001\000\004" +
    "\125\227\001\001\000\002\001\001\000\006\114\231\115" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\032\015\031\016\030\017\221\102" +
    "\223\121\244\122\222\123\215\126\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\032\015\031\016\030\017\221\102\223" +
    "\123\243\126\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\014\032\015\031\016\030\017\221\102\223\116\256" +
    "\117\216\120\225\121\220\122\222\123\215\126\213\001" +
    "\001\000\026\014\032\015\031\016\030\017\221\102\223" +
    "\120\255\121\220\122\222\123\215\126\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\065\260\066\261\114\262\115\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\067\265\070\264\071\266" +
    "\001\001\000\006\114\270\115\164\001\001\000\004\071" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\113" +
    "\274\133\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\114\303\115\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\112\305\114\163\115" +
    "\164\001\001\000\002\001\001\000\020\106\307\107\172" +
    "\110\173\111\161\112\167\114\163\115\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\064\152\076\150" +
    "\077\312\101\136\102\137\126\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\106\323\107\172\110\173\111\161\112\167\114\163" +
    "\115\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\064\152\076\150\077\327\101\136" +
    "\102\137\126\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\064\152\076\150\077\334\101\136\102\137\126" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\161\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\114" +
    "\350\115\164\001\001\000\002\001\001\000\006\114\352" +
    "\115\164\001\001\000\004\063\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\062\362\107" +
    "\364\110\173\111\161\112\167\114\163\115\164\001\001" +
    "\000\004\154\367\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\057\370" +
    "\064\130\072\134\100\142\101\136\102\137\126\123\001" +
    "\001\000\004\155\371\001\001\000\004\060\373\001\001" +
    "\000\020\057\374\064\130\072\134\100\142\101\136\102" +
    "\137\126\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\127\u0102\130\u0103\131\u0104\001\001" +
    "\000\002\001\001\000\004\131\u010c\001\001\000\002\001" +
    "\001\000\006\114\u0109\115\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\126\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\162\u0114\001\001\000\012\104\u0118\105\u0115\114\u0117\115" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\u0121\044" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u012d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\u0134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\u0138\010" +
    "\061\035\062\036\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\u013b\021\u013e\022\u013f\023\u0140\024" +
    "\u013d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\u013b\023\u0142\024" +
    "\u0141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 3;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    Tab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = this.getScanner().next_token();
    if (s != null && s.value != null)
        log.debug(s.toString() + " " + s.value.toString());
    return s;

    }



    public static class DumpUpgradeSymbolTableVisitor extends SymbolTableVisitor
    {
        protected StringBuilder output = new StringBuilder();
        protected final String indent = "   ";
        protected StringBuilder currentIndent = new StringBuilder();

        protected void nextIndentationLevel() {
            currentIndent.append(indent);
        }

        protected void previousIndentationLevel() {
            if (currentIndent.length() > 0)
                currentIndent.setLength(currentIndent.length()-indent.length());
        }


        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitObjNode(symboltable.Obj)
         */
        @Override
        public void visitObjNode(Obj objToVisit) {
            //output.append("[");
            switch (objToVisit.getKind()) {
            case Obj.Con:  output.append("Con "); break;
            case Obj.Var:  output.append("Var "); break;
            case Obj.Type: output.append("Type "); break;
            case Obj.Meth: output.append("Meth "); break;
            case Obj.Fld:  output.append("Fld "); break;
            case Obj.Prog: output.append("Prog "); break;
            }

            output.append(objToVisit.getName());
            output.append(": ");

            if ((Obj.Var == objToVisit.getKind()) && "this".equalsIgnoreCase(objToVisit.getName()))
                output.append("");
            else
                objToVisit.getType().accept(this);

            output.append(", ");
            output.append("Adr:" + objToVisit.getAdr());
            output.append(", ");
            output.append("Level:" + objToVisit.getLevel() + " ");

            if (objToVisit.getKind() == Obj.Prog || objToVisit.getKind() == Obj.Meth) {
                output.append("\n");
                nextIndentationLevel();
            }


            for (Obj o : objToVisit.getLocalSymbols()) {
                output.append(currentIndent.toString());
                o.accept(this);
                output.append("\n");
            }

            if (objToVisit.getKind() == Obj.Prog || objToVisit.getKind() == Obj.Meth)
                previousIndentationLevel();

            //output.append("]");

        }

        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitScopeNode(symboltable.Scope)
         */
        @Override
        public void visitScopeNode(Scope scope) {
            for (Obj o : scope.values()) {
                o.accept(this);
                output.append("\n");
            }
        }

        /* (non-Javadoc)
         * @see rs.etf.pp1.symboltable.test.SymbolTableVisitor#visitStructNode(symboltable.Struct)
         */
        @Override
        public void visitStructNode(Struct structToVisit) {
            switch (structToVisit.getKind()) {
            case Struct.None:
                output.append("notype");
                break;
            case Struct.Int:
                output.append("int");
                break;
            case Struct.Char:
                output.append("char");
                break;
            case Struct.Bool:
                output.append("bool");
                break;
            case Struct.Array:
                output.append("Arr of ");

                switch (structToVisit.getElemType().getKind()) {
                case Struct.None:
                    output.append("notype");
                    break;
                case Struct.Int:
                    output.append("int");
                    break;
                case Struct.Char:
                    output.append("char");
                    break;
                case Struct.Class:
                    output.append("Class");
                    break;
                case Struct.Bool:
                  output.append("bool");
                    break;
                }
                break;
            case Struct.Class:
                output.append("Class [");
                for (Obj obj : structToVisit.getMembers()) {
                    obj.accept(this);
                }
                output.append("]");
                break;
            }

        }

        public String getOutput() {
            StringBuilder tmp = output;
            output = new StringBuilder("");
            return tmp.toString();
        }

    }

    static class TabExt
    {
        static Struct boolType = new Struct(Struct.Bool);
        static SymbolTableVisitor symbolTableVisitor = new DumpUpgradeSymbolTableVisitor();
        static Obj programObj = null;
        static Obj curMethod = null;
        static Obj curClass = null;
        static boolean doesMainExist = false;
    }

    public static class ObjResultWrapper {
        Obj obj;
        boolean isRightValue;
        boolean isLeftValue;
        boolean semanticError = false;
        boolean syntaxError = false;
        int relOp;

        public ObjResultWrapper() {}

        public ObjResultWrapper(Obj obj, boolean isRightValue) {
            this.obj = obj;
            this.isRightValue = isRightValue;
            this.isLeftValue = !isRightValue;
        }

        public Obj getObj() {
            return obj;
        }
        public void setObj(Obj obj) {
            this.obj = obj;
        }

        public void setRightValue(boolean isRightValue) {
            this.isRightValue = isRightValue;
            this.isLeftValue = !isRightValue;
        }

        public void setLeftValue(boolean isLeftValue) {
            this.isLeftValue = isLeftValue;
            this.isRightValue = !isLeftValue;
        }

        public boolean isLeftValue() {
            return isLeftValue;
        }

        public boolean isSemanticError() {
            return semanticError;
        }

        public boolean isSyntaxError()
        {
            return syntaxError;
        }

        public ObjResultWrapper setSemanticError(boolean semanticError) {
            this.semanticError = semanticError;
            return this;
        }

        public ObjResultWrapper setSyntaxError(boolean syntaxError)
        {
            this.syntaxError = syntaxError;
            return this;
        }

        public boolean isError()
        {
            return (syntaxError || semanticError);
        }

        public boolean isClass()
        {
            return false;
        }

        public boolean  isField()
        {
            return false;
        }

        public boolean isArrayElement()
        {
            return obj.getKind() == Obj.Elem && isLeftValue;
        }

        public boolean isArray()
        {
            return (isLeftValue &&  (obj.getType().getKind() == Struct.Array) );
        }


        public void generateLeftValue()
        {
        }

        public boolean loadable()
        {
            int kind = obj.getKind();
            return (kind == Obj.Con) || (kind == Obj.Var) || (kind == Obj.Fld) || (kind == Obj.Elem);
        }

        public void generateRightValue()
        {
            if (isArrayElement())
            {
                // a i a[i]
                Code.put(Code.dup_x2);
                // a[i] a i a[i]
                Code.put(Code.pop);
                // a[i] a i
                Code.put(Code.pop);
                // a[i] a
                Code.put(Code.pop);
                // a[i]
                setRightValue(true);
            }
        }

        public void setRelOp(int relOp)
        {
            this.relOp = relOp;
        }

        public int getRelOp()
        {
            return relOp;
        }

    }


    // U slucaju greske.
    //
     @Override
    protected int error_sync_size() {
        // TODO Auto-generated method stub
        return 1;
    }

    static class ParserCnt {
        // NIVO A
        static int globalVarDefCnt = 0;
        static int localVarDefMainCnt = 0;
        static int globalConstDefCnt = 0;
        static int globalArrayDeclCnt = 0;

        // NIVO B
        static int globalAndStaticMethodCnt = 0;
        //static int l

        static boolean inVarDeclGlobalScope = false;
        static boolean inMethodDeclGlobalScope = false;
        static boolean inMethodEntryGlobalScope = false;
    }

    boolean errorDetected = false;
    boolean syntaxError = false;
    boolean semanticError = false;
    String fileName = "test/generator/program.obj";


    public void setFileName(String fileName){
        this.fileName = fileName;
    }

    Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    // MJParser greska.
    //
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    // Overrideovana MJParser funkcija.
    //
    public void syntax_error(Symbol cur_token) {
        syntaxError = true;
        report_error("\nSintaksna greska", cur_token);
    }

    public void semnatic_error(String msg, Symbol sym)
    {
        semanticError = true;
        report_error("\nSemnaticka greska : " + msg, sym);
    }


    // Overrideovana MJParser funkcija.
    //
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    // Sa vezbi funkcija.
    //
    public void report_error(String message, Object info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol)
        {
            Symbol symbol = (Symbol)info;
            msg.append(symbol.toString()).append (" na liniji ").append(symbol.left);
        }
        log.info(msg.toString());
    }


    static class WrapperObj
    {
        private Obj obj;
        private boolean isFoundAndTypeMatch;

        WrapperObj(Obj obj, boolean isFoundAndTypeMatch) {
            this.obj = obj;
            this.isFoundAndTypeMatch = isFoundAndTypeMatch;
        }

        Obj getObj() { return obj; }
        boolean isFoundAndTypeMatch() { return isFoundAndTypeMatch; }

        boolean isFound() { return obj != Tab.noObj; }
        boolean isTypeMismatch(){
            return isFound() && !isFoundAndTypeMatch;
        }


    }



    public WrapperObj find_and_report_search(String name, int line, Struct type, String additionalMessage)
    {
        Obj obj = Tab.find(name);
        WrapperObj retWrapperObj = null;

        if (Tab.noObj == obj)
        {
            retWrapperObj = new WrapperObj(obj, false);
        }
        else if (!type.equals(obj.getType()))
        {
            retWrapperObj = new WrapperObj(obj, false);
        }
        else
        {
            retWrapperObj = new WrapperObj(obj, true);
        }

        if (null != additionalMessage)
        {
            additionalMessage += " simbol " + name + " na liniji " + line;
            if (retWrapperObj.isFoundAndTypeMatch)
            {
                additionalMessage += " nadjen simbol";
                report_info(additionalMessage, null);

            }
            else if (retWrapperObj.isTypeMismatch()) {
                additionalMessage += " nije ispravnog tipa";
                semnatic_error(additionalMessage, null);
            }
            else
            {
                additionalMessage += " nije nadjen ";
                semnatic_error(additionalMessage, null);
            }

        }
        return retWrapperObj;
    }


    boolean find_double_and_report_search(String name, int line, String additionalMessage)
    {
        Scope currentScope = Tab.currentScope;

        Obj objDoubleDef = currentScope.findSymbol(name);
        // Nadjen je duplikat u okruzujucem opsegu.
        //
        if (objDoubleDef != null)
        {
            additionalMessage += " simbol " + name + " na liniji " + line + " Vec postoji";
            semnatic_error(additionalMessage, null);
            return true;
        }
        else
        {
            return false;
        }
    }

    boolean check_type_and_report(Obj obj, Struct type, int line, String additionalMessage)
    {
        if (!obj.getType().equals(type) && ( additionalMessage != null) ){
            semnatic_error(additionalMessage + " Tipovi nisu kompatibilni linija" + line, null);
            return false;
        }
        return true;
    }

    ObjResultWrapper find_for_use_and_report(String name, int line, String additionalMessage)
    {
        ObjResultWrapper result = null;
        Obj obj = Tab.find(name);
        result = new ObjResultWrapper(obj, obj.getKind() == Obj.Con);
        if (obj == Tab.noObj)
        {
            semnatic_error(additionalMessage + " Nije definisan u okruzujucem opsegu  u liniji" + line, null);
            result.setSemanticError(true);
        }
        else
        {
            // neki info
        }

        return result;
    }


    void pushOnCodeStack(LinkedList<LinkedList<Byte>> codeStack, int beginAddress)
    {
        // Oprezno, mozda je jos neophodno azurirati!!!
        //
        LinkedList<Byte> listOfCode = new LinkedList<Byte>();

        for (int idx = beginAddress; idx < Code.pc; idx ++)
        {
            listOfCode.addLast(Code.buf[idx]);
        }
        codeStack.addLast(listOfCode);
        Code.pc = beginAddress;
    }

    void popFromCodeStack(LinkedList<LinkedList<Byte>> codeStack)
    {
        LinkedList<Byte> listOfCode = codeStack.removeLast();
        for (int idx = 0; idx < listOfCode.size(); idx ++)
        {
            Code.put(listOfCode.get(idx));
        }
    }

    void updateAdresses(LinkedList<LinkedList<Integer>> list)
    {
        LinkedList<Integer> listOfJumpAdresses = list.removeLast();

        for (int idx = 0; idx < listOfJumpAdresses.size(); idx ++)
        {
            Code.fixup(listOfJumpAdresses.get(idx));
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MJParser$actions {


    final String METHOD_ENTRY_NAME = "main";
    final int OP_ASSIGN_CODE = 0;
    final int CHAR_SIZE = 1;
    final int INT_SIZE = 4;
    Struct curConstType = null;
    Struct curVarType = null ;
    Struct curLocalType = null;
    Struct curFormType = null;
    Obj curObjFieldOrElem = null;
    ObjResultWrapper curObjWrappFieldOrElem = null;
    LinkedList<ObjResultWrapper> listCurObjWrapperFieldOrElem = new LinkedList<ObjResultWrapper>();
    LinkedList<Integer> listAdrIfConditionTrue = new LinkedList<Integer>();
    LinkedList<Integer> listAdrIfConditionFalse = new LinkedList<Integer>();

    LinkedList<Integer> listAdrForConditionFalse  = new LinkedList<Integer>();
    LinkedList<Integer> listAdrForCondition = new LinkedList<Integer>();
    LinkedList<LinkedList<Byte>> listSavedCode = new LinkedList<LinkedList<Byte>>();
    LinkedList<LinkedList<Integer>> listOfListOfBreaksInFor = new LinkedList<LinkedList<Integer>>();
    LinkedList<LinkedList<Integer>> listOfListOfContinuesInFor = new LinkedList<LinkedList<Integer>>();
    Integer forLastDesigantorBeginAddress = null;


    boolean globalVar = false;
    boolean localVar = false;
    boolean formVar = false;
    int formParCnt = 0;




  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action_part00000000(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;

        parser.report_info("Krece da prepoznaje globalne deklaracije", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",94, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;


        Tab.insert(Obj.Type, "bool", TabExt.boolType);
        TabExt.programObj = Tab.insert(Obj.Prog, programName, Tab.noType);

        Tab.openScope();
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",95, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= NT$0 PROGRAM IDENT NT$1 GlobalDeclListEpsilon BRACE_LEFT MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int programNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int programNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String programName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
        // TODO update with virtual table.
        //
        Code.dataSize = Tab.currentScope().getnVars();
        Tab.chainLocalSymbols(TabExt.programObj);
        Tab.closeScope();


        parser.report_info("************** NIVO A*****************", null);
        parser.report_info("Broj definicija globalnih promenljivih " + ParserCnt.globalVarDefCnt, null);
        parser.report_info("Broj definicija lokalnih promenljivih u main funkciji " + ParserCnt.localVarDefMainCnt, null);
        parser.report_info("Broj definicija globalnih konstanti " + ParserCnt.globalConstDefCnt, null);
        parser.report_info("Broj deklaracija globalnih nizova " + ParserCnt.globalArrayDeclCnt, null);
        parser.report_info("************** NIVO B*****************", null);
        parser.report_info("Broj definicija globalnih i statickih funkcija unutrasnjih klasa " + ParserCnt.globalAndStaticMethodCnt, null);
        parser.report_info("USPESNO PREPOZNAVANJE", null);
        Tab.dump(TabExt.symbolTableVisitor);

        if (errorDetected)  {
            parser.report_error("Neuspesno parsiranje!!!", null);
        }
        else if (!TabExt.doesMainExist)
        {
            parser.report_error("Ne postoji globalna main funkcija!!!", null);
        }
        else {
            parser.log.info("Uspesno parsiranje!!!", null);
            File f = new File(fileName);
            if (f.exists())
            {
                f.delete();
            }
            f = new File(fileName);
            Code.write(new FileOutputStream(f));

        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalDeclListEpsilon ::= GlobalDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclListEpsilon",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclListEpsilon",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDeclList ::= GlobalDeclList GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDeclList ::= GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT =null;
		
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= GlobalVarDecl 
            {
              Object RESULT =null;
		
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= ClassDecl 
            {
              Object RESULT =null;
		
        parser.log.debug("Prepoznata klasa", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curVarType = varType;
        globalVar = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",96, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalVarDecl ::= Type NT$2 GlobalVarExprList 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct varType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
        globalVar = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GlobalVarExprList ::= GlobalVarExprCommaList VarExprOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GlobalVarExprList ::= VarExprOrErrorSemi 
            {
              Object RESULT =null;
		int exprOrErrorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprOrErrorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprOrError = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = exprOrError;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarExprOrErrorSemi ::= VarExpr SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper t = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT = (new ObjResultWrapper());
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorSemi",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarExprOrErrorSemi ::= error SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT = (new ObjResultWrapper()).setSyntaxError(true);

        parser.report_error("Uspesan oporavak od greske deklaracije globalne promenljive,  SEMI_COLUMN je resio stvar" , null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorSemi",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarExprCommaList ::= GlobalVarExprCommaList VarExprOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprCommaList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarExprCommaList ::= VarExprOrErrorComma 
            {
              Object RESULT =null;
		int exprOrErrorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprOrErrorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper exprOrError = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        RESULT = exprOrError;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarExprCommaList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarExprOrErrorComma ::= VarExpr COMMA 
            {
              ObjResultWrapper RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper t = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
        RESULT  = t;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorComma",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarExprOrErrorComma ::= error COMMA 
            {
              ObjResultWrapper RESULT =null;
		
        RESULT = (new ObjResultWrapper()).setSyntaxError(true);
        parser.report_error("Uspesan oporavak od greske prilikom deklaracije globalne promenljiva COMMA je resila stvar", null);
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExprOrErrorComma",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MethodDeclListEpsilon ::= MethodDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListEpsilon",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListEpsilon",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDeclList ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

        curConstType = type;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",97, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;


    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",98, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ConstDecl ::= CONST Type NT$3 ConstExprList NT$4 SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ConstExprList ::= ConstExprList COMMA ConstExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExprList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ConstExprList ::= ConstExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExprList",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ConstExpr ::= IDENT OP_ASSIGN ConstValue 
            {
              Object RESULT =null;
		int nameOfConstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfConstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfConst = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int numObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj numObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // Da li se konstanta slaze po tipu sa deklaracijom.
        //
        if (check_type_and_report(numObj, curConstType, numObj.getLevel(), " poredjenje tipova konstanti"))
        {
            // Da nema slucajno duplikata.
            //
            if (!find_double_and_report_search(nameOfConst, nameOfConstleft, "Konstanta"))
            {
                 Obj constObj = Tab.insert(Obj.Con, nameOfConst, curConstType);
            constObj.setAdr(numObj.getAdr());
            }

        }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstExpr",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConstValue ::= ConstNum 
            {
              Obj RESULT =null;
		int constNumleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constNumright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constNum = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constNum;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ConstValue ::= ConstBool 
            {
              Obj RESULT =null;
		int constBoolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constBoolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constBool = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constBool;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ConstValue ::= ConstChar 
            {
              Obj RESULT =null;
		int constCharleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constCharright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constChar = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = constChar;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstValue",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ConstNum ::= CONST_NUM 
            {
              Obj RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, number.toString(), Tab.intType, number.intValue(), numberleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstNum",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ConstBool ::= CONST_BOOL 
            {
              Obj RESULT =null;
		int boolStrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolStrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String boolStr = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, "", TabExt.boolType, Boolean.valueOf(boolStr) ? 1 : 0, boolStrleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstBool",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConstChar ::= CONST_CHAR 
            {
              Obj RESULT =null;
		int charStrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int charStrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String charStr = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            char c = charStr.charAt(1);
            RESULT = new Obj(Obj.Con, "", Tab.charType,
            c, charStrleft);

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstChar",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VarExpr ::= IDENT BracketEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int nameOfVarleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameOfVarright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String nameOfVar = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        Struct type = null;
        String message = "";
        Obj varObj = null;


        if (globalVar)
        {
            message = "Definicija globalne varijable";
            type = curVarType;
        }
        else if (localVar)
        {
            message = "Definicija lokalne varijable";
            type = curLocalType;
        }
        else if (formVar)
        {
            message = "Definicija formalnog parametra";
            type = curFormType;
        }

        if (isArray)
        {
            type = new Struct (Struct.Array, type);
        }

        if (!find_double_and_report_search(nameOfVar, nameOfVarleft, message))
        {
            varObj = Tab.insert(Obj.Var, nameOfVar, type);
            if (formVar)
            {
                varObj.setAdr(Tab.currentScope().getnVars() - 1);
            }
        }
        else
        {
            RESULT = (new ObjResultWrapper()).setSemanticError(true);
        }


    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarExpr",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BracketEpsilon ::= BRACKET_LEFT BRACKET_RIGHT 
            {
              Boolean RESULT =null;
		
        RESULT = true;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketEpsilon",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BracketEpsilon ::= 
            {
              Boolean RESULT =null;
		
        RESULT = false;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketEpsilon",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassDecl ::= CLASS IDENT ExtendsTypeEpsilon BRACE_LEFT FieldDeclListEpsilon BraceMethodDeclListEpsilonEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
		int nameOfClassleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int nameOfClassright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String nameOfClass = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
            parser.log.debug("Prepoznata CLASS", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExtendsTypeEpsilon ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsTypeEpsilon",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExtendsTypeEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsTypeEpsilon",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FieldDeclListEpsilon ::= FieldDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilon",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FieldDeclListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListEpsilon",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FieldDeclList ::= FieldDeclList FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FieldDeclList ::= FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FieldDecl ::= Type FieldExprList SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FieldExprList ::= FieldExprList COMMA VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldExprList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FieldExprList ::= VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldExprList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BraceMethodDeclListEpsilonEpsilon ::= BRACE_LEFT MethodDeclListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceMethodDeclListEpsilonEpsilon",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BraceMethodDeclListEpsilonEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BraceMethodDeclListEpsilonEpsilon",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$5 ::= 
            {
              Object RESULT =null;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object isStatic = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            parser.log.debug("Prepoznat povratni tip", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",99, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object isStatic = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            String message = "Metoda";
            if (!find_double_and_report_search(nameOfMethod, nameOfMethodleft, message))
            {
                TabExt.curMethod  = Tab.insert(Obj.Meth, nameOfMethod, retType);
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",100, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Object isStatic = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

            Tab.openScope();
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",101, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Object isStatic = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

            if (null != TabExt.curMethod)
            {
                // Postavi broj formalnih parametara.
                //
                TabExt.curMethod.setLevel(Tab.currentScope().getnVars());
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",102, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Object isStatic = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

            if (null != TabExt.curMethod)
            {
                Tab.chainLocalSymbols(TabExt.curMethod);
            }
            // TODO : Sumnjivo mi ovo nesto, mozda ranije treba (da bi se spremio stek)
            //
            TabExt.curMethod.setAdr(Code.pc);
            if (nameOfMethod.equals(METHOD_ENTRY_NAME))
            {
                TabExt.doesMainExist = true;
                Code.mainPc = TabExt.curMethod.getAdr();

            }

            Code.put(Code.enter);
            Code.put(TabExt.curMethod.getLevel());
            Code.put(Tab.currentScope().getnVars());

            parser.log.debug("Zavrseno prepoznavanje deklaracija lokalnih promen", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",103, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MethodDecl ::= StaticEpsilon ReturnType NT$5 IDENT NT$6 PAR_LEFT NT$7 FormParsEpsilonParRight NT$8 LocalVarDeclListBraceLeftEpsilon NT$9 StatementListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int isStaticleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int isStaticright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Object isStatic = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;
		int nameOfMethodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int nameOfMethodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String nameOfMethod = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		
            // Dealocira se stek.
            //
            if (retType == Tab.noType)
            {
                Code.put(Code.exit);
                Code.put(Code.return_);
            }
            else
            {
                // Error in case of no return.
                //
                Code.put(Code.trap);
                Code.put(1);
            }

            Tab.closeScope();
            parser.log.debug("Prepoznat METHOD", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StaticEpsilon ::= STATIC 
            {
              Object RESULT =null;
		
                RESULT = new Boolean(true);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticEpsilon",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StaticEpsilon ::= 
            {
              Object RESULT =null;
		
                RESULT = new Boolean(false);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StaticEpsilon",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ReturnType ::= Type 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = type;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ReturnType ::= VOID 
            {
              Struct RESULT =null;
		
                RESULT = Tab.noType;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnType",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FormParsEpsilonParRight ::= FormParsParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsEpsilonParRight",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FormParsEpsilonParRight ::= PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsEpsilonParRight",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LocalVarDeclListBraceLeftEpsilon ::= LocalVarDeclListBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeftEpsilon",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LocalVarDeclListBraceLeftEpsilon ::= BRACE_LEFT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeftEpsilon",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LocalVarDeclListBraceLeft ::= LocalVarDeclListOrErrorSemi LocalVarDeclOrErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeft",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LocalVarDeclListBraceLeft ::= LocalVarDeclOrErrorBraceLeft 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListBraceLeft",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LocalVarDeclListOrErrorSemi ::= LocalVarDeclListOrErrorSemi LocalVarDeclOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListOrErrorSemi",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LocalVarDeclListOrErrorSemi ::= LocalVarDeclOrErrorSemi 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListOrErrorSemi",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$10 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

                curLocalType =  type;
                localVar = true;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",104, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LocalVarDeclOrErrorSemi ::= Type NT$10 LocalVarExprList SEMI_COLUMN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
                localVar = false;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorSemi",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LocalVarDeclOrErrorSemi ::= error SEMI_COLUMN 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
              parser.report_error("Uspesan oporavak od greske deklaracije lokalne promenljive,  SEMI_COLUMN je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorSemi",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LocalVarExprList ::= LocalVarExprList COMMA VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarExprList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LocalVarExprList ::= VarExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarExprList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LocalVarDeclOrErrorBraceLeft ::= error BRACE_LEFT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije lokalne promenljive,  BRACE_LEFT je resila stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorBraceLeft",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LocalVarDeclOrErrorBraceLeft ::= LocalVarDeclOrErrorSemi BRACE_LEFT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOrErrorBraceLeft",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StatementListEpsilon ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListEpsilon",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StatementListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListEpsilon",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FormParsParRight ::= FormPars FormParOrErrorParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsParRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FormParsParRight ::= FormParOrErrorParRight 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsParRight",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FormPars ::= FormPars FormParOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FormPars ::= FormParOrErrorComma 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FormParOrErrorComma ::= FormPar COMMA 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorComma",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FormParOrErrorComma ::= error COMMA 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije formalnog parametra lokalne funkcije,  COMMA je resila stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorComma",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FormParOrErrorParRight ::= FormPar PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorParRight",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FormParOrErrorParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske deklaracije formalnog parametra lokalne funkcije,  PAR_RIGHT je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParOrErrorParRight",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$11 ::= 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

                curFormType = type;
                formVar = true;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",105, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FormPar ::= Type NT$11 VarExpr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
                formVar = false;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int nameOfTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameOfTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String nameOfType = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

            Obj obj = Tab.find(nameOfType);
            if (obj.getKind() != Obj.Type)
            {
                RESULT = Tab.noType;
                semnatic_error("Nije definisan tip" + nameOfType + "na liniji" + nameOfTypeleft, null);
            }
            else
            {
                RESULT = obj.getType();
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Statement ::= DesignatorStatementOrAssignErrorSemi 
            {
              Object RESULT =null;
		
            parser.log.debug("Prepoznata STATEMENT", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$12 ::= 
            {
              Object RESULT =null;

            // FALSE.
            //
            Code.put(Code.const_n);
            Code.putFalseJump(Code.ne, 0);
            int adrConditionFalse = Code.pc - 2;
            listAdrIfConditionFalse.addLast(adrConditionFalse);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",106, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;


            Code.putJump(0);
            Code.fixup(listAdrIfConditionFalse.removeLast());
            int adrConditionTrue = Code.pc - 2;
            listAdrIfConditionTrue.addLast(adrConditionTrue);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$13",107, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Statement ::= IF PAR_LEFT IfConditionParRight NT$12 Statement NT$13 ElseStatementEpsilon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		

            Code.fixup(listAdrIfConditionTrue.removeLast());
            parser.log.debug("Prepoznat IF", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$14 ::= 
            {
              Object RESULT =null;

            listAdrForCondition.addLast(Code.pc);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$14",108, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

            Code.put(Code.const_n);
            Code.putFalseJump(Code.ne, 0);
            int adrConditionFalse = Code.pc - 2;
            listAdrForConditionFalse.addLast(adrConditionFalse);


            forLastDesigantorBeginAddress = Code.pc;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$15",109, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

            pushOnCodeStack(listSavedCode, forLastDesigantorBeginAddress);
            listOfListOfContinuesInFor.addLast(new LinkedList<Integer>());
            listOfListOfBreaksInFor.addLast(new LinkedList<Integer>());
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$16",110, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Statement ::= FOR PAR_LEFT DesignatorStatementOrAssign SEMI_COLUMN NT$14 ForConditionSemi NT$15 DesignatorStatementOrAssignOrErrorParRight NT$16 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            updateAdresses(listOfListOfContinuesInFor);
            popFromCodeStack(listSavedCode);

            int adrCondition = listAdrForCondition.removeLast();
            Code.putJump(adrCondition);

            updateAdresses(listOfListOfBreaksInFor);
            Code.fixup(listAdrForConditionFalse.removeLast());
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Statement ::= FOR error SEMI_COLUMN ForCondition SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN error SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN ForCondition SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Statement ::= FOR error SEMI_COLUMN error SEMI_COLUMN DesignatorStatementOrAssign PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Statement ::= FOR error SEMI_COLUMN ForCondition SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Statement ::= FOR DesignatorStatementOrAssign SEMI_COLUMN error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Statement ::= FOR error SEMI_COLUMN error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Statement ::= FOR error SEMI_COLUMN error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Statement ::= FOR error PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Statement ::= BREAK SEMI_COLUMN 
            {
              Object RESULT =null;
		
            // Ne mora 0. Moze sta god.
            //
            Code.putJump(0);
            int adr = Code.pc - 2;
            listOfListOfBreaksInFor.getLast().addLast(adr);
            parser.log.debug("Prepoznat BREAK", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Statement ::= CONTINUE SEMI_COLUMN 
            {
              Object RESULT =null;
		
            Code.putJump(0);
            int adr = Code.pc - 2;
            listOfListOfContinuesInFor.getLast().addLast(adr);
            parser.log.debug("Prepoznat CONTINUE", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Statement ::= RETURN ExprEpsilon SEMI_COLUMN 
            {
              Object RESULT =null;
		
            // TODO : return check semantic.
            // Should exist, are types ok...
            //
            Code.put(Code.exit);
            Code.put(Code.return_);

            parser.log.debug("Prepoznat RETURN", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Statement ::= READ PAR_LEFT Designator PAR_RIGHT SEMI_COLUMN 
            {
              Object RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper des = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
            if (des.isLeftValue() &&
                (des.getObj().getType().equals(Tab.intType)
                || (des.getObj().getType().equals(Tab.charType))
                || (des.getObj().getType().equals(TabExt.boolType))))
            {
                Code.put(Code.pop);
                if (des.getObj().getType().equals(Tab.charType))
                {
                    Code.put(Code.bread);
                }
                else
                {
                    Code.put(Code.read);
                }
                Code.store(des.getObj());
            }
            else
            {

            }
            parser.log.debug("Prepoznat READ", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Statement ::= PRINT PAR_LEFT Expr CommaConstNumEpsilon PAR_RIGHT SEMI_COLUMN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int numObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj numObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
            Struct typeExpr = expr.getObj().getType();
            if (typeExpr.equals(TabExt.boolType)
                || typeExpr.equals(Tab.intType)
                || typeExpr.equals(Tab.charType))
                {
                    // Da li ima dodatnog parametra.
                    //
                    if (!numObj.getType().equals(Tab.noType))
                    {
                        Code.load(numObj);
                    }
                    else
                    {
                        Code.loadConst(0);
                    }
                    if (typeExpr.equals(Tab.charType))
                    {
                        Code.put(Code.bprint);
                    }
                    else
                    {
                        Code.put(Code.print);
                    }

                    if (expr.isArrayElement())
                    {
                        Code.put(Code.pop);
                        Code.put(Code.pop);
                    }
                }
                else
                {
                    expr.setSemanticError(true);
                }
            RESULT = expr;
            parser.log.debug("Prepoznat PRINT");
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Statement ::= BRACE_LEFT StatementListEpsilon BRACE_RIGHT 
            {
              Object RESULT =null;
		
            parser.log.debug("Prepoznat BLOK", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ElseStatementEpsilon ::= ELSE Statement 
            {
              Object RESULT =null;
		
            parser.log.debug("Prepoznat ELSE", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatementEpsilon",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ElseStatementEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStatementEpsilon",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExprEpsilon ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEpsilon",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExprEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEpsilon",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ForConditionSemi ::= ForCondition SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ForConditionSemi ::= SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ForConditionSemi ::= error SEMI_COLUMN 
            {
              Object RESULT =null;
		
              parser.report_error("Uspesan oporavak od greske kod uslova u for-u,  SEMI_COLUMN je resio stvar" , null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForConditionSemi",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CommaConstNumEpsilon ::= COMMA CONST_NUM 
            {
              Obj RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer number = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = new Obj(Obj.Con, number.toString(), Tab.intType, number.intValue(), numberleft);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaConstNumEpsilon",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CommaConstNumEpsilon ::= 
            {
              Obj RESULT =null;
		
            RESULT = new Obj(Obj.Con, "", Tab.noType);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaConstNumEpsilon",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DesignatorStatementOrAssign ::= DesignatorStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DesignatorStatementOrAssign ::= AssingmentStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DesignatorStatementOrAssign ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssign",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DesignatorStatementOrAssignOrErrorParRight ::= DesignatorStatement PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DesignatorStatementOrAssignOrErrorParRight ::= AssingmentStatement PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DesignatorStatementOrAssignOrErrorParRight ::= PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DesignatorStatementOrAssignOrErrorParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                  parser.report_error("Uspesan oporavak od greske kod inkrementatorra u for-u,  PAR_RIGHT je resio stvar" , null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignOrErrorParRight",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DesignatorStatementOrAssignErrorSemi ::= DesignatorStatement SEMI_COLUMN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignErrorSemi",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DesignatorStatementOrAssignErrorSemi ::= AssingmentStatementOrErrorSemi 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatementOrAssignErrorSemi",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DesignatorStatement ::= DesignatorIncOrDec 
            {
              Object RESULT =null;
		int incOrDecleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int incOrDecright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper incOrDec = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = incOrDec;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DesignatorStatement ::= DesignatorFuncCall 
            {
              Object RESULT =null;
		int funcCallleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcCallright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper funcCall = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (funcCall.getObj().getType() != Tab.noType)
            {
                Code.put(Code.pop);
            }
            RESULT = funcCall;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorStatement",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DesignatorIncOrDec ::= Designator IncOrDec 
            {
              ObjResultWrapper RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper designator = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!designator.isSemanticError() &&
                designator.isLeftValue() && designator.getObj().getType().equals(Tab.intType))
                {
                    Code.loadConst(1);
                    Code.put(op);
                    Code.store(designator.getObj());
                    designator.setRightValue(true);
                }
                else
                {
                    RESULT = designator.setSemanticError(true);
                }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorIncOrDec",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IncOrDec ::= OP_INC 
            {
              Integer RESULT =null;
		
        RESULT = Code.add;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncOrDec",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IncOrDec ::= OP_DEC 
            {
              Integer RESULT =null;
		
        RESULT = Code.sub;
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncOrDec",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DesignatorFuncCall ::= Designator PAR_LEFT ActParsEpsilon PAR_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
            Code.put(Code.call);
            // Because Code.call is put then pc  = pc + 1.
            //
            int adr = func.getObj().getAdr() - Code.pc + 1;
            Code.put2(adr);
            RESULT = func;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorFuncCall",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ActParsEpsilon ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsEpsilon",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ActParsEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsEpsilon",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$17 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (dest.isSemanticError() || !dest.isLeftValue())
            {
                RESULT = dest.setSemanticError(true);
            }
            else
            {
                if (dest.isArrayElement() && op == OP_ASSIGN_CODE)
                {
                    // a i a[i]
                    Code.put(Code.pop);
                    // a i
                }
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$17",111, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // AssingmentStatement ::= Designator Assignop NT$17 Expr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // Check error.
            //
            if (!dest.isSemanticError() && dest.isLeftValue() &&
                !expr.isSemanticError())
            {
                if (expr.isArrayElement())
                {
                        // a i a[i]
                    Code.put(Code.dup_x2);
                    // a[i] a i a[i]
                    Code.put(Code.pop);
                    // a[i] a i
                    Code.put(Code.pop);
                    // a[i] a
                    Code.put(Code.pop);
                    // a[i]
                }

                if (op != OP_ASSIGN_CODE)
                {
                    // Vrednost na steku nije duplirana jer
                    // treba samo da se koristi za izracunavanje
                    // Nista za dalje vrednosti.
                    Code.put(op);
                }
                else
                {
                    if (dest.isArrayElement())
                    {
                        /*
                        // a i a[i] nesto
                        Code.put(Code.dup_x1);
                        // a i nesto a[i] nesto
                        Code.put(Code.pop);
                        // a i nesto a[i]
                        Code.put(Code.pop);
                        // a i nesto
                        */
                    }
                }
                Code.store(dest.getObj());
                if ( (op == OP_ASSIGN_CODE)
                    && !dest.isArrayElement())
                {
                    Code.put(Code.pop);
                }
            }
            else
            {
                RESULT = dest.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssingmentStatement",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$18 ::= 
            {
              Object RESULT =null;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (dest.isSemanticError() || !dest.isLeftValue())
            {
                RESULT = dest.setSemanticError(true);
            }
            else
            {
                if (dest.isArrayElement() && op == OP_ASSIGN_CODE)
                {
                    // a i a[i]
                    Code.put(Code.pop);
                    // a i
                }
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$18",112, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // AssingmentStatementOrErrorSemi ::= Designator Assignop NT$18 AssignOpExpOrErrorSemi 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ObjResultWrapper dest = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // Check error.
            //
            if (!dest.isSemanticError() && dest.isLeftValue() &&
                !expr.isSemanticError())
            {
                if (expr.isArrayElement())
                {
                        // a i a[i]
                    Code.put(Code.dup_x2);
                    // a[i] a i a[i]
                    Code.put(Code.pop);
                    // a[i] a i
                    Code.put(Code.pop);
                    // a[i] a
                    Code.put(Code.pop);
                    // a[i]
                }

                if (op != OP_ASSIGN_CODE)
                {
                    // Vrednost na steku nije duplirana jer
                    // treba samo da se koristi za izracunavanje
                    // Nista za dalje vrednosti.
                    Code.put(op);
                }
                else
                {
                    if (dest.isArrayElement())
                    {
                        /*
                        // a i a[i] nesto
                        Code.put(Code.dup_x1);
                        // a i nesto a[i] nesto
                        Code.put(Code.pop);
                        // a i nesto a[i]
                        Code.put(Code.pop);
                        // a i nesto
                        */
                    }
                }
                Code.store(dest.getObj());
                if ( (op == OP_ASSIGN_CODE)
                    && !dest.isArrayElement())
                {
                    Code.put(Code.pop);
                }
            }
            else
            {
                RESULT = dest.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssingmentStatementOrErrorSemi",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // AssignOpExpOrErrorSemi ::= ExpOrErrorSemi 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AssignOpExpOrErrorSemi",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ExpOrErrorSemi ::= Expr SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            RESULT = expr;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpOrErrorSemi",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ExpOrErrorSemi ::= error SEMI_COLUMN 
            {
              ObjResultWrapper RESULT =null;
		

        parser.report_error("Uspesan oporavak od greske dodele promenljive,  SEMI_COLUMN je resio stvar", null);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExpOrErrorSemi",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ActPars ::= Expr CommaExprListEpsilon 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CommaExprListEpsilon ::= CommaExprList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprListEpsilon",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CommaExprListEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprListEpsilon",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CommaExprList ::= CommaExprList CommaExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CommaExprList ::= CommaExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExprList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CommaExpr ::= COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CommaExpr",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ForCondition ::= OpOrCondTermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ForCondition",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // IfConditionParRight ::= OpOrCondTermList PAR_RIGHT 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper cond = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                RESULT = cond;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfConditionParRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // IfConditionParRight ::= error PAR_RIGHT 
            {
              Object RESULT =null;
		
                parser.report_error("Uspesan oporavak od greske prilikom definisanja uslova za if PAR_RIGHT je resila stvar", null);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfConditionParRight",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OpOrCondTermList ::= OpOrCondTermList OP_OR CondTerm 
            {
              ObjResultWrapper RESULT =null;
		
            Code.put(Code.add);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpOrCondTermList",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OpOrCondTermList ::= CondTerm 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpOrCondTermList",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CondTerm ::= OpAndCondFactList 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OpAndCondFactList ::= OpAndCondFactList OP_AND CondFact 
            {
              ObjResultWrapper RESULT =null;
		int leftFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFact = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int rightFactleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFact = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Code.put(Code.mul);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpAndCondFactList",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OpAndCondFactList ::= CondFact 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpAndCondFactList",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$19 ::= 
            {
              ObjResultWrapper RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            if (!expr.isSemanticError())
            {
                expr.generateRightValue();
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$19",113, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CondFact ::= Expr NT$19 RelOpExprOrEpsilon 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int compareRightleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int compareRightright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper compareRight = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            //
            if (!expr.isSemanticError()
                && ( (null == compareRight) || (!compareRight.isSemanticError())))
            {
                if (null == compareRight)
                {
                    if (!expr.getObj().getType().equals(TabExt.boolType))
                    {
                        RESULT = expr.setSemanticError(true);
                    }
                }
                else
                {
                    // TODO: add checks for type compatiblility.
                    //
                    // JCONDFALSE.
                    //
                    Code.putFalseJump(compareRight.getRelOp(), 0);
                    int adrFromWhereToJumpFalse = Code.pc - 2;
                    // TRUE.
                    //
                    Code.put(Code.const_1);
                    Code.putJump(0);
                    int adrFromWhereToJumpTrue = Code.pc - 2;

                    Code.fixup(adrFromWhereToJumpFalse);
                    // False.
                    //
                    Code.put(Code.const_n);
                    // JMP over this
                    Code.fixup(adrFromWhereToJumpTrue);
                }
                RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", TabExt.boolType), true);
            }
            else
            {
                RESULT = expr;
            }


        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // RelOpExprOrEpsilon ::= Relop Expr 
            {
              ObjResultWrapper RESULT =null;
		int relOpleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int relOpright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer relOp = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper expr = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!expr.isSemanticError())
            {
                expr.generateRightValue();
                expr.setRelOp(relOp);
            }
            RESULT = expr;

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprOrEpsilon",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // RelOpExprOrEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelOpExprOrEpsilon",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Expr ::= OpSubEpsilon AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int isNegativeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int isNegativeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Boolean isNegative = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (isNegative
                && !term.isSemanticError()
                && term.getObj().getType().equals(Tab.intType))
            {
                Code.put(Code.neg);
                term.generateRightValue();
                RESULT = term;
            }
            else if (!isNegative)
            {
                RESULT = term;
            }
            else
            {
                RESULT = term.setSemanticError(true);
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OpSubEpsilon ::= OP_SUB 
            {
              Boolean RESULT =null;
		
            RESULT = true;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpSubEpsilon",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OpSubEpsilon ::= 
            {
              Boolean RESULT =null;
		
            RESULT = false;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpSubEpsilon",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AddopRightTerm ::= AddopLeftTerm AddopRight AddopRightTerm 
            {
              ObjResultWrapper RESULT =null;
		int leftTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // Treba dodati provere za polja i sve ostale gluposti
        //
        if (leftTerm.getObj().getType().equals(Tab.intType) &&
        rightTerm.getObj().getType().equals(Tab.intType)
        && leftTerm.isLeftValue()
        && !leftTerm.isSemanticError()
        && !rightTerm.isSemanticError())
        {
            rightTerm.generateRightValue();
            Code.put(op);
            if (leftTerm.isArrayElement())
            {
                // a i sum
                Code.put(Code.dup_x2);
                // sum a i sum
            }
            else
            {
                Code.put(Code.dup);
            }
            // sum
            Code.store(leftTerm.getObj());
            // TO DO : ARray class and other shit.
            //

            leftTerm.setRightValue(true);
            RESULT = leftTerm;
        }
        else
        {
            // set errorr;
            RESULT = leftTerm.setSemanticError(true);
        }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRightTerm",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // AddopRightTerm ::= AddopLeftTerm 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = type;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRightTerm",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // AddopLeftTerm ::= AddopLeftTerm AddopLeft Term 
            {
              ObjResultWrapper RESULT =null;
		int leftTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightTermleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightTermright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightTerm = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        if (leftTerm.getObj().getType().equals(Tab.intType)
        && (rightTerm.getObj().getType().equals(Tab.intType)))
        {
            rightTerm.generateRightValue();
            Code.put(op);
            leftTerm.generateRightValue();
            RESULT = new ObjResultWrapper(new Obj(Obj.Con,"",Tab.intType), true);
        }
        else
        {
            RESULT = leftTerm.setSemanticError(true);
        }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeftTerm",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // AddopLeftTerm ::= Term 
            {
              ObjResultWrapper RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper term = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = term;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeftTerm",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Term ::= MullopRightFactor 
            {
              ObjResultWrapper RESULT =null;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = rightFactor;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",78, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // MullopRightFactor ::= MulopLeftFactor MulopRight MullopRightFactor 
            {
              ObjResultWrapper RESULT =null;
		int leftFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // TODO: Treba dodati provere za polja i sve ostale gluposti
            //
            if (leftFactor.getObj().getType().equals(Tab.intType) &&
            rightFactor.getObj().getType().equals(Tab.intType)
            && leftFactor.isLeftValue()
            && !leftFactor.isSemanticError()
            && !rightFactor.isSemanticError())
            {
                rightFactor.generateRightValue();
                Code.put(op);
                if (leftFactor.isArrayElement())
                {
                    Code.put(Code.dup_x2);
                }
                else
                {
                    Code.put(Code.dup);
                }

                Code.store(leftFactor.getObj());
                leftFactor.setRightValue(true);
                RESULT = leftFactor;
            }
            else
            {
                RESULT = leftFactor.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MullopRightFactor",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // MullopRightFactor ::= MulopLeftFactor 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper type = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = type;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MullopRightFactor",79, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // MulopLeftFactor ::= MulopLeftFactor MulopLeft Factor 
            {
              ObjResultWrapper RESULT =null;
		int leftFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ObjResultWrapper leftFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightFactorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightFactorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper rightFactor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (leftFactor.getObj().getType().equals(Tab.intType)
            && (rightFactor.getObj().getType().equals(Tab.intType)))
            {
                rightFactor.generateRightValue();
                Code.put(op);
                leftFactor.generateRightValue();
                RESULT = new ObjResultWrapper(new Obj(Obj.Con,"",Tab.intType), true);
            }
            else
            {
                RESULT = leftFactor.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeftFactor",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // MulopLeftFactor ::= Factor 
            {
              ObjResultWrapper RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper factor = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // Do ovde dodje x : i : x[i]
            RESULT = factor;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeftFactor",80, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Factor ::= DesignatorFuncCall 
            {
              ObjResultWrapper RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper func = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = func;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Factor ::= Designator 
            {
              ObjResultWrapper RESULT =null;
		int designatorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int designatorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper designator = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = designator;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Factor ::= ConstValue 
            {
              ObjResultWrapper RESULT =null;
		int constValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int constValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj constValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            Code.load(constValue);
            RESULT = new ObjResultWrapper(constValue, true/*isRightValue*/);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Factor ::= NEW Type BracketExprEpsilon 
            {
              ObjResultWrapper RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int isArrayleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int isArrayright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean isArray = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (isArray)
            {
                Code.put(Code.newarray);
                // TODO: For classes which are non word alligned,
                // alloc using char
                //
                if (type.equals(Tab.charType))
                {
                    Code.put(0);
                }
                else
                {
                    Code.put(1);
                }
                Struct struct = new Struct(Struct.Array, type);
                RESULT = new ObjResultWrapper(new Obj(Obj.Con, "", struct), true);
            }
            else
            {
                // TODO : if it's class alloc as it is supposed to be.
                //
                if (type.equals(Tab.charType))
                {
                    Code.put(CHAR_SIZE);
                }
                else
                {
                    Code.put(INT_SIZE);
                }
            }
            // TO DO : Add check of errors.
            //
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Factor ::= PAR_LEFT Expr PAR_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		int resultleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper result = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
            RESULT = result;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",81, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ParActParsEpsilonEpsilon ::= PAR_LEFT ActParsEpsilon PAR_RIGHT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ParActParsEpsilonEpsilon",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ParActParsEpsilonEpsilon ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ParActParsEpsilonEpsilon",82, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // BracketExprEpsilon ::= BRACKET_LEFT Expr BRACKET_RIGHT 
            {
              Boolean RESULT =null;
		
                RESULT = true;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketExprEpsilon",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BracketExprEpsilon ::= 
            {
              Boolean RESULT =null;
		
                RESULT = false;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BracketExprEpsilon",83, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$20 ::= 
            {
              ObjResultWrapper RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

            curObjWrappFieldOrElem = find_for_use_and_report(name, nameleft, name);

            listCurObjWrapperFieldOrElem.addLast(curObjWrappFieldOrElem);
            if ((!curObjWrappFieldOrElem.isSemanticError())
            && (curObjWrappFieldOrElem.loadable()))
            {
                Code.load(curObjWrappFieldOrElem.getObj());
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$20",114, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator ::= IDENT NT$20 DotIdentOrBracketExprListEpsilon 
            {
              ObjResultWrapper RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (ObjResultWrapper) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (!curObjWrappFieldOrElem.isSemanticError())
            {
                if(objWrapper == null)
                {

                    ObjResultWrapper objWrap = new ObjResultWrapper(curObjWrappFieldOrElem.getObj(), curObjWrappFieldOrElem.getObj().getKind() == Obj.Con);
                    RESULT = objWrap;
                }
                else if ( (objWrapper != null) && (!objWrapper.isSemanticError()) )
                {
                    RESULT = objWrapper;
                }
            }
            else
            {
                RESULT = curObjWrappFieldOrElem.setSemanticError(true);
            }

            if (!curObjWrappFieldOrElem.isSemanticError())
            {
                listCurObjWrapperFieldOrElem.removeLast();
                if (listCurObjWrapperFieldOrElem.size() != 0)
                {
                    curObjWrappFieldOrElem = listCurObjWrapperFieldOrElem.getLast();
                }
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",84, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // DotIdentOrBracketExprListEpsilon ::= DotIdentOrBracketExprList 
            {
              ObjResultWrapper RESULT =null;
		int objWrapleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrap = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = objWrap;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprListEpsilon",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // DotIdentOrBracketExprListEpsilon ::= 
            {
              ObjResultWrapper RESULT =null;
		
            RESULT = null;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprListEpsilon",85, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // DotIdentOrBracketExprList ::= DotIdentOrBracketExprList DotIdentOrBracketExpr 
            {
              ObjResultWrapper RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ObjResultWrapper left = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // TODO dodaj proveru da li je levo klasa ili niz (drugo nista ne moze...), i tek onda expandujes to ce ti biti nivo C, do tad ne brini (sledeca nedelja :O )
            if (left.isSemanticError() || objWrapper.isSemanticError())
            {
                RESULT = objWrapper.setSemanticError(true);
            }
            else
            {
                RESULT = objWrapper;
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprList",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DotIdentOrBracketExprList ::= DotIdentOrBracketExpr 
            {
              ObjResultWrapper RESULT =null;
		int objWrapperleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int objWrapperright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		ObjResultWrapper objWrapper = (ObjResultWrapper)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            RESULT = objWrapper;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExprList",86, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // DotIdentOrBracketExpr ::= DOT IDENT 
            {
              ObjResultWrapper RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // DotIdentOrBracketExpr ::= BRACKET_LEFT Expr BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		
            if (!curObjWrappFieldOrElem.isSemanticError()
            && curObjWrappFieldOrElem.isArray())
            {
                Struct curArrayDotType = curObjWrappFieldOrElem.getObj().getType().getElemType();
                Obj obj = new Obj(Obj.Elem, "", curArrayDotType);
                curObjWrappFieldOrElem.setObj(obj);
                Code.put(Code.dup2);
                Code.load(obj);
                RESULT = new ObjResultWrapper(obj, false /* RVALUE */);
            }
            else
            {
                RESULT = curObjWrappFieldOrElem.setSemanticError(true);
            }
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // DotIdentOrBracketExpr ::= BRACKET_LEFT error BRACKET_RIGHT 
            {
              ObjResultWrapper RESULT =null;
		
            parser.report_error("Uspesan oporavak od greske kod indeksa niza,  BRACKET_RIGHT je resio stvar" , null);
            // TODO test further.
            //
            RESULT = new ObjResultWrapper().setSyntaxError(true);
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DotIdentOrBracketExpr",87, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Assignop ::= OP_ASSIGN 
            {
              Integer RESULT =null;
		
                RESULT = OP_ASSIGN_CODE;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Assignop ::= AddopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = op;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Assignop ::= MulopRight 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                RESULT = op;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Assignop",88, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Relop ::= OP_EQ 
            {
              Integer RESULT =null;
		
                RESULT = Code.eq;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Relop ::= OP_NOT_EQ 
            {
              Integer RESULT =null;
		
                RESULT = Code.ne;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Relop ::= OP_GTE 
            {
              Integer RESULT =null;
		
                RESULT = Code.ge;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Relop ::= OP_GREAT 
            {
              Integer RESULT =null;
		
                RESULT = Code.gt;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Relop ::= OP_LESS 
            {
              Integer RESULT =null;
		
                RESULT = Code.lt;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Relop ::= OP_LTE 
            {
              Integer RESULT =null;
		
                RESULT = Code.le;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",89, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // AddopLeft ::= OP_ADD 
            {
              Integer RESULT =null;
		
                RESULT = Code.add;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // AddopLeft ::= OP_SUB 
            {
              Integer RESULT =null;
		
                RESULT = Code.sub;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopLeft",90, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // AddopRight ::= OP_ASSIGN_ADD 
            {
              Integer RESULT =null;
		
                RESULT = Code.add;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // AddopRight ::= OP_ASSIGN_SUB 
            {
              Integer RESULT =null;
		
                RESULT = Code.sub;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopRight",91, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // MulopLeft ::= OP_MUL 
            {
              Integer RESULT =null;
		
                RESULT = Code.mul;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // MulopLeft ::= OP_DIV 
            {
              Integer RESULT =null;
		
                RESULT = Code.div;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // MulopLeft ::= OP_MOD 
            {
              Integer RESULT =null;
		
                RESULT = Code.rem;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopLeft",92, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // MulopRight ::= OP_ASSIGN_MUL 
            {
              Integer RESULT =null;
		
                RESULT = Code.mul;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // MulopRight ::= OP_ASSIGN_DIV 
            {
              Integer RESULT =null;
		
                RESULT = Code.div;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // MulopRight ::= OP_ASSIGN_MOD 
            {
              Integer RESULT =null;
		
                RESULT = Code.rem;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopRight",93, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MJParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
              return CUP$MJParser$do_action_part00000000(
                               CUP$MJParser$act_num,
                               CUP$MJParser$parser,
                               CUP$MJParser$stack,
                               CUP$MJParser$top);
    }
}

}
